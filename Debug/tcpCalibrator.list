
tcpCalibrator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080074e8  080074e8  000084e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800794c  0800794c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800794c  0800794c  000091d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800794c  0800794c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800794c  0800794c  0000894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007950  08007950  00008950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007954  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001d8  08007b28  000091d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08007b28  00009468  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e6f  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d7  00000000  00000000  0001106b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00012a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058b  00000000  00000000  000131a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb0b  00000000  00000000  0001372b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aff0  00000000  00000000  0002f236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2209  00000000  00000000  0003a226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc42f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000dc474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000decf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d8 	.word	0x200001d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080074d0 	.word	0x080074d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001dc 	.word	0x200001dc
 8000100:	080074d0 	.word	0x080074d0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 ffc5 	bl	80013c8 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff09 	bl	8001260 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffb7 	bl	80013c8 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffad 	bl	80013c8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff33 	bl	80012e8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff29 	bl	80012e8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	464f      	mov	r7, r9
 80004a8:	4646      	mov	r6, r8
 80004aa:	46d6      	mov	lr, sl
 80004ac:	b5c0      	push	{r6, r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	9000      	str	r0, [sp, #0]
 80004b2:	9101      	str	r1, [sp, #4]
 80004b4:	030e      	lsls	r6, r1, #12
 80004b6:	004c      	lsls	r4, r1, #1
 80004b8:	0fcd      	lsrs	r5, r1, #31
 80004ba:	0a71      	lsrs	r1, r6, #9
 80004bc:	9e00      	ldr	r6, [sp, #0]
 80004be:	005f      	lsls	r7, r3, #1
 80004c0:	0f76      	lsrs	r6, r6, #29
 80004c2:	430e      	orrs	r6, r1
 80004c4:	9900      	ldr	r1, [sp, #0]
 80004c6:	9200      	str	r2, [sp, #0]
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	00c9      	lsls	r1, r1, #3
 80004cc:	4689      	mov	r9, r1
 80004ce:	0319      	lsls	r1, r3, #12
 80004d0:	0d7b      	lsrs	r3, r7, #21
 80004d2:	4698      	mov	r8, r3
 80004d4:	9b01      	ldr	r3, [sp, #4]
 80004d6:	0a49      	lsrs	r1, r1, #9
 80004d8:	0fdb      	lsrs	r3, r3, #31
 80004da:	469c      	mov	ip, r3
 80004dc:	9b00      	ldr	r3, [sp, #0]
 80004de:	9a00      	ldr	r2, [sp, #0]
 80004e0:	0f5b      	lsrs	r3, r3, #29
 80004e2:	430b      	orrs	r3, r1
 80004e4:	4641      	mov	r1, r8
 80004e6:	0d64      	lsrs	r4, r4, #21
 80004e8:	00d2      	lsls	r2, r2, #3
 80004ea:	1a61      	subs	r1, r4, r1
 80004ec:	4565      	cmp	r5, ip
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x4e>
 80004f0:	e0a6      	b.n	8000640 <__aeabi_dadd+0x19c>
 80004f2:	2900      	cmp	r1, #0
 80004f4:	dd72      	ble.n	80005dc <__aeabi_dadd+0x138>
 80004f6:	4647      	mov	r7, r8
 80004f8:	2f00      	cmp	r7, #0
 80004fa:	d100      	bne.n	80004fe <__aeabi_dadd+0x5a>
 80004fc:	e0dd      	b.n	80006ba <__aeabi_dadd+0x216>
 80004fe:	4fcc      	ldr	r7, [pc, #816]	@ (8000830 <__aeabi_dadd+0x38c>)
 8000500:	42bc      	cmp	r4, r7
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x62>
 8000504:	e19a      	b.n	800083c <__aeabi_dadd+0x398>
 8000506:	2701      	movs	r7, #1
 8000508:	2938      	cmp	r1, #56	@ 0x38
 800050a:	dc17      	bgt.n	800053c <__aeabi_dadd+0x98>
 800050c:	2780      	movs	r7, #128	@ 0x80
 800050e:	043f      	lsls	r7, r7, #16
 8000510:	433b      	orrs	r3, r7
 8000512:	291f      	cmp	r1, #31
 8000514:	dd00      	ble.n	8000518 <__aeabi_dadd+0x74>
 8000516:	e1dd      	b.n	80008d4 <__aeabi_dadd+0x430>
 8000518:	2720      	movs	r7, #32
 800051a:	1a78      	subs	r0, r7, r1
 800051c:	001f      	movs	r7, r3
 800051e:	4087      	lsls	r7, r0
 8000520:	46ba      	mov	sl, r7
 8000522:	0017      	movs	r7, r2
 8000524:	40cf      	lsrs	r7, r1
 8000526:	4684      	mov	ip, r0
 8000528:	0038      	movs	r0, r7
 800052a:	4657      	mov	r7, sl
 800052c:	4307      	orrs	r7, r0
 800052e:	4660      	mov	r0, ip
 8000530:	4082      	lsls	r2, r0
 8000532:	40cb      	lsrs	r3, r1
 8000534:	1e50      	subs	r0, r2, #1
 8000536:	4182      	sbcs	r2, r0
 8000538:	1af6      	subs	r6, r6, r3
 800053a:	4317      	orrs	r7, r2
 800053c:	464b      	mov	r3, r9
 800053e:	1bdf      	subs	r7, r3, r7
 8000540:	45b9      	cmp	r9, r7
 8000542:	4180      	sbcs	r0, r0
 8000544:	4240      	negs	r0, r0
 8000546:	1a36      	subs	r6, r6, r0
 8000548:	0233      	lsls	r3, r6, #8
 800054a:	d400      	bmi.n	800054e <__aeabi_dadd+0xaa>
 800054c:	e0ff      	b.n	800074e <__aeabi_dadd+0x2aa>
 800054e:	0276      	lsls	r6, r6, #9
 8000550:	0a76      	lsrs	r6, r6, #9
 8000552:	2e00      	cmp	r6, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0xb4>
 8000556:	e13c      	b.n	80007d2 <__aeabi_dadd+0x32e>
 8000558:	0030      	movs	r0, r6
 800055a:	f001 ff43 	bl	80023e4 <__clzsi2>
 800055e:	0003      	movs	r3, r0
 8000560:	3b08      	subs	r3, #8
 8000562:	2120      	movs	r1, #32
 8000564:	0038      	movs	r0, r7
 8000566:	1aca      	subs	r2, r1, r3
 8000568:	40d0      	lsrs	r0, r2
 800056a:	409e      	lsls	r6, r3
 800056c:	0002      	movs	r2, r0
 800056e:	409f      	lsls	r7, r3
 8000570:	4332      	orrs	r2, r6
 8000572:	429c      	cmp	r4, r3
 8000574:	dd00      	ble.n	8000578 <__aeabi_dadd+0xd4>
 8000576:	e1a6      	b.n	80008c6 <__aeabi_dadd+0x422>
 8000578:	1b18      	subs	r0, r3, r4
 800057a:	3001      	adds	r0, #1
 800057c:	1a09      	subs	r1, r1, r0
 800057e:	003e      	movs	r6, r7
 8000580:	408f      	lsls	r7, r1
 8000582:	40c6      	lsrs	r6, r0
 8000584:	1e7b      	subs	r3, r7, #1
 8000586:	419f      	sbcs	r7, r3
 8000588:	0013      	movs	r3, r2
 800058a:	408b      	lsls	r3, r1
 800058c:	4337      	orrs	r7, r6
 800058e:	431f      	orrs	r7, r3
 8000590:	40c2      	lsrs	r2, r0
 8000592:	003b      	movs	r3, r7
 8000594:	0016      	movs	r6, r2
 8000596:	2400      	movs	r4, #0
 8000598:	4313      	orrs	r3, r2
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0xfa>
 800059c:	e1df      	b.n	800095e <__aeabi_dadd+0x4ba>
 800059e:	077b      	lsls	r3, r7, #29
 80005a0:	d100      	bne.n	80005a4 <__aeabi_dadd+0x100>
 80005a2:	e332      	b.n	8000c0a <__aeabi_dadd+0x766>
 80005a4:	230f      	movs	r3, #15
 80005a6:	003a      	movs	r2, r7
 80005a8:	403b      	ands	r3, r7
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	d004      	beq.n	80005b8 <__aeabi_dadd+0x114>
 80005ae:	1d3a      	adds	r2, r7, #4
 80005b0:	42ba      	cmp	r2, r7
 80005b2:	41bf      	sbcs	r7, r7
 80005b4:	427f      	negs	r7, r7
 80005b6:	19f6      	adds	r6, r6, r7
 80005b8:	0233      	lsls	r3, r6, #8
 80005ba:	d400      	bmi.n	80005be <__aeabi_dadd+0x11a>
 80005bc:	e323      	b.n	8000c06 <__aeabi_dadd+0x762>
 80005be:	4b9c      	ldr	r3, [pc, #624]	@ (8000830 <__aeabi_dadd+0x38c>)
 80005c0:	3401      	adds	r4, #1
 80005c2:	429c      	cmp	r4, r3
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0x124>
 80005c6:	e0b4      	b.n	8000732 <__aeabi_dadd+0x28e>
 80005c8:	4b9a      	ldr	r3, [pc, #616]	@ (8000834 <__aeabi_dadd+0x390>)
 80005ca:	0564      	lsls	r4, r4, #21
 80005cc:	401e      	ands	r6, r3
 80005ce:	0d64      	lsrs	r4, r4, #21
 80005d0:	0777      	lsls	r7, r6, #29
 80005d2:	08d2      	lsrs	r2, r2, #3
 80005d4:	0276      	lsls	r6, r6, #9
 80005d6:	4317      	orrs	r7, r2
 80005d8:	0b36      	lsrs	r6, r6, #12
 80005da:	e0ac      	b.n	8000736 <__aeabi_dadd+0x292>
 80005dc:	2900      	cmp	r1, #0
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x13e>
 80005e0:	e07e      	b.n	80006e0 <__aeabi_dadd+0x23c>
 80005e2:	4641      	mov	r1, r8
 80005e4:	1b09      	subs	r1, r1, r4
 80005e6:	2c00      	cmp	r4, #0
 80005e8:	d000      	beq.n	80005ec <__aeabi_dadd+0x148>
 80005ea:	e160      	b.n	80008ae <__aeabi_dadd+0x40a>
 80005ec:	0034      	movs	r4, r6
 80005ee:	4648      	mov	r0, r9
 80005f0:	4304      	orrs	r4, r0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0x152>
 80005f4:	e1c9      	b.n	800098a <__aeabi_dadd+0x4e6>
 80005f6:	1e4c      	subs	r4, r1, #1
 80005f8:	2901      	cmp	r1, #1
 80005fa:	d100      	bne.n	80005fe <__aeabi_dadd+0x15a>
 80005fc:	e22e      	b.n	8000a5c <__aeabi_dadd+0x5b8>
 80005fe:	4d8c      	ldr	r5, [pc, #560]	@ (8000830 <__aeabi_dadd+0x38c>)
 8000600:	42a9      	cmp	r1, r5
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x162>
 8000604:	e224      	b.n	8000a50 <__aeabi_dadd+0x5ac>
 8000606:	2701      	movs	r7, #1
 8000608:	2c38      	cmp	r4, #56	@ 0x38
 800060a:	dc11      	bgt.n	8000630 <__aeabi_dadd+0x18c>
 800060c:	0021      	movs	r1, r4
 800060e:	291f      	cmp	r1, #31
 8000610:	dd00      	ble.n	8000614 <__aeabi_dadd+0x170>
 8000612:	e20b      	b.n	8000a2c <__aeabi_dadd+0x588>
 8000614:	2420      	movs	r4, #32
 8000616:	0037      	movs	r7, r6
 8000618:	4648      	mov	r0, r9
 800061a:	1a64      	subs	r4, r4, r1
 800061c:	40a7      	lsls	r7, r4
 800061e:	40c8      	lsrs	r0, r1
 8000620:	4307      	orrs	r7, r0
 8000622:	4648      	mov	r0, r9
 8000624:	40a0      	lsls	r0, r4
 8000626:	40ce      	lsrs	r6, r1
 8000628:	1e44      	subs	r4, r0, #1
 800062a:	41a0      	sbcs	r0, r4
 800062c:	1b9b      	subs	r3, r3, r6
 800062e:	4307      	orrs	r7, r0
 8000630:	1bd7      	subs	r7, r2, r7
 8000632:	42ba      	cmp	r2, r7
 8000634:	4192      	sbcs	r2, r2
 8000636:	4252      	negs	r2, r2
 8000638:	4665      	mov	r5, ip
 800063a:	4644      	mov	r4, r8
 800063c:	1a9e      	subs	r6, r3, r2
 800063e:	e783      	b.n	8000548 <__aeabi_dadd+0xa4>
 8000640:	2900      	cmp	r1, #0
 8000642:	dc00      	bgt.n	8000646 <__aeabi_dadd+0x1a2>
 8000644:	e09c      	b.n	8000780 <__aeabi_dadd+0x2dc>
 8000646:	4647      	mov	r7, r8
 8000648:	2f00      	cmp	r7, #0
 800064a:	d167      	bne.n	800071c <__aeabi_dadd+0x278>
 800064c:	001f      	movs	r7, r3
 800064e:	4317      	orrs	r7, r2
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x1b0>
 8000652:	e0e4      	b.n	800081e <__aeabi_dadd+0x37a>
 8000654:	1e48      	subs	r0, r1, #1
 8000656:	2901      	cmp	r1, #1
 8000658:	d100      	bne.n	800065c <__aeabi_dadd+0x1b8>
 800065a:	e19b      	b.n	8000994 <__aeabi_dadd+0x4f0>
 800065c:	4f74      	ldr	r7, [pc, #464]	@ (8000830 <__aeabi_dadd+0x38c>)
 800065e:	42b9      	cmp	r1, r7
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1c0>
 8000662:	e0eb      	b.n	800083c <__aeabi_dadd+0x398>
 8000664:	2701      	movs	r7, #1
 8000666:	0001      	movs	r1, r0
 8000668:	2838      	cmp	r0, #56	@ 0x38
 800066a:	dc11      	bgt.n	8000690 <__aeabi_dadd+0x1ec>
 800066c:	291f      	cmp	r1, #31
 800066e:	dd00      	ble.n	8000672 <__aeabi_dadd+0x1ce>
 8000670:	e1c7      	b.n	8000a02 <__aeabi_dadd+0x55e>
 8000672:	2720      	movs	r7, #32
 8000674:	1a78      	subs	r0, r7, r1
 8000676:	001f      	movs	r7, r3
 8000678:	4684      	mov	ip, r0
 800067a:	4087      	lsls	r7, r0
 800067c:	0010      	movs	r0, r2
 800067e:	40c8      	lsrs	r0, r1
 8000680:	4307      	orrs	r7, r0
 8000682:	4660      	mov	r0, ip
 8000684:	4082      	lsls	r2, r0
 8000686:	40cb      	lsrs	r3, r1
 8000688:	1e50      	subs	r0, r2, #1
 800068a:	4182      	sbcs	r2, r0
 800068c:	18f6      	adds	r6, r6, r3
 800068e:	4317      	orrs	r7, r2
 8000690:	444f      	add	r7, r9
 8000692:	454f      	cmp	r7, r9
 8000694:	4180      	sbcs	r0, r0
 8000696:	4240      	negs	r0, r0
 8000698:	1836      	adds	r6, r6, r0
 800069a:	0233      	lsls	r3, r6, #8
 800069c:	d557      	bpl.n	800074e <__aeabi_dadd+0x2aa>
 800069e:	4b64      	ldr	r3, [pc, #400]	@ (8000830 <__aeabi_dadd+0x38c>)
 80006a0:	3401      	adds	r4, #1
 80006a2:	429c      	cmp	r4, r3
 80006a4:	d045      	beq.n	8000732 <__aeabi_dadd+0x28e>
 80006a6:	2101      	movs	r1, #1
 80006a8:	4b62      	ldr	r3, [pc, #392]	@ (8000834 <__aeabi_dadd+0x390>)
 80006aa:	087a      	lsrs	r2, r7, #1
 80006ac:	401e      	ands	r6, r3
 80006ae:	4039      	ands	r1, r7
 80006b0:	430a      	orrs	r2, r1
 80006b2:	07f7      	lsls	r7, r6, #31
 80006b4:	4317      	orrs	r7, r2
 80006b6:	0876      	lsrs	r6, r6, #1
 80006b8:	e771      	b.n	800059e <__aeabi_dadd+0xfa>
 80006ba:	001f      	movs	r7, r3
 80006bc:	4317      	orrs	r7, r2
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x21e>
 80006c0:	e0ad      	b.n	800081e <__aeabi_dadd+0x37a>
 80006c2:	1e4f      	subs	r7, r1, #1
 80006c4:	46bc      	mov	ip, r7
 80006c6:	2901      	cmp	r1, #1
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x228>
 80006ca:	e182      	b.n	80009d2 <__aeabi_dadd+0x52e>
 80006cc:	4f58      	ldr	r7, [pc, #352]	@ (8000830 <__aeabi_dadd+0x38c>)
 80006ce:	42b9      	cmp	r1, r7
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x230>
 80006d2:	e190      	b.n	80009f6 <__aeabi_dadd+0x552>
 80006d4:	4661      	mov	r1, ip
 80006d6:	2701      	movs	r7, #1
 80006d8:	2938      	cmp	r1, #56	@ 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x23a>
 80006dc:	e72e      	b.n	800053c <__aeabi_dadd+0x98>
 80006de:	e718      	b.n	8000512 <__aeabi_dadd+0x6e>
 80006e0:	4f55      	ldr	r7, [pc, #340]	@ (8000838 <__aeabi_dadd+0x394>)
 80006e2:	1c61      	adds	r1, r4, #1
 80006e4:	4239      	tst	r1, r7
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x246>
 80006e8:	e0d0      	b.n	800088c <__aeabi_dadd+0x3e8>
 80006ea:	0031      	movs	r1, r6
 80006ec:	4648      	mov	r0, r9
 80006ee:	001f      	movs	r7, r3
 80006f0:	4301      	orrs	r1, r0
 80006f2:	4317      	orrs	r7, r2
 80006f4:	2c00      	cmp	r4, #0
 80006f6:	d000      	beq.n	80006fa <__aeabi_dadd+0x256>
 80006f8:	e13d      	b.n	8000976 <__aeabi_dadd+0x4d2>
 80006fa:	2900      	cmp	r1, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_dadd+0x25c>
 80006fe:	e1bc      	b.n	8000a7a <__aeabi_dadd+0x5d6>
 8000700:	2f00      	cmp	r7, #0
 8000702:	d000      	beq.n	8000706 <__aeabi_dadd+0x262>
 8000704:	e1bf      	b.n	8000a86 <__aeabi_dadd+0x5e2>
 8000706:	464b      	mov	r3, r9
 8000708:	2100      	movs	r1, #0
 800070a:	08d8      	lsrs	r0, r3, #3
 800070c:	0777      	lsls	r7, r6, #29
 800070e:	4307      	orrs	r7, r0
 8000710:	08f0      	lsrs	r0, r6, #3
 8000712:	0306      	lsls	r6, r0, #12
 8000714:	054c      	lsls	r4, r1, #21
 8000716:	0b36      	lsrs	r6, r6, #12
 8000718:	0d64      	lsrs	r4, r4, #21
 800071a:	e00c      	b.n	8000736 <__aeabi_dadd+0x292>
 800071c:	4f44      	ldr	r7, [pc, #272]	@ (8000830 <__aeabi_dadd+0x38c>)
 800071e:	42bc      	cmp	r4, r7
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x280>
 8000722:	e08b      	b.n	800083c <__aeabi_dadd+0x398>
 8000724:	2701      	movs	r7, #1
 8000726:	2938      	cmp	r1, #56	@ 0x38
 8000728:	dcb2      	bgt.n	8000690 <__aeabi_dadd+0x1ec>
 800072a:	2780      	movs	r7, #128	@ 0x80
 800072c:	043f      	lsls	r7, r7, #16
 800072e:	433b      	orrs	r3, r7
 8000730:	e79c      	b.n	800066c <__aeabi_dadd+0x1c8>
 8000732:	2600      	movs	r6, #0
 8000734:	2700      	movs	r7, #0
 8000736:	0524      	lsls	r4, r4, #20
 8000738:	4334      	orrs	r4, r6
 800073a:	07ed      	lsls	r5, r5, #31
 800073c:	432c      	orrs	r4, r5
 800073e:	0038      	movs	r0, r7
 8000740:	0021      	movs	r1, r4
 8000742:	b002      	add	sp, #8
 8000744:	bce0      	pop	{r5, r6, r7}
 8000746:	46ba      	mov	sl, r7
 8000748:	46b1      	mov	r9, r6
 800074a:	46a8      	mov	r8, r5
 800074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074e:	077b      	lsls	r3, r7, #29
 8000750:	d004      	beq.n	800075c <__aeabi_dadd+0x2b8>
 8000752:	230f      	movs	r3, #15
 8000754:	403b      	ands	r3, r7
 8000756:	2b04      	cmp	r3, #4
 8000758:	d000      	beq.n	800075c <__aeabi_dadd+0x2b8>
 800075a:	e728      	b.n	80005ae <__aeabi_dadd+0x10a>
 800075c:	08f8      	lsrs	r0, r7, #3
 800075e:	4b34      	ldr	r3, [pc, #208]	@ (8000830 <__aeabi_dadd+0x38c>)
 8000760:	0777      	lsls	r7, r6, #29
 8000762:	4307      	orrs	r7, r0
 8000764:	08f0      	lsrs	r0, r6, #3
 8000766:	429c      	cmp	r4, r3
 8000768:	d000      	beq.n	800076c <__aeabi_dadd+0x2c8>
 800076a:	e24a      	b.n	8000c02 <__aeabi_dadd+0x75e>
 800076c:	003b      	movs	r3, r7
 800076e:	4303      	orrs	r3, r0
 8000770:	d059      	beq.n	8000826 <__aeabi_dadd+0x382>
 8000772:	2680      	movs	r6, #128	@ 0x80
 8000774:	0336      	lsls	r6, r6, #12
 8000776:	4306      	orrs	r6, r0
 8000778:	0336      	lsls	r6, r6, #12
 800077a:	4c2d      	ldr	r4, [pc, #180]	@ (8000830 <__aeabi_dadd+0x38c>)
 800077c:	0b36      	lsrs	r6, r6, #12
 800077e:	e7da      	b.n	8000736 <__aeabi_dadd+0x292>
 8000780:	2900      	cmp	r1, #0
 8000782:	d061      	beq.n	8000848 <__aeabi_dadd+0x3a4>
 8000784:	4641      	mov	r1, r8
 8000786:	1b09      	subs	r1, r1, r4
 8000788:	2c00      	cmp	r4, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2ea>
 800078c:	e0b9      	b.n	8000902 <__aeabi_dadd+0x45e>
 800078e:	4c28      	ldr	r4, [pc, #160]	@ (8000830 <__aeabi_dadd+0x38c>)
 8000790:	45a0      	cmp	r8, r4
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2f2>
 8000794:	e1a5      	b.n	8000ae2 <__aeabi_dadd+0x63e>
 8000796:	2701      	movs	r7, #1
 8000798:	2938      	cmp	r1, #56	@ 0x38
 800079a:	dc13      	bgt.n	80007c4 <__aeabi_dadd+0x320>
 800079c:	2480      	movs	r4, #128	@ 0x80
 800079e:	0424      	lsls	r4, r4, #16
 80007a0:	4326      	orrs	r6, r4
 80007a2:	291f      	cmp	r1, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x304>
 80007a6:	e1c8      	b.n	8000b3a <__aeabi_dadd+0x696>
 80007a8:	2420      	movs	r4, #32
 80007aa:	0037      	movs	r7, r6
 80007ac:	4648      	mov	r0, r9
 80007ae:	1a64      	subs	r4, r4, r1
 80007b0:	40a7      	lsls	r7, r4
 80007b2:	40c8      	lsrs	r0, r1
 80007b4:	4307      	orrs	r7, r0
 80007b6:	4648      	mov	r0, r9
 80007b8:	40a0      	lsls	r0, r4
 80007ba:	40ce      	lsrs	r6, r1
 80007bc:	1e44      	subs	r4, r0, #1
 80007be:	41a0      	sbcs	r0, r4
 80007c0:	199b      	adds	r3, r3, r6
 80007c2:	4307      	orrs	r7, r0
 80007c4:	18bf      	adds	r7, r7, r2
 80007c6:	4297      	cmp	r7, r2
 80007c8:	4192      	sbcs	r2, r2
 80007ca:	4252      	negs	r2, r2
 80007cc:	4644      	mov	r4, r8
 80007ce:	18d6      	adds	r6, r2, r3
 80007d0:	e763      	b.n	800069a <__aeabi_dadd+0x1f6>
 80007d2:	0038      	movs	r0, r7
 80007d4:	f001 fe06 	bl	80023e4 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33e>
 80007e0:	e6bf      	b.n	8000562 <__aeabi_dadd+0xbe>
 80007e2:	003a      	movs	r2, r7
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429c      	cmp	r4, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x34a>
 80007ec:	e083      	b.n	80008f6 <__aeabi_dadd+0x452>
 80007ee:	1b1b      	subs	r3, r3, r4
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x354>
 80007f6:	e1b4      	b.n	8000b62 <__aeabi_dadd+0x6be>
 80007f8:	0017      	movs	r7, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40df      	lsrs	r7, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x36a>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4317      	orrs	r7, r2
 800080e:	2400      	movs	r4, #0
 8000810:	2f00      	cmp	r7, #0
 8000812:	d00a      	beq.n	800082a <__aeabi_dadd+0x386>
 8000814:	077b      	lsls	r3, r7, #29
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x376>
 8000818:	e6c4      	b.n	80005a4 <__aeabi_dadd+0x100>
 800081a:	0026      	movs	r6, r4
 800081c:	e79e      	b.n	800075c <__aeabi_dadd+0x2b8>
 800081e:	464b      	mov	r3, r9
 8000820:	000c      	movs	r4, r1
 8000822:	08d8      	lsrs	r0, r3, #3
 8000824:	e79b      	b.n	800075e <__aeabi_dadd+0x2ba>
 8000826:	2700      	movs	r7, #0
 8000828:	4c01      	ldr	r4, [pc, #4]	@ (8000830 <__aeabi_dadd+0x38c>)
 800082a:	2600      	movs	r6, #0
 800082c:	e783      	b.n	8000736 <__aeabi_dadd+0x292>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	464b      	mov	r3, r9
 800083e:	0777      	lsls	r7, r6, #29
 8000840:	08d8      	lsrs	r0, r3, #3
 8000842:	4307      	orrs	r7, r0
 8000844:	08f0      	lsrs	r0, r6, #3
 8000846:	e791      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000848:	4fcd      	ldr	r7, [pc, #820]	@ (8000b80 <__aeabi_dadd+0x6dc>)
 800084a:	1c61      	adds	r1, r4, #1
 800084c:	4239      	tst	r1, r7
 800084e:	d16b      	bne.n	8000928 <__aeabi_dadd+0x484>
 8000850:	0031      	movs	r1, r6
 8000852:	4648      	mov	r0, r9
 8000854:	4301      	orrs	r1, r0
 8000856:	2c00      	cmp	r4, #0
 8000858:	d000      	beq.n	800085c <__aeabi_dadd+0x3b8>
 800085a:	e14b      	b.n	8000af4 <__aeabi_dadd+0x650>
 800085c:	001f      	movs	r7, r3
 800085e:	4317      	orrs	r7, r2
 8000860:	2900      	cmp	r1, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x3c2>
 8000864:	e181      	b.n	8000b6a <__aeabi_dadd+0x6c6>
 8000866:	2f00      	cmp	r7, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x3c8>
 800086a:	e74c      	b.n	8000706 <__aeabi_dadd+0x262>
 800086c:	444a      	add	r2, r9
 800086e:	454a      	cmp	r2, r9
 8000870:	4180      	sbcs	r0, r0
 8000872:	18f6      	adds	r6, r6, r3
 8000874:	4240      	negs	r0, r0
 8000876:	1836      	adds	r6, r6, r0
 8000878:	0233      	lsls	r3, r6, #8
 800087a:	d500      	bpl.n	800087e <__aeabi_dadd+0x3da>
 800087c:	e1b0      	b.n	8000be0 <__aeabi_dadd+0x73c>
 800087e:	0017      	movs	r7, r2
 8000880:	4691      	mov	r9, r2
 8000882:	4337      	orrs	r7, r6
 8000884:	d000      	beq.n	8000888 <__aeabi_dadd+0x3e4>
 8000886:	e73e      	b.n	8000706 <__aeabi_dadd+0x262>
 8000888:	2600      	movs	r6, #0
 800088a:	e754      	b.n	8000736 <__aeabi_dadd+0x292>
 800088c:	4649      	mov	r1, r9
 800088e:	1a89      	subs	r1, r1, r2
 8000890:	4688      	mov	r8, r1
 8000892:	45c1      	cmp	r9, r8
 8000894:	41bf      	sbcs	r7, r7
 8000896:	1af1      	subs	r1, r6, r3
 8000898:	427f      	negs	r7, r7
 800089a:	1bc9      	subs	r1, r1, r7
 800089c:	020f      	lsls	r7, r1, #8
 800089e:	d461      	bmi.n	8000964 <__aeabi_dadd+0x4c0>
 80008a0:	4647      	mov	r7, r8
 80008a2:	430f      	orrs	r7, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x404>
 80008a6:	e0bd      	b.n	8000a24 <__aeabi_dadd+0x580>
 80008a8:	000e      	movs	r6, r1
 80008aa:	4647      	mov	r7, r8
 80008ac:	e651      	b.n	8000552 <__aeabi_dadd+0xae>
 80008ae:	4cb5      	ldr	r4, [pc, #724]	@ (8000b84 <__aeabi_dadd+0x6e0>)
 80008b0:	45a0      	cmp	r8, r4
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dadd+0x412>
 80008b4:	e100      	b.n	8000ab8 <__aeabi_dadd+0x614>
 80008b6:	2701      	movs	r7, #1
 80008b8:	2938      	cmp	r1, #56	@ 0x38
 80008ba:	dd00      	ble.n	80008be <__aeabi_dadd+0x41a>
 80008bc:	e6b8      	b.n	8000630 <__aeabi_dadd+0x18c>
 80008be:	2480      	movs	r4, #128	@ 0x80
 80008c0:	0424      	lsls	r4, r4, #16
 80008c2:	4326      	orrs	r6, r4
 80008c4:	e6a3      	b.n	800060e <__aeabi_dadd+0x16a>
 80008c6:	4eb0      	ldr	r6, [pc, #704]	@ (8000b88 <__aeabi_dadd+0x6e4>)
 80008c8:	1ae4      	subs	r4, r4, r3
 80008ca:	4016      	ands	r6, r2
 80008cc:	077b      	lsls	r3, r7, #29
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x42e>
 80008d0:	e73f      	b.n	8000752 <__aeabi_dadd+0x2ae>
 80008d2:	e743      	b.n	800075c <__aeabi_dadd+0x2b8>
 80008d4:	000f      	movs	r7, r1
 80008d6:	0018      	movs	r0, r3
 80008d8:	3f20      	subs	r7, #32
 80008da:	40f8      	lsrs	r0, r7
 80008dc:	4684      	mov	ip, r0
 80008de:	2920      	cmp	r1, #32
 80008e0:	d003      	beq.n	80008ea <__aeabi_dadd+0x446>
 80008e2:	2740      	movs	r7, #64	@ 0x40
 80008e4:	1a79      	subs	r1, r7, r1
 80008e6:	408b      	lsls	r3, r1
 80008e8:	431a      	orrs	r2, r3
 80008ea:	1e53      	subs	r3, r2, #1
 80008ec:	419a      	sbcs	r2, r3
 80008ee:	4663      	mov	r3, ip
 80008f0:	0017      	movs	r7, r2
 80008f2:	431f      	orrs	r7, r3
 80008f4:	e622      	b.n	800053c <__aeabi_dadd+0x98>
 80008f6:	48a4      	ldr	r0, [pc, #656]	@ (8000b88 <__aeabi_dadd+0x6e4>)
 80008f8:	1ae1      	subs	r1, r4, r3
 80008fa:	4010      	ands	r0, r2
 80008fc:	0747      	lsls	r7, r0, #29
 80008fe:	08c0      	lsrs	r0, r0, #3
 8000900:	e707      	b.n	8000712 <__aeabi_dadd+0x26e>
 8000902:	0034      	movs	r4, r6
 8000904:	4648      	mov	r0, r9
 8000906:	4304      	orrs	r4, r0
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x468>
 800090a:	e0fa      	b.n	8000b02 <__aeabi_dadd+0x65e>
 800090c:	1e4c      	subs	r4, r1, #1
 800090e:	2901      	cmp	r1, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x470>
 8000912:	e0d7      	b.n	8000ac4 <__aeabi_dadd+0x620>
 8000914:	4f9b      	ldr	r7, [pc, #620]	@ (8000b84 <__aeabi_dadd+0x6e0>)
 8000916:	42b9      	cmp	r1, r7
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x478>
 800091a:	e0e2      	b.n	8000ae2 <__aeabi_dadd+0x63e>
 800091c:	2701      	movs	r7, #1
 800091e:	2c38      	cmp	r4, #56	@ 0x38
 8000920:	dd00      	ble.n	8000924 <__aeabi_dadd+0x480>
 8000922:	e74f      	b.n	80007c4 <__aeabi_dadd+0x320>
 8000924:	0021      	movs	r1, r4
 8000926:	e73c      	b.n	80007a2 <__aeabi_dadd+0x2fe>
 8000928:	4c96      	ldr	r4, [pc, #600]	@ (8000b84 <__aeabi_dadd+0x6e0>)
 800092a:	42a1      	cmp	r1, r4
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x48c>
 800092e:	e0dd      	b.n	8000aec <__aeabi_dadd+0x648>
 8000930:	444a      	add	r2, r9
 8000932:	454a      	cmp	r2, r9
 8000934:	4180      	sbcs	r0, r0
 8000936:	18f3      	adds	r3, r6, r3
 8000938:	4240      	negs	r0, r0
 800093a:	1818      	adds	r0, r3, r0
 800093c:	07c7      	lsls	r7, r0, #31
 800093e:	0852      	lsrs	r2, r2, #1
 8000940:	4317      	orrs	r7, r2
 8000942:	0846      	lsrs	r6, r0, #1
 8000944:	0752      	lsls	r2, r2, #29
 8000946:	d005      	beq.n	8000954 <__aeabi_dadd+0x4b0>
 8000948:	220f      	movs	r2, #15
 800094a:	000c      	movs	r4, r1
 800094c:	403a      	ands	r2, r7
 800094e:	2a04      	cmp	r2, #4
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x4b0>
 8000952:	e62c      	b.n	80005ae <__aeabi_dadd+0x10a>
 8000954:	0776      	lsls	r6, r6, #29
 8000956:	08ff      	lsrs	r7, r7, #3
 8000958:	4337      	orrs	r7, r6
 800095a:	0900      	lsrs	r0, r0, #4
 800095c:	e6d9      	b.n	8000712 <__aeabi_dadd+0x26e>
 800095e:	2700      	movs	r7, #0
 8000960:	2600      	movs	r6, #0
 8000962:	e6e8      	b.n	8000736 <__aeabi_dadd+0x292>
 8000964:	4649      	mov	r1, r9
 8000966:	1a57      	subs	r7, r2, r1
 8000968:	42ba      	cmp	r2, r7
 800096a:	4192      	sbcs	r2, r2
 800096c:	1b9e      	subs	r6, r3, r6
 800096e:	4252      	negs	r2, r2
 8000970:	4665      	mov	r5, ip
 8000972:	1ab6      	subs	r6, r6, r2
 8000974:	e5ed      	b.n	8000552 <__aeabi_dadd+0xae>
 8000976:	2900      	cmp	r1, #0
 8000978:	d000      	beq.n	800097c <__aeabi_dadd+0x4d8>
 800097a:	e0c6      	b.n	8000b0a <__aeabi_dadd+0x666>
 800097c:	2f00      	cmp	r7, #0
 800097e:	d167      	bne.n	8000a50 <__aeabi_dadd+0x5ac>
 8000980:	2680      	movs	r6, #128	@ 0x80
 8000982:	2500      	movs	r5, #0
 8000984:	4c7f      	ldr	r4, [pc, #508]	@ (8000b84 <__aeabi_dadd+0x6e0>)
 8000986:	0336      	lsls	r6, r6, #12
 8000988:	e6d5      	b.n	8000736 <__aeabi_dadd+0x292>
 800098a:	4665      	mov	r5, ip
 800098c:	000c      	movs	r4, r1
 800098e:	001e      	movs	r6, r3
 8000990:	08d0      	lsrs	r0, r2, #3
 8000992:	e6e4      	b.n	800075e <__aeabi_dadd+0x2ba>
 8000994:	444a      	add	r2, r9
 8000996:	454a      	cmp	r2, r9
 8000998:	4180      	sbcs	r0, r0
 800099a:	18f3      	adds	r3, r6, r3
 800099c:	4240      	negs	r0, r0
 800099e:	1818      	adds	r0, r3, r0
 80009a0:	0011      	movs	r1, r2
 80009a2:	0203      	lsls	r3, r0, #8
 80009a4:	d400      	bmi.n	80009a8 <__aeabi_dadd+0x504>
 80009a6:	e096      	b.n	8000ad6 <__aeabi_dadd+0x632>
 80009a8:	4b77      	ldr	r3, [pc, #476]	@ (8000b88 <__aeabi_dadd+0x6e4>)
 80009aa:	0849      	lsrs	r1, r1, #1
 80009ac:	4018      	ands	r0, r3
 80009ae:	07c3      	lsls	r3, r0, #31
 80009b0:	430b      	orrs	r3, r1
 80009b2:	0844      	lsrs	r4, r0, #1
 80009b4:	0749      	lsls	r1, r1, #29
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x516>
 80009b8:	e129      	b.n	8000c0e <__aeabi_dadd+0x76a>
 80009ba:	220f      	movs	r2, #15
 80009bc:	401a      	ands	r2, r3
 80009be:	2a04      	cmp	r2, #4
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x520>
 80009c2:	e0ea      	b.n	8000b9a <__aeabi_dadd+0x6f6>
 80009c4:	1d1f      	adds	r7, r3, #4
 80009c6:	429f      	cmp	r7, r3
 80009c8:	41b6      	sbcs	r6, r6
 80009ca:	4276      	negs	r6, r6
 80009cc:	1936      	adds	r6, r6, r4
 80009ce:	2402      	movs	r4, #2
 80009d0:	e6c4      	b.n	800075c <__aeabi_dadd+0x2b8>
 80009d2:	4649      	mov	r1, r9
 80009d4:	1a8f      	subs	r7, r1, r2
 80009d6:	45b9      	cmp	r9, r7
 80009d8:	4180      	sbcs	r0, r0
 80009da:	1af6      	subs	r6, r6, r3
 80009dc:	4240      	negs	r0, r0
 80009de:	1a36      	subs	r6, r6, r0
 80009e0:	0233      	lsls	r3, r6, #8
 80009e2:	d406      	bmi.n	80009f2 <__aeabi_dadd+0x54e>
 80009e4:	0773      	lsls	r3, r6, #29
 80009e6:	08ff      	lsrs	r7, r7, #3
 80009e8:	2101      	movs	r1, #1
 80009ea:	431f      	orrs	r7, r3
 80009ec:	08f0      	lsrs	r0, r6, #3
 80009ee:	e690      	b.n	8000712 <__aeabi_dadd+0x26e>
 80009f0:	4665      	mov	r5, ip
 80009f2:	2401      	movs	r4, #1
 80009f4:	e5ab      	b.n	800054e <__aeabi_dadd+0xaa>
 80009f6:	464b      	mov	r3, r9
 80009f8:	0777      	lsls	r7, r6, #29
 80009fa:	08d8      	lsrs	r0, r3, #3
 80009fc:	4307      	orrs	r7, r0
 80009fe:	08f0      	lsrs	r0, r6, #3
 8000a00:	e6b4      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000a02:	000f      	movs	r7, r1
 8000a04:	0018      	movs	r0, r3
 8000a06:	3f20      	subs	r7, #32
 8000a08:	40f8      	lsrs	r0, r7
 8000a0a:	4684      	mov	ip, r0
 8000a0c:	2920      	cmp	r1, #32
 8000a0e:	d003      	beq.n	8000a18 <__aeabi_dadd+0x574>
 8000a10:	2740      	movs	r7, #64	@ 0x40
 8000a12:	1a79      	subs	r1, r7, r1
 8000a14:	408b      	lsls	r3, r1
 8000a16:	431a      	orrs	r2, r3
 8000a18:	1e53      	subs	r3, r2, #1
 8000a1a:	419a      	sbcs	r2, r3
 8000a1c:	4663      	mov	r3, ip
 8000a1e:	0017      	movs	r7, r2
 8000a20:	431f      	orrs	r7, r3
 8000a22:	e635      	b.n	8000690 <__aeabi_dadd+0x1ec>
 8000a24:	2500      	movs	r5, #0
 8000a26:	2400      	movs	r4, #0
 8000a28:	2600      	movs	r6, #0
 8000a2a:	e684      	b.n	8000736 <__aeabi_dadd+0x292>
 8000a2c:	000c      	movs	r4, r1
 8000a2e:	0035      	movs	r5, r6
 8000a30:	3c20      	subs	r4, #32
 8000a32:	40e5      	lsrs	r5, r4
 8000a34:	2920      	cmp	r1, #32
 8000a36:	d005      	beq.n	8000a44 <__aeabi_dadd+0x5a0>
 8000a38:	2440      	movs	r4, #64	@ 0x40
 8000a3a:	1a61      	subs	r1, r4, r1
 8000a3c:	408e      	lsls	r6, r1
 8000a3e:	4649      	mov	r1, r9
 8000a40:	4331      	orrs	r1, r6
 8000a42:	4689      	mov	r9, r1
 8000a44:	4648      	mov	r0, r9
 8000a46:	1e41      	subs	r1, r0, #1
 8000a48:	4188      	sbcs	r0, r1
 8000a4a:	0007      	movs	r7, r0
 8000a4c:	432f      	orrs	r7, r5
 8000a4e:	e5ef      	b.n	8000630 <__aeabi_dadd+0x18c>
 8000a50:	08d2      	lsrs	r2, r2, #3
 8000a52:	075f      	lsls	r7, r3, #29
 8000a54:	4665      	mov	r5, ip
 8000a56:	4317      	orrs	r7, r2
 8000a58:	08d8      	lsrs	r0, r3, #3
 8000a5a:	e687      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000a5c:	1a17      	subs	r7, r2, r0
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1b9e      	subs	r6, r3, r6
 8000a64:	4252      	negs	r2, r2
 8000a66:	1ab6      	subs	r6, r6, r2
 8000a68:	0233      	lsls	r3, r6, #8
 8000a6a:	d4c1      	bmi.n	80009f0 <__aeabi_dadd+0x54c>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	08ff      	lsrs	r7, r7, #3
 8000a70:	4665      	mov	r5, ip
 8000a72:	2101      	movs	r1, #1
 8000a74:	431f      	orrs	r7, r3
 8000a76:	08f0      	lsrs	r0, r6, #3
 8000a78:	e64b      	b.n	8000712 <__aeabi_dadd+0x26e>
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d07b      	beq.n	8000b76 <__aeabi_dadd+0x6d2>
 8000a7e:	4665      	mov	r5, ip
 8000a80:	001e      	movs	r6, r3
 8000a82:	4691      	mov	r9, r2
 8000a84:	e63f      	b.n	8000706 <__aeabi_dadd+0x262>
 8000a86:	1a81      	subs	r1, r0, r2
 8000a88:	4688      	mov	r8, r1
 8000a8a:	45c1      	cmp	r9, r8
 8000a8c:	41a4      	sbcs	r4, r4
 8000a8e:	1af1      	subs	r1, r6, r3
 8000a90:	4264      	negs	r4, r4
 8000a92:	1b09      	subs	r1, r1, r4
 8000a94:	2480      	movs	r4, #128	@ 0x80
 8000a96:	0424      	lsls	r4, r4, #16
 8000a98:	4221      	tst	r1, r4
 8000a9a:	d077      	beq.n	8000b8c <__aeabi_dadd+0x6e8>
 8000a9c:	1a10      	subs	r0, r2, r0
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	4192      	sbcs	r2, r2
 8000aa2:	0007      	movs	r7, r0
 8000aa4:	1b9e      	subs	r6, r3, r6
 8000aa6:	4252      	negs	r2, r2
 8000aa8:	1ab6      	subs	r6, r6, r2
 8000aaa:	4337      	orrs	r7, r6
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dadd+0x60c>
 8000aae:	e0a0      	b.n	8000bf2 <__aeabi_dadd+0x74e>
 8000ab0:	4665      	mov	r5, ip
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	e63e      	b.n	8000736 <__aeabi_dadd+0x292>
 8000ab8:	075f      	lsls	r7, r3, #29
 8000aba:	08d2      	lsrs	r2, r2, #3
 8000abc:	4665      	mov	r5, ip
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	08d8      	lsrs	r0, r3, #3
 8000ac2:	e653      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000ac4:	1881      	adds	r1, r0, r2
 8000ac6:	4291      	cmp	r1, r2
 8000ac8:	4192      	sbcs	r2, r2
 8000aca:	18f0      	adds	r0, r6, r3
 8000acc:	4252      	negs	r2, r2
 8000ace:	1880      	adds	r0, r0, r2
 8000ad0:	0203      	lsls	r3, r0, #8
 8000ad2:	d500      	bpl.n	8000ad6 <__aeabi_dadd+0x632>
 8000ad4:	e768      	b.n	80009a8 <__aeabi_dadd+0x504>
 8000ad6:	0747      	lsls	r7, r0, #29
 8000ad8:	08c9      	lsrs	r1, r1, #3
 8000ada:	430f      	orrs	r7, r1
 8000adc:	08c0      	lsrs	r0, r0, #3
 8000ade:	2101      	movs	r1, #1
 8000ae0:	e617      	b.n	8000712 <__aeabi_dadd+0x26e>
 8000ae2:	08d2      	lsrs	r2, r2, #3
 8000ae4:	075f      	lsls	r7, r3, #29
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	08d8      	lsrs	r0, r3, #3
 8000aea:	e63f      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000aec:	000c      	movs	r4, r1
 8000aee:	2600      	movs	r6, #0
 8000af0:	2700      	movs	r7, #0
 8000af2:	e620      	b.n	8000736 <__aeabi_dadd+0x292>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d156      	bne.n	8000ba6 <__aeabi_dadd+0x702>
 8000af8:	075f      	lsls	r7, r3, #29
 8000afa:	08d2      	lsrs	r2, r2, #3
 8000afc:	4317      	orrs	r7, r2
 8000afe:	08d8      	lsrs	r0, r3, #3
 8000b00:	e634      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000b02:	000c      	movs	r4, r1
 8000b04:	001e      	movs	r6, r3
 8000b06:	08d0      	lsrs	r0, r2, #3
 8000b08:	e629      	b.n	800075e <__aeabi_dadd+0x2ba>
 8000b0a:	08c1      	lsrs	r1, r0, #3
 8000b0c:	0770      	lsls	r0, r6, #29
 8000b0e:	4301      	orrs	r1, r0
 8000b10:	08f0      	lsrs	r0, r6, #3
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d062      	beq.n	8000bdc <__aeabi_dadd+0x738>
 8000b16:	2480      	movs	r4, #128	@ 0x80
 8000b18:	0324      	lsls	r4, r4, #12
 8000b1a:	4220      	tst	r0, r4
 8000b1c:	d007      	beq.n	8000b2e <__aeabi_dadd+0x68a>
 8000b1e:	08de      	lsrs	r6, r3, #3
 8000b20:	4226      	tst	r6, r4
 8000b22:	d104      	bne.n	8000b2e <__aeabi_dadd+0x68a>
 8000b24:	4665      	mov	r5, ip
 8000b26:	0030      	movs	r0, r6
 8000b28:	08d1      	lsrs	r1, r2, #3
 8000b2a:	075b      	lsls	r3, r3, #29
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	0f4f      	lsrs	r7, r1, #29
 8000b30:	00c9      	lsls	r1, r1, #3
 8000b32:	08c9      	lsrs	r1, r1, #3
 8000b34:	077f      	lsls	r7, r7, #29
 8000b36:	430f      	orrs	r7, r1
 8000b38:	e618      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000b3a:	000c      	movs	r4, r1
 8000b3c:	0030      	movs	r0, r6
 8000b3e:	3c20      	subs	r4, #32
 8000b40:	40e0      	lsrs	r0, r4
 8000b42:	4684      	mov	ip, r0
 8000b44:	2920      	cmp	r1, #32
 8000b46:	d005      	beq.n	8000b54 <__aeabi_dadd+0x6b0>
 8000b48:	2440      	movs	r4, #64	@ 0x40
 8000b4a:	1a61      	subs	r1, r4, r1
 8000b4c:	408e      	lsls	r6, r1
 8000b4e:	4649      	mov	r1, r9
 8000b50:	4331      	orrs	r1, r6
 8000b52:	4689      	mov	r9, r1
 8000b54:	4648      	mov	r0, r9
 8000b56:	1e41      	subs	r1, r0, #1
 8000b58:	4188      	sbcs	r0, r1
 8000b5a:	4661      	mov	r1, ip
 8000b5c:	0007      	movs	r7, r0
 8000b5e:	430f      	orrs	r7, r1
 8000b60:	e630      	b.n	80007c4 <__aeabi_dadd+0x320>
 8000b62:	2120      	movs	r1, #32
 8000b64:	2700      	movs	r7, #0
 8000b66:	1a09      	subs	r1, r1, r0
 8000b68:	e50e      	b.n	8000588 <__aeabi_dadd+0xe4>
 8000b6a:	001e      	movs	r6, r3
 8000b6c:	2f00      	cmp	r7, #0
 8000b6e:	d000      	beq.n	8000b72 <__aeabi_dadd+0x6ce>
 8000b70:	e522      	b.n	80005b8 <__aeabi_dadd+0x114>
 8000b72:	2400      	movs	r4, #0
 8000b74:	e758      	b.n	8000a28 <__aeabi_dadd+0x584>
 8000b76:	2500      	movs	r5, #0
 8000b78:	2400      	movs	r4, #0
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	e5db      	b.n	8000736 <__aeabi_dadd+0x292>
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	000007fe 	.word	0x000007fe
 8000b84:	000007ff 	.word	0x000007ff
 8000b88:	ff7fffff 	.word	0xff7fffff
 8000b8c:	4647      	mov	r7, r8
 8000b8e:	430f      	orrs	r7, r1
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x6f0>
 8000b92:	e747      	b.n	8000a24 <__aeabi_dadd+0x580>
 8000b94:	000e      	movs	r6, r1
 8000b96:	46c1      	mov	r9, r8
 8000b98:	e5b5      	b.n	8000706 <__aeabi_dadd+0x262>
 8000b9a:	08df      	lsrs	r7, r3, #3
 8000b9c:	0764      	lsls	r4, r4, #29
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4327      	orrs	r7, r4
 8000ba2:	0900      	lsrs	r0, r0, #4
 8000ba4:	e5b5      	b.n	8000712 <__aeabi_dadd+0x26e>
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	08c0      	lsrs	r0, r0, #3
 8000baa:	0777      	lsls	r7, r6, #29
 8000bac:	4307      	orrs	r7, r0
 8000bae:	4311      	orrs	r1, r2
 8000bb0:	08f0      	lsrs	r0, r6, #3
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0x714>
 8000bb6:	e5d9      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	0309      	lsls	r1, r1, #12
 8000bbc:	4208      	tst	r0, r1
 8000bbe:	d007      	beq.n	8000bd0 <__aeabi_dadd+0x72c>
 8000bc0:	08dc      	lsrs	r4, r3, #3
 8000bc2:	420c      	tst	r4, r1
 8000bc4:	d104      	bne.n	8000bd0 <__aeabi_dadd+0x72c>
 8000bc6:	08d2      	lsrs	r2, r2, #3
 8000bc8:	075b      	lsls	r3, r3, #29
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	0017      	movs	r7, r2
 8000bce:	0020      	movs	r0, r4
 8000bd0:	0f7b      	lsrs	r3, r7, #29
 8000bd2:	00ff      	lsls	r7, r7, #3
 8000bd4:	08ff      	lsrs	r7, r7, #3
 8000bd6:	075b      	lsls	r3, r3, #29
 8000bd8:	431f      	orrs	r7, r3
 8000bda:	e5c7      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000bdc:	000f      	movs	r7, r1
 8000bde:	e5c5      	b.n	800076c <__aeabi_dadd+0x2c8>
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <__aeabi_dadd+0x788>)
 8000be2:	08d2      	lsrs	r2, r2, #3
 8000be4:	4033      	ands	r3, r6
 8000be6:	075f      	lsls	r7, r3, #29
 8000be8:	025b      	lsls	r3, r3, #9
 8000bea:	2401      	movs	r4, #1
 8000bec:	4317      	orrs	r7, r2
 8000bee:	0b1e      	lsrs	r6, r3, #12
 8000bf0:	e5a1      	b.n	8000736 <__aeabi_dadd+0x292>
 8000bf2:	4226      	tst	r6, r4
 8000bf4:	d012      	beq.n	8000c1c <__aeabi_dadd+0x778>
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <__aeabi_dadd+0x788>)
 8000bf8:	4665      	mov	r5, ip
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	2401      	movs	r4, #1
 8000bfe:	401e      	ands	r6, r3
 8000c00:	e4e6      	b.n	80005d0 <__aeabi_dadd+0x12c>
 8000c02:	0021      	movs	r1, r4
 8000c04:	e585      	b.n	8000712 <__aeabi_dadd+0x26e>
 8000c06:	0017      	movs	r7, r2
 8000c08:	e5a8      	b.n	800075c <__aeabi_dadd+0x2b8>
 8000c0a:	003a      	movs	r2, r7
 8000c0c:	e4d4      	b.n	80005b8 <__aeabi_dadd+0x114>
 8000c0e:	08db      	lsrs	r3, r3, #3
 8000c10:	0764      	lsls	r4, r4, #29
 8000c12:	431c      	orrs	r4, r3
 8000c14:	0027      	movs	r7, r4
 8000c16:	2102      	movs	r1, #2
 8000c18:	0900      	lsrs	r0, r0, #4
 8000c1a:	e57a      	b.n	8000712 <__aeabi_dadd+0x26e>
 8000c1c:	08c0      	lsrs	r0, r0, #3
 8000c1e:	0777      	lsls	r7, r6, #29
 8000c20:	4307      	orrs	r7, r0
 8000c22:	4665      	mov	r5, ip
 8000c24:	2100      	movs	r1, #0
 8000c26:	08f0      	lsrs	r0, r6, #3
 8000c28:	e573      	b.n	8000712 <__aeabi_dadd+0x26e>
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	ff7fffff 	.word	0xff7fffff

08000c30 <__aeabi_ddiv>:
 8000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c32:	46de      	mov	lr, fp
 8000c34:	4645      	mov	r5, r8
 8000c36:	4657      	mov	r7, sl
 8000c38:	464e      	mov	r6, r9
 8000c3a:	b5e0      	push	{r5, r6, r7, lr}
 8000c3c:	b087      	sub	sp, #28
 8000c3e:	9200      	str	r2, [sp, #0]
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	030b      	lsls	r3, r1, #12
 8000c44:	0b1b      	lsrs	r3, r3, #12
 8000c46:	469b      	mov	fp, r3
 8000c48:	0fca      	lsrs	r2, r1, #31
 8000c4a:	004b      	lsls	r3, r1, #1
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	4680      	mov	r8, r0
 8000c50:	0d5b      	lsrs	r3, r3, #21
 8000c52:	9202      	str	r2, [sp, #8]
 8000c54:	d100      	bne.n	8000c58 <__aeabi_ddiv+0x28>
 8000c56:	e098      	b.n	8000d8a <__aeabi_ddiv+0x15a>
 8000c58:	4a7c      	ldr	r2, [pc, #496]	@ (8000e4c <__aeabi_ddiv+0x21c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d037      	beq.n	8000cce <__aeabi_ddiv+0x9e>
 8000c5e:	4659      	mov	r1, fp
 8000c60:	0f42      	lsrs	r2, r0, #29
 8000c62:	00c9      	lsls	r1, r1, #3
 8000c64:	430a      	orrs	r2, r1
 8000c66:	2180      	movs	r1, #128	@ 0x80
 8000c68:	0409      	lsls	r1, r1, #16
 8000c6a:	4311      	orrs	r1, r2
 8000c6c:	00c2      	lsls	r2, r0, #3
 8000c6e:	4690      	mov	r8, r2
 8000c70:	4a77      	ldr	r2, [pc, #476]	@ (8000e50 <__aeabi_ddiv+0x220>)
 8000c72:	4689      	mov	r9, r1
 8000c74:	4692      	mov	sl, r2
 8000c76:	449a      	add	sl, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	9303      	str	r3, [sp, #12]
 8000c7e:	9e00      	ldr	r6, [sp, #0]
 8000c80:	9f01      	ldr	r7, [sp, #4]
 8000c82:	033b      	lsls	r3, r7, #12
 8000c84:	0b1b      	lsrs	r3, r3, #12
 8000c86:	469b      	mov	fp, r3
 8000c88:	007b      	lsls	r3, r7, #1
 8000c8a:	0030      	movs	r0, r6
 8000c8c:	0d5b      	lsrs	r3, r3, #21
 8000c8e:	0ffd      	lsrs	r5, r7, #31
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d059      	beq.n	8000d48 <__aeabi_ddiv+0x118>
 8000c94:	4a6d      	ldr	r2, [pc, #436]	@ (8000e4c <__aeabi_ddiv+0x21c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d048      	beq.n	8000d2c <__aeabi_ddiv+0xfc>
 8000c9a:	4659      	mov	r1, fp
 8000c9c:	0f72      	lsrs	r2, r6, #29
 8000c9e:	00c9      	lsls	r1, r1, #3
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	0409      	lsls	r1, r1, #16
 8000ca6:	4311      	orrs	r1, r2
 8000ca8:	468b      	mov	fp, r1
 8000caa:	4969      	ldr	r1, [pc, #420]	@ (8000e50 <__aeabi_ddiv+0x220>)
 8000cac:	00f2      	lsls	r2, r6, #3
 8000cae:	468c      	mov	ip, r1
 8000cb0:	4651      	mov	r1, sl
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1acb      	subs	r3, r1, r3
 8000cb6:	469a      	mov	sl, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	9e02      	ldr	r6, [sp, #8]
 8000cbc:	406e      	eors	r6, r5
 8000cbe:	b2f6      	uxtb	r6, r6
 8000cc0:	2c0f      	cmp	r4, #15
 8000cc2:	d900      	bls.n	8000cc6 <__aeabi_ddiv+0x96>
 8000cc4:	e0ce      	b.n	8000e64 <__aeabi_ddiv+0x234>
 8000cc6:	4b63      	ldr	r3, [pc, #396]	@ (8000e54 <__aeabi_ddiv+0x224>)
 8000cc8:	00a4      	lsls	r4, r4, #2
 8000cca:	591b      	ldr	r3, [r3, r4]
 8000ccc:	469f      	mov	pc, r3
 8000cce:	465a      	mov	r2, fp
 8000cd0:	4302      	orrs	r2, r0
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_ddiv+0xa8>
 8000cd6:	e090      	b.n	8000dfa <__aeabi_ddiv+0x1ca>
 8000cd8:	469a      	mov	sl, r3
 8000cda:	2302      	movs	r3, #2
 8000cdc:	4690      	mov	r8, r2
 8000cde:	2408      	movs	r4, #8
 8000ce0:	9303      	str	r3, [sp, #12]
 8000ce2:	e7cc      	b.n	8000c7e <__aeabi_ddiv+0x4e>
 8000ce4:	46cb      	mov	fp, r9
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	9d02      	ldr	r5, [sp, #8]
 8000cea:	9903      	ldr	r1, [sp, #12]
 8000cec:	2902      	cmp	r1, #2
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0xc2>
 8000cf0:	e1de      	b.n	80010b0 <__aeabi_ddiv+0x480>
 8000cf2:	2903      	cmp	r1, #3
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0xc8>
 8000cf6:	e08d      	b.n	8000e14 <__aeabi_ddiv+0x1e4>
 8000cf8:	2901      	cmp	r1, #1
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_ddiv+0xce>
 8000cfc:	e179      	b.n	8000ff2 <__aeabi_ddiv+0x3c2>
 8000cfe:	002e      	movs	r6, r5
 8000d00:	2200      	movs	r2, #0
 8000d02:	2300      	movs	r3, #0
 8000d04:	2400      	movs	r4, #0
 8000d06:	4690      	mov	r8, r2
 8000d08:	051b      	lsls	r3, r3, #20
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	07f6      	lsls	r6, r6, #31
 8000d0e:	4333      	orrs	r3, r6
 8000d10:	4640      	mov	r0, r8
 8000d12:	0019      	movs	r1, r3
 8000d14:	b007      	add	sp, #28
 8000d16:	bcf0      	pop	{r4, r5, r6, r7}
 8000d18:	46bb      	mov	fp, r7
 8000d1a:	46b2      	mov	sl, r6
 8000d1c:	46a9      	mov	r9, r5
 8000d1e:	46a0      	mov	r8, r4
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	2200      	movs	r2, #0
 8000d24:	2400      	movs	r4, #0
 8000d26:	4690      	mov	r8, r2
 8000d28:	4b48      	ldr	r3, [pc, #288]	@ (8000e4c <__aeabi_ddiv+0x21c>)
 8000d2a:	e7ed      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 8000d2c:	465a      	mov	r2, fp
 8000d2e:	9b00      	ldr	r3, [sp, #0]
 8000d30:	431a      	orrs	r2, r3
 8000d32:	4b49      	ldr	r3, [pc, #292]	@ (8000e58 <__aeabi_ddiv+0x228>)
 8000d34:	469c      	mov	ip, r3
 8000d36:	44e2      	add	sl, ip
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d159      	bne.n	8000df0 <__aeabi_ddiv+0x1c0>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	2102      	movs	r1, #2
 8000d44:	469b      	mov	fp, r3
 8000d46:	e7b8      	b.n	8000cba <__aeabi_ddiv+0x8a>
 8000d48:	465a      	mov	r2, fp
 8000d4a:	9b00      	ldr	r3, [sp, #0]
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	d049      	beq.n	8000de4 <__aeabi_ddiv+0x1b4>
 8000d50:	465b      	mov	r3, fp
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x128>
 8000d56:	e19c      	b.n	8001092 <__aeabi_ddiv+0x462>
 8000d58:	4658      	mov	r0, fp
 8000d5a:	f001 fb43 	bl	80023e4 <__clzsi2>
 8000d5e:	0002      	movs	r2, r0
 8000d60:	0003      	movs	r3, r0
 8000d62:	3a0b      	subs	r2, #11
 8000d64:	271d      	movs	r7, #29
 8000d66:	9e00      	ldr	r6, [sp, #0]
 8000d68:	1aba      	subs	r2, r7, r2
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	4658      	mov	r0, fp
 8000d6e:	40d6      	lsrs	r6, r2
 8000d70:	3908      	subs	r1, #8
 8000d72:	4088      	lsls	r0, r1
 8000d74:	0032      	movs	r2, r6
 8000d76:	4302      	orrs	r2, r0
 8000d78:	4693      	mov	fp, r2
 8000d7a:	9a00      	ldr	r2, [sp, #0]
 8000d7c:	408a      	lsls	r2, r1
 8000d7e:	4937      	ldr	r1, [pc, #220]	@ (8000e5c <__aeabi_ddiv+0x22c>)
 8000d80:	4453      	add	r3, sl
 8000d82:	468a      	mov	sl, r1
 8000d84:	2100      	movs	r1, #0
 8000d86:	449a      	add	sl, r3
 8000d88:	e797      	b.n	8000cba <__aeabi_ddiv+0x8a>
 8000d8a:	465b      	mov	r3, fp
 8000d8c:	4303      	orrs	r3, r0
 8000d8e:	4699      	mov	r9, r3
 8000d90:	d021      	beq.n	8000dd6 <__aeabi_ddiv+0x1a6>
 8000d92:	465b      	mov	r3, fp
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_ddiv+0x16a>
 8000d98:	e169      	b.n	800106e <__aeabi_ddiv+0x43e>
 8000d9a:	4658      	mov	r0, fp
 8000d9c:	f001 fb22 	bl	80023e4 <__clzsi2>
 8000da0:	230b      	movs	r3, #11
 8000da2:	425b      	negs	r3, r3
 8000da4:	469c      	mov	ip, r3
 8000da6:	0002      	movs	r2, r0
 8000da8:	4484      	add	ip, r0
 8000daa:	4666      	mov	r6, ip
 8000dac:	231d      	movs	r3, #29
 8000dae:	1b9b      	subs	r3, r3, r6
 8000db0:	0026      	movs	r6, r4
 8000db2:	0011      	movs	r1, r2
 8000db4:	4658      	mov	r0, fp
 8000db6:	40de      	lsrs	r6, r3
 8000db8:	3908      	subs	r1, #8
 8000dba:	4088      	lsls	r0, r1
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	4303      	orrs	r3, r0
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	0023      	movs	r3, r4
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	4698      	mov	r8, r3
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <__aeabi_ddiv+0x230>)
 8000dca:	2400      	movs	r4, #0
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	469a      	mov	sl, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9303      	str	r3, [sp, #12]
 8000dd4:	e753      	b.n	8000c7e <__aeabi_ddiv+0x4e>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4698      	mov	r8, r3
 8000dda:	469a      	mov	sl, r3
 8000ddc:	3301      	adds	r3, #1
 8000dde:	2404      	movs	r4, #4
 8000de0:	9303      	str	r3, [sp, #12]
 8000de2:	e74c      	b.n	8000c7e <__aeabi_ddiv+0x4e>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431c      	orrs	r4, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	469b      	mov	fp, r3
 8000dee:	e764      	b.n	8000cba <__aeabi_ddiv+0x8a>
 8000df0:	2303      	movs	r3, #3
 8000df2:	0032      	movs	r2, r6
 8000df4:	2103      	movs	r1, #3
 8000df6:	431c      	orrs	r4, r3
 8000df8:	e75f      	b.n	8000cba <__aeabi_ddiv+0x8a>
 8000dfa:	469a      	mov	sl, r3
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	46d9      	mov	r9, fp
 8000e00:	240c      	movs	r4, #12
 8000e02:	9303      	str	r3, [sp, #12]
 8000e04:	e73b      	b.n	8000c7e <__aeabi_ddiv+0x4e>
 8000e06:	2300      	movs	r3, #0
 8000e08:	2480      	movs	r4, #128	@ 0x80
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <__aeabi_ddiv+0x21c>)
 8000e10:	0324      	lsls	r4, r4, #12
 8000e12:	e779      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 8000e14:	2480      	movs	r4, #128	@ 0x80
 8000e16:	465b      	mov	r3, fp
 8000e18:	0324      	lsls	r4, r4, #12
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	002e      	movs	r6, r5
 8000e20:	4690      	mov	r8, r2
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <__aeabi_ddiv+0x21c>)
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	e76f      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 8000e28:	2480      	movs	r4, #128	@ 0x80
 8000e2a:	464b      	mov	r3, r9
 8000e2c:	0324      	lsls	r4, r4, #12
 8000e2e:	4223      	tst	r3, r4
 8000e30:	d002      	beq.n	8000e38 <__aeabi_ddiv+0x208>
 8000e32:	465b      	mov	r3, fp
 8000e34:	4223      	tst	r3, r4
 8000e36:	d0f0      	beq.n	8000e1a <__aeabi_ddiv+0x1ea>
 8000e38:	2480      	movs	r4, #128	@ 0x80
 8000e3a:	464b      	mov	r3, r9
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	9e02      	ldr	r6, [sp, #8]
 8000e44:	4b01      	ldr	r3, [pc, #4]	@ (8000e4c <__aeabi_ddiv+0x21c>)
 8000e46:	0b24      	lsrs	r4, r4, #12
 8000e48:	e75e      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	000007ff 	.word	0x000007ff
 8000e50:	fffffc01 	.word	0xfffffc01
 8000e54:	08007560 	.word	0x08007560
 8000e58:	fffff801 	.word	0xfffff801
 8000e5c:	000003f3 	.word	0x000003f3
 8000e60:	fffffc0d 	.word	0xfffffc0d
 8000e64:	45cb      	cmp	fp, r9
 8000e66:	d200      	bcs.n	8000e6a <__aeabi_ddiv+0x23a>
 8000e68:	e0f8      	b.n	800105c <__aeabi_ddiv+0x42c>
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0x23e>
 8000e6c:	e0f3      	b.n	8001056 <__aeabi_ddiv+0x426>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	469c      	mov	ip, r3
 8000e74:	4644      	mov	r4, r8
 8000e76:	4648      	mov	r0, r9
 8000e78:	2500      	movs	r5, #0
 8000e7a:	44e2      	add	sl, ip
 8000e7c:	465b      	mov	r3, fp
 8000e7e:	0e17      	lsrs	r7, r2, #24
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c19      	lsrs	r1, r3, #16
 8000e86:	043b      	lsls	r3, r7, #16
 8000e88:	0212      	lsls	r2, r2, #8
 8000e8a:	9700      	str	r7, [sp, #0]
 8000e8c:	0c1f      	lsrs	r7, r3, #16
 8000e8e:	4691      	mov	r9, r2
 8000e90:	9102      	str	r1, [sp, #8]
 8000e92:	9703      	str	r7, [sp, #12]
 8000e94:	f7ff f9d8 	bl	8000248 <__aeabi_uidivmod>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	437a      	muls	r2, r7
 8000e9c:	040b      	lsls	r3, r1, #16
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	4680      	mov	r8, r0
 8000ea2:	4319      	orrs	r1, r3
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	d909      	bls.n	8000ebc <__aeabi_ddiv+0x28c>
 8000ea8:	9f00      	ldr	r7, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	46bc      	mov	ip, r7
 8000eae:	425b      	negs	r3, r3
 8000eb0:	4461      	add	r1, ip
 8000eb2:	469c      	mov	ip, r3
 8000eb4:	44e0      	add	r8, ip
 8000eb6:	428f      	cmp	r7, r1
 8000eb8:	d800      	bhi.n	8000ebc <__aeabi_ddiv+0x28c>
 8000eba:	e15c      	b.n	8001176 <__aeabi_ddiv+0x546>
 8000ebc:	1a88      	subs	r0, r1, r2
 8000ebe:	9902      	ldr	r1, [sp, #8]
 8000ec0:	f7ff f9c2 	bl	8000248 <__aeabi_uidivmod>
 8000ec4:	9a03      	ldr	r2, [sp, #12]
 8000ec6:	0424      	lsls	r4, r4, #16
 8000ec8:	4342      	muls	r2, r0
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	0c24      	lsrs	r4, r4, #16
 8000ece:	0003      	movs	r3, r0
 8000ed0:	430c      	orrs	r4, r1
 8000ed2:	42a2      	cmp	r2, r4
 8000ed4:	d906      	bls.n	8000ee4 <__aeabi_ddiv+0x2b4>
 8000ed6:	9900      	ldr	r1, [sp, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	468c      	mov	ip, r1
 8000edc:	4464      	add	r4, ip
 8000ede:	42a1      	cmp	r1, r4
 8000ee0:	d800      	bhi.n	8000ee4 <__aeabi_ddiv+0x2b4>
 8000ee2:	e142      	b.n	800116a <__aeabi_ddiv+0x53a>
 8000ee4:	1aa0      	subs	r0, r4, r2
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	0412      	lsls	r2, r2, #16
 8000eea:	431a      	orrs	r2, r3
 8000eec:	4693      	mov	fp, r2
 8000eee:	464b      	mov	r3, r9
 8000ef0:	4659      	mov	r1, fp
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	001f      	movs	r7, r3
 8000ef6:	9304      	str	r3, [sp, #16]
 8000ef8:	040b      	lsls	r3, r1, #16
 8000efa:	4649      	mov	r1, r9
 8000efc:	0409      	lsls	r1, r1, #16
 8000efe:	0c09      	lsrs	r1, r1, #16
 8000f00:	000c      	movs	r4, r1
 8000f02:	0c1b      	lsrs	r3, r3, #16
 8000f04:	435c      	muls	r4, r3
 8000f06:	0c12      	lsrs	r2, r2, #16
 8000f08:	437b      	muls	r3, r7
 8000f0a:	4688      	mov	r8, r1
 8000f0c:	4351      	muls	r1, r2
 8000f0e:	437a      	muls	r2, r7
 8000f10:	0c27      	lsrs	r7, r4, #16
 8000f12:	46bc      	mov	ip, r7
 8000f14:	185b      	adds	r3, r3, r1
 8000f16:	4463      	add	r3, ip
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d903      	bls.n	8000f24 <__aeabi_ddiv+0x2f4>
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	0249      	lsls	r1, r1, #9
 8000f20:	468c      	mov	ip, r1
 8000f22:	4462      	add	r2, ip
 8000f24:	0c19      	lsrs	r1, r3, #16
 8000f26:	0424      	lsls	r4, r4, #16
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	0c24      	lsrs	r4, r4, #16
 8000f2c:	188a      	adds	r2, r1, r2
 8000f2e:	191c      	adds	r4, r3, r4
 8000f30:	4290      	cmp	r0, r2
 8000f32:	d302      	bcc.n	8000f3a <__aeabi_ddiv+0x30a>
 8000f34:	d116      	bne.n	8000f64 <__aeabi_ddiv+0x334>
 8000f36:	42a5      	cmp	r5, r4
 8000f38:	d214      	bcs.n	8000f64 <__aeabi_ddiv+0x334>
 8000f3a:	465b      	mov	r3, fp
 8000f3c:	9f00      	ldr	r7, [sp, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	444d      	add	r5, r9
 8000f42:	9305      	str	r3, [sp, #20]
 8000f44:	454d      	cmp	r5, r9
 8000f46:	419b      	sbcs	r3, r3
 8000f48:	46bc      	mov	ip, r7
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	4463      	add	r3, ip
 8000f4e:	18c0      	adds	r0, r0, r3
 8000f50:	4287      	cmp	r7, r0
 8000f52:	d300      	bcc.n	8000f56 <__aeabi_ddiv+0x326>
 8000f54:	e102      	b.n	800115c <__aeabi_ddiv+0x52c>
 8000f56:	4282      	cmp	r2, r0
 8000f58:	d900      	bls.n	8000f5c <__aeabi_ddiv+0x32c>
 8000f5a:	e129      	b.n	80011b0 <__aeabi_ddiv+0x580>
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x330>
 8000f5e:	e124      	b.n	80011aa <__aeabi_ddiv+0x57a>
 8000f60:	9b05      	ldr	r3, [sp, #20]
 8000f62:	469b      	mov	fp, r3
 8000f64:	1b2c      	subs	r4, r5, r4
 8000f66:	42a5      	cmp	r5, r4
 8000f68:	41ad      	sbcs	r5, r5
 8000f6a:	9b00      	ldr	r3, [sp, #0]
 8000f6c:	1a80      	subs	r0, r0, r2
 8000f6e:	426d      	negs	r5, r5
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	4283      	cmp	r3, r0
 8000f74:	d100      	bne.n	8000f78 <__aeabi_ddiv+0x348>
 8000f76:	e10f      	b.n	8001198 <__aeabi_ddiv+0x568>
 8000f78:	9902      	ldr	r1, [sp, #8]
 8000f7a:	f7ff f965 	bl	8000248 <__aeabi_uidivmod>
 8000f7e:	9a03      	ldr	r2, [sp, #12]
 8000f80:	040b      	lsls	r3, r1, #16
 8000f82:	4342      	muls	r2, r0
 8000f84:	0c21      	lsrs	r1, r4, #16
 8000f86:	0005      	movs	r5, r0
 8000f88:	4319      	orrs	r1, r3
 8000f8a:	428a      	cmp	r2, r1
 8000f8c:	d900      	bls.n	8000f90 <__aeabi_ddiv+0x360>
 8000f8e:	e0cb      	b.n	8001128 <__aeabi_ddiv+0x4f8>
 8000f90:	1a88      	subs	r0, r1, r2
 8000f92:	9902      	ldr	r1, [sp, #8]
 8000f94:	f7ff f958 	bl	8000248 <__aeabi_uidivmod>
 8000f98:	9a03      	ldr	r2, [sp, #12]
 8000f9a:	0424      	lsls	r4, r4, #16
 8000f9c:	4342      	muls	r2, r0
 8000f9e:	0409      	lsls	r1, r1, #16
 8000fa0:	0c24      	lsrs	r4, r4, #16
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	430c      	orrs	r4, r1
 8000fa6:	42a2      	cmp	r2, r4
 8000fa8:	d900      	bls.n	8000fac <__aeabi_ddiv+0x37c>
 8000faa:	e0ca      	b.n	8001142 <__aeabi_ddiv+0x512>
 8000fac:	4641      	mov	r1, r8
 8000fae:	1aa4      	subs	r4, r4, r2
 8000fb0:	042a      	lsls	r2, r5, #16
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	9f04      	ldr	r7, [sp, #16]
 8000fb6:	0413      	lsls	r3, r2, #16
 8000fb8:	0c1b      	lsrs	r3, r3, #16
 8000fba:	4359      	muls	r1, r3
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	437b      	muls	r3, r7
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	0c15      	lsrs	r5, r2, #16
 8000fc4:	4368      	muls	r0, r5
 8000fc6:	0c0b      	lsrs	r3, r1, #16
 8000fc8:	4484      	add	ip, r0
 8000fca:	4463      	add	r3, ip
 8000fcc:	437d      	muls	r5, r7
 8000fce:	4298      	cmp	r0, r3
 8000fd0:	d903      	bls.n	8000fda <__aeabi_ddiv+0x3aa>
 8000fd2:	2080      	movs	r0, #128	@ 0x80
 8000fd4:	0240      	lsls	r0, r0, #9
 8000fd6:	4684      	mov	ip, r0
 8000fd8:	4465      	add	r5, ip
 8000fda:	0c18      	lsrs	r0, r3, #16
 8000fdc:	0409      	lsls	r1, r1, #16
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	0c09      	lsrs	r1, r1, #16
 8000fe2:	1940      	adds	r0, r0, r5
 8000fe4:	185b      	adds	r3, r3, r1
 8000fe6:	4284      	cmp	r4, r0
 8000fe8:	d327      	bcc.n	800103a <__aeabi_ddiv+0x40a>
 8000fea:	d023      	beq.n	8001034 <__aeabi_ddiv+0x404>
 8000fec:	2301      	movs	r3, #1
 8000fee:	0035      	movs	r5, r6
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	4b94      	ldr	r3, [pc, #592]	@ (8001244 <__aeabi_ddiv+0x614>)
 8000ff4:	4453      	add	r3, sl
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	dd60      	ble.n	80010bc <__aeabi_ddiv+0x48c>
 8000ffa:	0751      	lsls	r1, r2, #29
 8000ffc:	d000      	beq.n	8001000 <__aeabi_ddiv+0x3d0>
 8000ffe:	e086      	b.n	800110e <__aeabi_ddiv+0x4de>
 8001000:	002e      	movs	r6, r5
 8001002:	08d1      	lsrs	r1, r2, #3
 8001004:	465a      	mov	r2, fp
 8001006:	01d2      	lsls	r2, r2, #7
 8001008:	d506      	bpl.n	8001018 <__aeabi_ddiv+0x3e8>
 800100a:	465a      	mov	r2, fp
 800100c:	4b8e      	ldr	r3, [pc, #568]	@ (8001248 <__aeabi_ddiv+0x618>)
 800100e:	401a      	ands	r2, r3
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	4693      	mov	fp, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4453      	add	r3, sl
 8001018:	4a8c      	ldr	r2, [pc, #560]	@ (800124c <__aeabi_ddiv+0x61c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	dd00      	ble.n	8001020 <__aeabi_ddiv+0x3f0>
 800101e:	e680      	b.n	8000d22 <__aeabi_ddiv+0xf2>
 8001020:	465a      	mov	r2, fp
 8001022:	0752      	lsls	r2, r2, #29
 8001024:	430a      	orrs	r2, r1
 8001026:	4690      	mov	r8, r2
 8001028:	465a      	mov	r2, fp
 800102a:	055b      	lsls	r3, r3, #21
 800102c:	0254      	lsls	r4, r2, #9
 800102e:	0b24      	lsrs	r4, r4, #12
 8001030:	0d5b      	lsrs	r3, r3, #21
 8001032:	e669      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 8001034:	0035      	movs	r5, r6
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0db      	beq.n	8000ff2 <__aeabi_ddiv+0x3c2>
 800103a:	9d00      	ldr	r5, [sp, #0]
 800103c:	1e51      	subs	r1, r2, #1
 800103e:	46ac      	mov	ip, r5
 8001040:	4464      	add	r4, ip
 8001042:	42ac      	cmp	r4, r5
 8001044:	d200      	bcs.n	8001048 <__aeabi_ddiv+0x418>
 8001046:	e09e      	b.n	8001186 <__aeabi_ddiv+0x556>
 8001048:	4284      	cmp	r4, r0
 800104a:	d200      	bcs.n	800104e <__aeabi_ddiv+0x41e>
 800104c:	e0e1      	b.n	8001212 <__aeabi_ddiv+0x5e2>
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x422>
 8001050:	e0ee      	b.n	8001230 <__aeabi_ddiv+0x600>
 8001052:	000a      	movs	r2, r1
 8001054:	e7ca      	b.n	8000fec <__aeabi_ddiv+0x3bc>
 8001056:	4542      	cmp	r2, r8
 8001058:	d900      	bls.n	800105c <__aeabi_ddiv+0x42c>
 800105a:	e708      	b.n	8000e6e <__aeabi_ddiv+0x23e>
 800105c:	464b      	mov	r3, r9
 800105e:	07dc      	lsls	r4, r3, #31
 8001060:	0858      	lsrs	r0, r3, #1
 8001062:	4643      	mov	r3, r8
 8001064:	085b      	lsrs	r3, r3, #1
 8001066:	431c      	orrs	r4, r3
 8001068:	4643      	mov	r3, r8
 800106a:	07dd      	lsls	r5, r3, #31
 800106c:	e706      	b.n	8000e7c <__aeabi_ddiv+0x24c>
 800106e:	f001 f9b9 	bl	80023e4 <__clzsi2>
 8001072:	2315      	movs	r3, #21
 8001074:	469c      	mov	ip, r3
 8001076:	4484      	add	ip, r0
 8001078:	0002      	movs	r2, r0
 800107a:	4663      	mov	r3, ip
 800107c:	3220      	adds	r2, #32
 800107e:	2b1c      	cmp	r3, #28
 8001080:	dc00      	bgt.n	8001084 <__aeabi_ddiv+0x454>
 8001082:	e692      	b.n	8000daa <__aeabi_ddiv+0x17a>
 8001084:	0023      	movs	r3, r4
 8001086:	3808      	subs	r0, #8
 8001088:	4083      	lsls	r3, r0
 800108a:	4699      	mov	r9, r3
 800108c:	2300      	movs	r3, #0
 800108e:	4698      	mov	r8, r3
 8001090:	e69a      	b.n	8000dc8 <__aeabi_ddiv+0x198>
 8001092:	f001 f9a7 	bl	80023e4 <__clzsi2>
 8001096:	0002      	movs	r2, r0
 8001098:	0003      	movs	r3, r0
 800109a:	3215      	adds	r2, #21
 800109c:	3320      	adds	r3, #32
 800109e:	2a1c      	cmp	r2, #28
 80010a0:	dc00      	bgt.n	80010a4 <__aeabi_ddiv+0x474>
 80010a2:	e65f      	b.n	8000d64 <__aeabi_ddiv+0x134>
 80010a4:	9900      	ldr	r1, [sp, #0]
 80010a6:	3808      	subs	r0, #8
 80010a8:	4081      	lsls	r1, r0
 80010aa:	2200      	movs	r2, #0
 80010ac:	468b      	mov	fp, r1
 80010ae:	e666      	b.n	8000d7e <__aeabi_ddiv+0x14e>
 80010b0:	2200      	movs	r2, #0
 80010b2:	002e      	movs	r6, r5
 80010b4:	2400      	movs	r4, #0
 80010b6:	4690      	mov	r8, r2
 80010b8:	4b65      	ldr	r3, [pc, #404]	@ (8001250 <__aeabi_ddiv+0x620>)
 80010ba:	e625      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 80010bc:	002e      	movs	r6, r5
 80010be:	2101      	movs	r1, #1
 80010c0:	1ac9      	subs	r1, r1, r3
 80010c2:	2938      	cmp	r1, #56	@ 0x38
 80010c4:	dd00      	ble.n	80010c8 <__aeabi_ddiv+0x498>
 80010c6:	e61b      	b.n	8000d00 <__aeabi_ddiv+0xd0>
 80010c8:	291f      	cmp	r1, #31
 80010ca:	dc7e      	bgt.n	80011ca <__aeabi_ddiv+0x59a>
 80010cc:	4861      	ldr	r0, [pc, #388]	@ (8001254 <__aeabi_ddiv+0x624>)
 80010ce:	0014      	movs	r4, r2
 80010d0:	4450      	add	r0, sl
 80010d2:	465b      	mov	r3, fp
 80010d4:	4082      	lsls	r2, r0
 80010d6:	4083      	lsls	r3, r0
 80010d8:	40cc      	lsrs	r4, r1
 80010da:	1e50      	subs	r0, r2, #1
 80010dc:	4182      	sbcs	r2, r0
 80010de:	4323      	orrs	r3, r4
 80010e0:	431a      	orrs	r2, r3
 80010e2:	465b      	mov	r3, fp
 80010e4:	40cb      	lsrs	r3, r1
 80010e6:	0751      	lsls	r1, r2, #29
 80010e8:	d009      	beq.n	80010fe <__aeabi_ddiv+0x4ce>
 80010ea:	210f      	movs	r1, #15
 80010ec:	4011      	ands	r1, r2
 80010ee:	2904      	cmp	r1, #4
 80010f0:	d005      	beq.n	80010fe <__aeabi_ddiv+0x4ce>
 80010f2:	1d11      	adds	r1, r2, #4
 80010f4:	4291      	cmp	r1, r2
 80010f6:	4192      	sbcs	r2, r2
 80010f8:	4252      	negs	r2, r2
 80010fa:	189b      	adds	r3, r3, r2
 80010fc:	000a      	movs	r2, r1
 80010fe:	0219      	lsls	r1, r3, #8
 8001100:	d400      	bmi.n	8001104 <__aeabi_ddiv+0x4d4>
 8001102:	e09b      	b.n	800123c <__aeabi_ddiv+0x60c>
 8001104:	2200      	movs	r2, #0
 8001106:	2301      	movs	r3, #1
 8001108:	2400      	movs	r4, #0
 800110a:	4690      	mov	r8, r2
 800110c:	e5fc      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 800110e:	210f      	movs	r1, #15
 8001110:	4011      	ands	r1, r2
 8001112:	2904      	cmp	r1, #4
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x4e8>
 8001116:	e773      	b.n	8001000 <__aeabi_ddiv+0x3d0>
 8001118:	1d11      	adds	r1, r2, #4
 800111a:	4291      	cmp	r1, r2
 800111c:	4192      	sbcs	r2, r2
 800111e:	4252      	negs	r2, r2
 8001120:	002e      	movs	r6, r5
 8001122:	08c9      	lsrs	r1, r1, #3
 8001124:	4493      	add	fp, r2
 8001126:	e76d      	b.n	8001004 <__aeabi_ddiv+0x3d4>
 8001128:	9b00      	ldr	r3, [sp, #0]
 800112a:	3d01      	subs	r5, #1
 800112c:	469c      	mov	ip, r3
 800112e:	4461      	add	r1, ip
 8001130:	428b      	cmp	r3, r1
 8001132:	d900      	bls.n	8001136 <__aeabi_ddiv+0x506>
 8001134:	e72c      	b.n	8000f90 <__aeabi_ddiv+0x360>
 8001136:	428a      	cmp	r2, r1
 8001138:	d800      	bhi.n	800113c <__aeabi_ddiv+0x50c>
 800113a:	e729      	b.n	8000f90 <__aeabi_ddiv+0x360>
 800113c:	1e85      	subs	r5, r0, #2
 800113e:	4461      	add	r1, ip
 8001140:	e726      	b.n	8000f90 <__aeabi_ddiv+0x360>
 8001142:	9900      	ldr	r1, [sp, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	468c      	mov	ip, r1
 8001148:	4464      	add	r4, ip
 800114a:	42a1      	cmp	r1, r4
 800114c:	d900      	bls.n	8001150 <__aeabi_ddiv+0x520>
 800114e:	e72d      	b.n	8000fac <__aeabi_ddiv+0x37c>
 8001150:	42a2      	cmp	r2, r4
 8001152:	d800      	bhi.n	8001156 <__aeabi_ddiv+0x526>
 8001154:	e72a      	b.n	8000fac <__aeabi_ddiv+0x37c>
 8001156:	1e83      	subs	r3, r0, #2
 8001158:	4464      	add	r4, ip
 800115a:	e727      	b.n	8000fac <__aeabi_ddiv+0x37c>
 800115c:	4287      	cmp	r7, r0
 800115e:	d000      	beq.n	8001162 <__aeabi_ddiv+0x532>
 8001160:	e6fe      	b.n	8000f60 <__aeabi_ddiv+0x330>
 8001162:	45a9      	cmp	r9, r5
 8001164:	d900      	bls.n	8001168 <__aeabi_ddiv+0x538>
 8001166:	e6fb      	b.n	8000f60 <__aeabi_ddiv+0x330>
 8001168:	e6f5      	b.n	8000f56 <__aeabi_ddiv+0x326>
 800116a:	42a2      	cmp	r2, r4
 800116c:	d800      	bhi.n	8001170 <__aeabi_ddiv+0x540>
 800116e:	e6b9      	b.n	8000ee4 <__aeabi_ddiv+0x2b4>
 8001170:	1e83      	subs	r3, r0, #2
 8001172:	4464      	add	r4, ip
 8001174:	e6b6      	b.n	8000ee4 <__aeabi_ddiv+0x2b4>
 8001176:	428a      	cmp	r2, r1
 8001178:	d800      	bhi.n	800117c <__aeabi_ddiv+0x54c>
 800117a:	e69f      	b.n	8000ebc <__aeabi_ddiv+0x28c>
 800117c:	46bc      	mov	ip, r7
 800117e:	1e83      	subs	r3, r0, #2
 8001180:	4698      	mov	r8, r3
 8001182:	4461      	add	r1, ip
 8001184:	e69a      	b.n	8000ebc <__aeabi_ddiv+0x28c>
 8001186:	000a      	movs	r2, r1
 8001188:	4284      	cmp	r4, r0
 800118a:	d000      	beq.n	800118e <__aeabi_ddiv+0x55e>
 800118c:	e72e      	b.n	8000fec <__aeabi_ddiv+0x3bc>
 800118e:	454b      	cmp	r3, r9
 8001190:	d000      	beq.n	8001194 <__aeabi_ddiv+0x564>
 8001192:	e72b      	b.n	8000fec <__aeabi_ddiv+0x3bc>
 8001194:	0035      	movs	r5, r6
 8001196:	e72c      	b.n	8000ff2 <__aeabi_ddiv+0x3c2>
 8001198:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <__aeabi_ddiv+0x614>)
 800119a:	4a2f      	ldr	r2, [pc, #188]	@ (8001258 <__aeabi_ddiv+0x628>)
 800119c:	4453      	add	r3, sl
 800119e:	4592      	cmp	sl, r2
 80011a0:	db43      	blt.n	800122a <__aeabi_ddiv+0x5fa>
 80011a2:	2201      	movs	r2, #1
 80011a4:	2100      	movs	r1, #0
 80011a6:	4493      	add	fp, r2
 80011a8:	e72c      	b.n	8001004 <__aeabi_ddiv+0x3d4>
 80011aa:	42ac      	cmp	r4, r5
 80011ac:	d800      	bhi.n	80011b0 <__aeabi_ddiv+0x580>
 80011ae:	e6d7      	b.n	8000f60 <__aeabi_ddiv+0x330>
 80011b0:	2302      	movs	r3, #2
 80011b2:	425b      	negs	r3, r3
 80011b4:	469c      	mov	ip, r3
 80011b6:	9900      	ldr	r1, [sp, #0]
 80011b8:	444d      	add	r5, r9
 80011ba:	454d      	cmp	r5, r9
 80011bc:	419b      	sbcs	r3, r3
 80011be:	44e3      	add	fp, ip
 80011c0:	468c      	mov	ip, r1
 80011c2:	425b      	negs	r3, r3
 80011c4:	4463      	add	r3, ip
 80011c6:	18c0      	adds	r0, r0, r3
 80011c8:	e6cc      	b.n	8000f64 <__aeabi_ddiv+0x334>
 80011ca:	201f      	movs	r0, #31
 80011cc:	4240      	negs	r0, r0
 80011ce:	1ac3      	subs	r3, r0, r3
 80011d0:	4658      	mov	r0, fp
 80011d2:	40d8      	lsrs	r0, r3
 80011d4:	2920      	cmp	r1, #32
 80011d6:	d004      	beq.n	80011e2 <__aeabi_ddiv+0x5b2>
 80011d8:	4659      	mov	r1, fp
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <__aeabi_ddiv+0x62c>)
 80011dc:	4453      	add	r3, sl
 80011de:	4099      	lsls	r1, r3
 80011e0:	430a      	orrs	r2, r1
 80011e2:	1e53      	subs	r3, r2, #1
 80011e4:	419a      	sbcs	r2, r3
 80011e6:	2307      	movs	r3, #7
 80011e8:	0019      	movs	r1, r3
 80011ea:	4302      	orrs	r2, r0
 80011ec:	2400      	movs	r4, #0
 80011ee:	4011      	ands	r1, r2
 80011f0:	4213      	tst	r3, r2
 80011f2:	d009      	beq.n	8001208 <__aeabi_ddiv+0x5d8>
 80011f4:	3308      	adds	r3, #8
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d01d      	beq.n	8001238 <__aeabi_ddiv+0x608>
 80011fc:	1d13      	adds	r3, r2, #4
 80011fe:	4293      	cmp	r3, r2
 8001200:	4189      	sbcs	r1, r1
 8001202:	001a      	movs	r2, r3
 8001204:	4249      	negs	r1, r1
 8001206:	0749      	lsls	r1, r1, #29
 8001208:	08d2      	lsrs	r2, r2, #3
 800120a:	430a      	orrs	r2, r1
 800120c:	4690      	mov	r8, r2
 800120e:	2300      	movs	r3, #0
 8001210:	e57a      	b.n	8000d08 <__aeabi_ddiv+0xd8>
 8001212:	4649      	mov	r1, r9
 8001214:	9f00      	ldr	r7, [sp, #0]
 8001216:	004d      	lsls	r5, r1, #1
 8001218:	454d      	cmp	r5, r9
 800121a:	4189      	sbcs	r1, r1
 800121c:	46bc      	mov	ip, r7
 800121e:	4249      	negs	r1, r1
 8001220:	4461      	add	r1, ip
 8001222:	46a9      	mov	r9, r5
 8001224:	3a02      	subs	r2, #2
 8001226:	1864      	adds	r4, r4, r1
 8001228:	e7ae      	b.n	8001188 <__aeabi_ddiv+0x558>
 800122a:	2201      	movs	r2, #1
 800122c:	4252      	negs	r2, r2
 800122e:	e746      	b.n	80010be <__aeabi_ddiv+0x48e>
 8001230:	4599      	cmp	r9, r3
 8001232:	d3ee      	bcc.n	8001212 <__aeabi_ddiv+0x5e2>
 8001234:	000a      	movs	r2, r1
 8001236:	e7aa      	b.n	800118e <__aeabi_ddiv+0x55e>
 8001238:	2100      	movs	r1, #0
 800123a:	e7e5      	b.n	8001208 <__aeabi_ddiv+0x5d8>
 800123c:	0759      	lsls	r1, r3, #29
 800123e:	025b      	lsls	r3, r3, #9
 8001240:	0b1c      	lsrs	r4, r3, #12
 8001242:	e7e1      	b.n	8001208 <__aeabi_ddiv+0x5d8>
 8001244:	000003ff 	.word	0x000003ff
 8001248:	feffffff 	.word	0xfeffffff
 800124c:	000007fe 	.word	0x000007fe
 8001250:	000007ff 	.word	0x000007ff
 8001254:	0000041e 	.word	0x0000041e
 8001258:	fffffc02 	.word	0xfffffc02
 800125c:	0000043e 	.word	0x0000043e

08001260 <__eqdf2>:
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	4657      	mov	r7, sl
 8001264:	46de      	mov	lr, fp
 8001266:	464e      	mov	r6, r9
 8001268:	4645      	mov	r5, r8
 800126a:	b5e0      	push	{r5, r6, r7, lr}
 800126c:	000d      	movs	r5, r1
 800126e:	0004      	movs	r4, r0
 8001270:	0fe8      	lsrs	r0, r5, #31
 8001272:	4683      	mov	fp, r0
 8001274:	0309      	lsls	r1, r1, #12
 8001276:	0fd8      	lsrs	r0, r3, #31
 8001278:	0b09      	lsrs	r1, r1, #12
 800127a:	4682      	mov	sl, r0
 800127c:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <__eqdf2+0x84>)
 800127e:	468c      	mov	ip, r1
 8001280:	031f      	lsls	r7, r3, #12
 8001282:	0069      	lsls	r1, r5, #1
 8001284:	005e      	lsls	r6, r3, #1
 8001286:	0d49      	lsrs	r1, r1, #21
 8001288:	0b3f      	lsrs	r7, r7, #12
 800128a:	0d76      	lsrs	r6, r6, #21
 800128c:	4281      	cmp	r1, r0
 800128e:	d018      	beq.n	80012c2 <__eqdf2+0x62>
 8001290:	4286      	cmp	r6, r0
 8001292:	d00f      	beq.n	80012b4 <__eqdf2+0x54>
 8001294:	2001      	movs	r0, #1
 8001296:	42b1      	cmp	r1, r6
 8001298:	d10d      	bne.n	80012b6 <__eqdf2+0x56>
 800129a:	45bc      	cmp	ip, r7
 800129c:	d10b      	bne.n	80012b6 <__eqdf2+0x56>
 800129e:	4294      	cmp	r4, r2
 80012a0:	d109      	bne.n	80012b6 <__eqdf2+0x56>
 80012a2:	45d3      	cmp	fp, sl
 80012a4:	d01c      	beq.n	80012e0 <__eqdf2+0x80>
 80012a6:	2900      	cmp	r1, #0
 80012a8:	d105      	bne.n	80012b6 <__eqdf2+0x56>
 80012aa:	4660      	mov	r0, ip
 80012ac:	4320      	orrs	r0, r4
 80012ae:	1e43      	subs	r3, r0, #1
 80012b0:	4198      	sbcs	r0, r3
 80012b2:	e000      	b.n	80012b6 <__eqdf2+0x56>
 80012b4:	2001      	movs	r0, #1
 80012b6:	bcf0      	pop	{r4, r5, r6, r7}
 80012b8:	46bb      	mov	fp, r7
 80012ba:	46b2      	mov	sl, r6
 80012bc:	46a9      	mov	r9, r5
 80012be:	46a0      	mov	r8, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	2001      	movs	r0, #1
 80012c4:	428e      	cmp	r6, r1
 80012c6:	d1f6      	bne.n	80012b6 <__eqdf2+0x56>
 80012c8:	4661      	mov	r1, ip
 80012ca:	4339      	orrs	r1, r7
 80012cc:	000f      	movs	r7, r1
 80012ce:	4317      	orrs	r7, r2
 80012d0:	4327      	orrs	r7, r4
 80012d2:	d1f0      	bne.n	80012b6 <__eqdf2+0x56>
 80012d4:	465b      	mov	r3, fp
 80012d6:	4652      	mov	r2, sl
 80012d8:	1a98      	subs	r0, r3, r2
 80012da:	1e43      	subs	r3, r0, #1
 80012dc:	4198      	sbcs	r0, r3
 80012de:	e7ea      	b.n	80012b6 <__eqdf2+0x56>
 80012e0:	2000      	movs	r0, #0
 80012e2:	e7e8      	b.n	80012b6 <__eqdf2+0x56>
 80012e4:	000007ff 	.word	0x000007ff

080012e8 <__gedf2>:
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	4657      	mov	r7, sl
 80012ec:	464e      	mov	r6, r9
 80012ee:	4645      	mov	r5, r8
 80012f0:	46de      	mov	lr, fp
 80012f2:	b5e0      	push	{r5, r6, r7, lr}
 80012f4:	000d      	movs	r5, r1
 80012f6:	030e      	lsls	r6, r1, #12
 80012f8:	0049      	lsls	r1, r1, #1
 80012fa:	0d49      	lsrs	r1, r1, #21
 80012fc:	468a      	mov	sl, r1
 80012fe:	0fdf      	lsrs	r7, r3, #31
 8001300:	0fe9      	lsrs	r1, r5, #31
 8001302:	46bc      	mov	ip, r7
 8001304:	b083      	sub	sp, #12
 8001306:	4f2f      	ldr	r7, [pc, #188]	@ (80013c4 <__gedf2+0xdc>)
 8001308:	0004      	movs	r4, r0
 800130a:	4680      	mov	r8, r0
 800130c:	9101      	str	r1, [sp, #4]
 800130e:	0058      	lsls	r0, r3, #1
 8001310:	0319      	lsls	r1, r3, #12
 8001312:	4691      	mov	r9, r2
 8001314:	0b36      	lsrs	r6, r6, #12
 8001316:	0b09      	lsrs	r1, r1, #12
 8001318:	0d40      	lsrs	r0, r0, #21
 800131a:	45ba      	cmp	sl, r7
 800131c:	d01d      	beq.n	800135a <__gedf2+0x72>
 800131e:	42b8      	cmp	r0, r7
 8001320:	d00d      	beq.n	800133e <__gedf2+0x56>
 8001322:	4657      	mov	r7, sl
 8001324:	2f00      	cmp	r7, #0
 8001326:	d12a      	bne.n	800137e <__gedf2+0x96>
 8001328:	4334      	orrs	r4, r6
 800132a:	2800      	cmp	r0, #0
 800132c:	d124      	bne.n	8001378 <__gedf2+0x90>
 800132e:	430a      	orrs	r2, r1
 8001330:	d036      	beq.n	80013a0 <__gedf2+0xb8>
 8001332:	2c00      	cmp	r4, #0
 8001334:	d141      	bne.n	80013ba <__gedf2+0xd2>
 8001336:	4663      	mov	r3, ip
 8001338:	0058      	lsls	r0, r3, #1
 800133a:	3801      	subs	r0, #1
 800133c:	e015      	b.n	800136a <__gedf2+0x82>
 800133e:	4311      	orrs	r1, r2
 8001340:	d138      	bne.n	80013b4 <__gedf2+0xcc>
 8001342:	4653      	mov	r3, sl
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <__gedf2+0x64>
 8001348:	4326      	orrs	r6, r4
 800134a:	d0f4      	beq.n	8001336 <__gedf2+0x4e>
 800134c:	9b01      	ldr	r3, [sp, #4]
 800134e:	4563      	cmp	r3, ip
 8001350:	d107      	bne.n	8001362 <__gedf2+0x7a>
 8001352:	9b01      	ldr	r3, [sp, #4]
 8001354:	0058      	lsls	r0, r3, #1
 8001356:	3801      	subs	r0, #1
 8001358:	e007      	b.n	800136a <__gedf2+0x82>
 800135a:	4326      	orrs	r6, r4
 800135c:	d12a      	bne.n	80013b4 <__gedf2+0xcc>
 800135e:	4550      	cmp	r0, sl
 8001360:	d021      	beq.n	80013a6 <__gedf2+0xbe>
 8001362:	2001      	movs	r0, #1
 8001364:	9b01      	ldr	r3, [sp, #4]
 8001366:	425f      	negs	r7, r3
 8001368:	4338      	orrs	r0, r7
 800136a:	b003      	add	sp, #12
 800136c:	bcf0      	pop	{r4, r5, r6, r7}
 800136e:	46bb      	mov	fp, r7
 8001370:	46b2      	mov	sl, r6
 8001372:	46a9      	mov	r9, r5
 8001374:	46a0      	mov	r8, r4
 8001376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001378:	2c00      	cmp	r4, #0
 800137a:	d0dc      	beq.n	8001336 <__gedf2+0x4e>
 800137c:	e7e6      	b.n	800134c <__gedf2+0x64>
 800137e:	2800      	cmp	r0, #0
 8001380:	d0ef      	beq.n	8001362 <__gedf2+0x7a>
 8001382:	9b01      	ldr	r3, [sp, #4]
 8001384:	4563      	cmp	r3, ip
 8001386:	d1ec      	bne.n	8001362 <__gedf2+0x7a>
 8001388:	4582      	cmp	sl, r0
 800138a:	dcea      	bgt.n	8001362 <__gedf2+0x7a>
 800138c:	dbe1      	blt.n	8001352 <__gedf2+0x6a>
 800138e:	428e      	cmp	r6, r1
 8001390:	d8e7      	bhi.n	8001362 <__gedf2+0x7a>
 8001392:	d1de      	bne.n	8001352 <__gedf2+0x6a>
 8001394:	45c8      	cmp	r8, r9
 8001396:	d8e4      	bhi.n	8001362 <__gedf2+0x7a>
 8001398:	2000      	movs	r0, #0
 800139a:	45c8      	cmp	r8, r9
 800139c:	d2e5      	bcs.n	800136a <__gedf2+0x82>
 800139e:	e7d8      	b.n	8001352 <__gedf2+0x6a>
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d0e2      	beq.n	800136a <__gedf2+0x82>
 80013a4:	e7dd      	b.n	8001362 <__gedf2+0x7a>
 80013a6:	4311      	orrs	r1, r2
 80013a8:	d104      	bne.n	80013b4 <__gedf2+0xcc>
 80013aa:	9b01      	ldr	r3, [sp, #4]
 80013ac:	4563      	cmp	r3, ip
 80013ae:	d1d8      	bne.n	8001362 <__gedf2+0x7a>
 80013b0:	2000      	movs	r0, #0
 80013b2:	e7da      	b.n	800136a <__gedf2+0x82>
 80013b4:	2002      	movs	r0, #2
 80013b6:	4240      	negs	r0, r0
 80013b8:	e7d7      	b.n	800136a <__gedf2+0x82>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	4563      	cmp	r3, ip
 80013be:	d0e6      	beq.n	800138e <__gedf2+0xa6>
 80013c0:	e7cf      	b.n	8001362 <__gedf2+0x7a>
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	000007ff 	.word	0x000007ff

080013c8 <__ledf2>:
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	4657      	mov	r7, sl
 80013cc:	464e      	mov	r6, r9
 80013ce:	4645      	mov	r5, r8
 80013d0:	46de      	mov	lr, fp
 80013d2:	b5e0      	push	{r5, r6, r7, lr}
 80013d4:	000d      	movs	r5, r1
 80013d6:	030e      	lsls	r6, r1, #12
 80013d8:	0049      	lsls	r1, r1, #1
 80013da:	0d49      	lsrs	r1, r1, #21
 80013dc:	468a      	mov	sl, r1
 80013de:	0fdf      	lsrs	r7, r3, #31
 80013e0:	0fe9      	lsrs	r1, r5, #31
 80013e2:	46bc      	mov	ip, r7
 80013e4:	b083      	sub	sp, #12
 80013e6:	4f2e      	ldr	r7, [pc, #184]	@ (80014a0 <__ledf2+0xd8>)
 80013e8:	0004      	movs	r4, r0
 80013ea:	4680      	mov	r8, r0
 80013ec:	9101      	str	r1, [sp, #4]
 80013ee:	0058      	lsls	r0, r3, #1
 80013f0:	0319      	lsls	r1, r3, #12
 80013f2:	4691      	mov	r9, r2
 80013f4:	0b36      	lsrs	r6, r6, #12
 80013f6:	0b09      	lsrs	r1, r1, #12
 80013f8:	0d40      	lsrs	r0, r0, #21
 80013fa:	45ba      	cmp	sl, r7
 80013fc:	d01e      	beq.n	800143c <__ledf2+0x74>
 80013fe:	42b8      	cmp	r0, r7
 8001400:	d00d      	beq.n	800141e <__ledf2+0x56>
 8001402:	4657      	mov	r7, sl
 8001404:	2f00      	cmp	r7, #0
 8001406:	d127      	bne.n	8001458 <__ledf2+0x90>
 8001408:	4334      	orrs	r4, r6
 800140a:	2800      	cmp	r0, #0
 800140c:	d133      	bne.n	8001476 <__ledf2+0xae>
 800140e:	430a      	orrs	r2, r1
 8001410:	d034      	beq.n	800147c <__ledf2+0xb4>
 8001412:	2c00      	cmp	r4, #0
 8001414:	d140      	bne.n	8001498 <__ledf2+0xd0>
 8001416:	4663      	mov	r3, ip
 8001418:	0058      	lsls	r0, r3, #1
 800141a:	3801      	subs	r0, #1
 800141c:	e015      	b.n	800144a <__ledf2+0x82>
 800141e:	4311      	orrs	r1, r2
 8001420:	d112      	bne.n	8001448 <__ledf2+0x80>
 8001422:	4653      	mov	r3, sl
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <__ledf2+0x64>
 8001428:	4326      	orrs	r6, r4
 800142a:	d0f4      	beq.n	8001416 <__ledf2+0x4e>
 800142c:	9b01      	ldr	r3, [sp, #4]
 800142e:	4563      	cmp	r3, ip
 8001430:	d01d      	beq.n	800146e <__ledf2+0xa6>
 8001432:	2001      	movs	r0, #1
 8001434:	9b01      	ldr	r3, [sp, #4]
 8001436:	425f      	negs	r7, r3
 8001438:	4338      	orrs	r0, r7
 800143a:	e006      	b.n	800144a <__ledf2+0x82>
 800143c:	4326      	orrs	r6, r4
 800143e:	d103      	bne.n	8001448 <__ledf2+0x80>
 8001440:	4550      	cmp	r0, sl
 8001442:	d1f6      	bne.n	8001432 <__ledf2+0x6a>
 8001444:	4311      	orrs	r1, r2
 8001446:	d01c      	beq.n	8001482 <__ledf2+0xba>
 8001448:	2002      	movs	r0, #2
 800144a:	b003      	add	sp, #12
 800144c:	bcf0      	pop	{r4, r5, r6, r7}
 800144e:	46bb      	mov	fp, r7
 8001450:	46b2      	mov	sl, r6
 8001452:	46a9      	mov	r9, r5
 8001454:	46a0      	mov	r8, r4
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	2800      	cmp	r0, #0
 800145a:	d0ea      	beq.n	8001432 <__ledf2+0x6a>
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	4563      	cmp	r3, ip
 8001460:	d1e7      	bne.n	8001432 <__ledf2+0x6a>
 8001462:	4582      	cmp	sl, r0
 8001464:	dce5      	bgt.n	8001432 <__ledf2+0x6a>
 8001466:	db02      	blt.n	800146e <__ledf2+0xa6>
 8001468:	428e      	cmp	r6, r1
 800146a:	d8e2      	bhi.n	8001432 <__ledf2+0x6a>
 800146c:	d00e      	beq.n	800148c <__ledf2+0xc4>
 800146e:	9b01      	ldr	r3, [sp, #4]
 8001470:	0058      	lsls	r0, r3, #1
 8001472:	3801      	subs	r0, #1
 8001474:	e7e9      	b.n	800144a <__ledf2+0x82>
 8001476:	2c00      	cmp	r4, #0
 8001478:	d0cd      	beq.n	8001416 <__ledf2+0x4e>
 800147a:	e7d7      	b.n	800142c <__ledf2+0x64>
 800147c:	2c00      	cmp	r4, #0
 800147e:	d0e4      	beq.n	800144a <__ledf2+0x82>
 8001480:	e7d7      	b.n	8001432 <__ledf2+0x6a>
 8001482:	9b01      	ldr	r3, [sp, #4]
 8001484:	2000      	movs	r0, #0
 8001486:	4563      	cmp	r3, ip
 8001488:	d0df      	beq.n	800144a <__ledf2+0x82>
 800148a:	e7d2      	b.n	8001432 <__ledf2+0x6a>
 800148c:	45c8      	cmp	r8, r9
 800148e:	d8d0      	bhi.n	8001432 <__ledf2+0x6a>
 8001490:	2000      	movs	r0, #0
 8001492:	45c8      	cmp	r8, r9
 8001494:	d2d9      	bcs.n	800144a <__ledf2+0x82>
 8001496:	e7ea      	b.n	800146e <__ledf2+0xa6>
 8001498:	9b01      	ldr	r3, [sp, #4]
 800149a:	4563      	cmp	r3, ip
 800149c:	d0e4      	beq.n	8001468 <__ledf2+0xa0>
 800149e:	e7c8      	b.n	8001432 <__ledf2+0x6a>
 80014a0:	000007ff 	.word	0x000007ff

080014a4 <__aeabi_dmul>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	4657      	mov	r7, sl
 80014a8:	464e      	mov	r6, r9
 80014aa:	46de      	mov	lr, fp
 80014ac:	4645      	mov	r5, r8
 80014ae:	b5e0      	push	{r5, r6, r7, lr}
 80014b0:	001f      	movs	r7, r3
 80014b2:	030b      	lsls	r3, r1, #12
 80014b4:	0b1b      	lsrs	r3, r3, #12
 80014b6:	0016      	movs	r6, r2
 80014b8:	469a      	mov	sl, r3
 80014ba:	0fca      	lsrs	r2, r1, #31
 80014bc:	004b      	lsls	r3, r1, #1
 80014be:	0004      	movs	r4, r0
 80014c0:	4691      	mov	r9, r2
 80014c2:	b085      	sub	sp, #20
 80014c4:	0d5b      	lsrs	r3, r3, #21
 80014c6:	d100      	bne.n	80014ca <__aeabi_dmul+0x26>
 80014c8:	e1cf      	b.n	800186a <__aeabi_dmul+0x3c6>
 80014ca:	4acd      	ldr	r2, [pc, #820]	@ (8001800 <__aeabi_dmul+0x35c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d055      	beq.n	800157c <__aeabi_dmul+0xd8>
 80014d0:	4651      	mov	r1, sl
 80014d2:	0f42      	lsrs	r2, r0, #29
 80014d4:	00c9      	lsls	r1, r1, #3
 80014d6:	430a      	orrs	r2, r1
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	0409      	lsls	r1, r1, #16
 80014dc:	4311      	orrs	r1, r2
 80014de:	00c2      	lsls	r2, r0, #3
 80014e0:	4690      	mov	r8, r2
 80014e2:	4ac8      	ldr	r2, [pc, #800]	@ (8001804 <__aeabi_dmul+0x360>)
 80014e4:	468a      	mov	sl, r1
 80014e6:	4693      	mov	fp, r2
 80014e8:	449b      	add	fp, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	033c      	lsls	r4, r7, #12
 80014f2:	007b      	lsls	r3, r7, #1
 80014f4:	0ffa      	lsrs	r2, r7, #31
 80014f6:	9601      	str	r6, [sp, #4]
 80014f8:	0b24      	lsrs	r4, r4, #12
 80014fa:	0d5b      	lsrs	r3, r3, #21
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x5e>
 8001500:	e188      	b.n	8001814 <__aeabi_dmul+0x370>
 8001502:	4abf      	ldr	r2, [pc, #764]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x66>
 8001508:	e092      	b.n	8001630 <__aeabi_dmul+0x18c>
 800150a:	4abe      	ldr	r2, [pc, #760]	@ (8001804 <__aeabi_dmul+0x360>)
 800150c:	4694      	mov	ip, r2
 800150e:	4463      	add	r3, ip
 8001510:	449b      	add	fp, r3
 8001512:	2d0a      	cmp	r5, #10
 8001514:	dc42      	bgt.n	800159c <__aeabi_dmul+0xf8>
 8001516:	00e4      	lsls	r4, r4, #3
 8001518:	0f73      	lsrs	r3, r6, #29
 800151a:	4323      	orrs	r3, r4
 800151c:	2480      	movs	r4, #128	@ 0x80
 800151e:	4649      	mov	r1, r9
 8001520:	0424      	lsls	r4, r4, #16
 8001522:	431c      	orrs	r4, r3
 8001524:	00f3      	lsls	r3, r6, #3
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	9b00      	ldr	r3, [sp, #0]
 800152a:	2000      	movs	r0, #0
 800152c:	4059      	eors	r1, r3
 800152e:	b2cb      	uxtb	r3, r1
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	2d02      	cmp	r5, #2
 8001534:	dc00      	bgt.n	8001538 <__aeabi_dmul+0x94>
 8001536:	e094      	b.n	8001662 <__aeabi_dmul+0x1be>
 8001538:	2301      	movs	r3, #1
 800153a:	40ab      	lsls	r3, r5
 800153c:	001d      	movs	r5, r3
 800153e:	23a6      	movs	r3, #166	@ 0xa6
 8001540:	002a      	movs	r2, r5
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	401a      	ands	r2, r3
 8001546:	421d      	tst	r5, r3
 8001548:	d000      	beq.n	800154c <__aeabi_dmul+0xa8>
 800154a:	e229      	b.n	80019a0 <__aeabi_dmul+0x4fc>
 800154c:	2390      	movs	r3, #144	@ 0x90
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	421d      	tst	r5, r3
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0xb2>
 8001554:	e24d      	b.n	80019f2 <__aeabi_dmul+0x54e>
 8001556:	2300      	movs	r3, #0
 8001558:	2480      	movs	r4, #128	@ 0x80
 800155a:	4699      	mov	r9, r3
 800155c:	0324      	lsls	r4, r4, #12
 800155e:	4ba8      	ldr	r3, [pc, #672]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001560:	0010      	movs	r0, r2
 8001562:	464a      	mov	r2, r9
 8001564:	051b      	lsls	r3, r3, #20
 8001566:	4323      	orrs	r3, r4
 8001568:	07d2      	lsls	r2, r2, #31
 800156a:	4313      	orrs	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	b005      	add	sp, #20
 8001570:	bcf0      	pop	{r4, r5, r6, r7}
 8001572:	46bb      	mov	fp, r7
 8001574:	46b2      	mov	sl, r6
 8001576:	46a9      	mov	r9, r5
 8001578:	46a0      	mov	r8, r4
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157c:	4652      	mov	r2, sl
 800157e:	4302      	orrs	r2, r0
 8001580:	4690      	mov	r8, r2
 8001582:	d000      	beq.n	8001586 <__aeabi_dmul+0xe2>
 8001584:	e1ac      	b.n	80018e0 <__aeabi_dmul+0x43c>
 8001586:	469b      	mov	fp, r3
 8001588:	2302      	movs	r3, #2
 800158a:	4692      	mov	sl, r2
 800158c:	2508      	movs	r5, #8
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	e7ae      	b.n	80014f0 <__aeabi_dmul+0x4c>
 8001592:	9b00      	ldr	r3, [sp, #0]
 8001594:	46a2      	mov	sl, r4
 8001596:	4699      	mov	r9, r3
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	4698      	mov	r8, r3
 800159c:	9b02      	ldr	r3, [sp, #8]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0x100>
 80015a2:	e1ca      	b.n	800193a <__aeabi_dmul+0x496>
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x106>
 80015a8:	e192      	b.n	80018d0 <__aeabi_dmul+0x42c>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d110      	bne.n	80015d0 <__aeabi_dmul+0x12c>
 80015ae:	2300      	movs	r3, #0
 80015b0:	2400      	movs	r4, #0
 80015b2:	2200      	movs	r2, #0
 80015b4:	e7d4      	b.n	8001560 <__aeabi_dmul+0xbc>
 80015b6:	2201      	movs	r2, #1
 80015b8:	087b      	lsrs	r3, r7, #1
 80015ba:	403a      	ands	r2, r7
 80015bc:	4313      	orrs	r3, r2
 80015be:	4652      	mov	r2, sl
 80015c0:	07d2      	lsls	r2, r2, #31
 80015c2:	4313      	orrs	r3, r2
 80015c4:	4698      	mov	r8, r3
 80015c6:	4653      	mov	r3, sl
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	469a      	mov	sl, r3
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	4699      	mov	r9, r3
 80015d0:	465b      	mov	r3, fp
 80015d2:	1c58      	adds	r0, r3, #1
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	445b      	add	r3, fp
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dc00      	bgt.n	80015e0 <__aeabi_dmul+0x13c>
 80015de:	e1b1      	b.n	8001944 <__aeabi_dmul+0x4a0>
 80015e0:	4642      	mov	r2, r8
 80015e2:	0752      	lsls	r2, r2, #29
 80015e4:	d00b      	beq.n	80015fe <__aeabi_dmul+0x15a>
 80015e6:	220f      	movs	r2, #15
 80015e8:	4641      	mov	r1, r8
 80015ea:	400a      	ands	r2, r1
 80015ec:	2a04      	cmp	r2, #4
 80015ee:	d006      	beq.n	80015fe <__aeabi_dmul+0x15a>
 80015f0:	4642      	mov	r2, r8
 80015f2:	1d11      	adds	r1, r2, #4
 80015f4:	4541      	cmp	r1, r8
 80015f6:	4192      	sbcs	r2, r2
 80015f8:	4688      	mov	r8, r1
 80015fa:	4252      	negs	r2, r2
 80015fc:	4492      	add	sl, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	01d2      	lsls	r2, r2, #7
 8001602:	d506      	bpl.n	8001612 <__aeabi_dmul+0x16e>
 8001604:	4652      	mov	r2, sl
 8001606:	4b80      	ldr	r3, [pc, #512]	@ (8001808 <__aeabi_dmul+0x364>)
 8001608:	401a      	ands	r2, r3
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	4692      	mov	sl, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	18c3      	adds	r3, r0, r3
 8001612:	4a7e      	ldr	r2, [pc, #504]	@ (800180c <__aeabi_dmul+0x368>)
 8001614:	4293      	cmp	r3, r2
 8001616:	dd00      	ble.n	800161a <__aeabi_dmul+0x176>
 8001618:	e18f      	b.n	800193a <__aeabi_dmul+0x496>
 800161a:	4642      	mov	r2, r8
 800161c:	08d1      	lsrs	r1, r2, #3
 800161e:	4652      	mov	r2, sl
 8001620:	0752      	lsls	r2, r2, #29
 8001622:	430a      	orrs	r2, r1
 8001624:	4651      	mov	r1, sl
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	024c      	lsls	r4, r1, #9
 800162a:	0b24      	lsrs	r4, r4, #12
 800162c:	0d5b      	lsrs	r3, r3, #21
 800162e:	e797      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001630:	4b73      	ldr	r3, [pc, #460]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001632:	4326      	orrs	r6, r4
 8001634:	469c      	mov	ip, r3
 8001636:	44e3      	add	fp, ip
 8001638:	2e00      	cmp	r6, #0
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x19a>
 800163c:	e16f      	b.n	800191e <__aeabi_dmul+0x47a>
 800163e:	2303      	movs	r3, #3
 8001640:	4649      	mov	r1, r9
 8001642:	431d      	orrs	r5, r3
 8001644:	9b00      	ldr	r3, [sp, #0]
 8001646:	4059      	eors	r1, r3
 8001648:	b2cb      	uxtb	r3, r1
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	2d0a      	cmp	r5, #10
 800164e:	dd00      	ble.n	8001652 <__aeabi_dmul+0x1ae>
 8001650:	e133      	b.n	80018ba <__aeabi_dmul+0x416>
 8001652:	2301      	movs	r3, #1
 8001654:	40ab      	lsls	r3, r5
 8001656:	001d      	movs	r5, r3
 8001658:	2303      	movs	r3, #3
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2288      	movs	r2, #136	@ 0x88
 800165e:	422a      	tst	r2, r5
 8001660:	d197      	bne.n	8001592 <__aeabi_dmul+0xee>
 8001662:	4642      	mov	r2, r8
 8001664:	4643      	mov	r3, r8
 8001666:	0412      	lsls	r2, r2, #16
 8001668:	0c12      	lsrs	r2, r2, #16
 800166a:	0016      	movs	r6, r2
 800166c:	9801      	ldr	r0, [sp, #4]
 800166e:	0c1d      	lsrs	r5, r3, #16
 8001670:	0c03      	lsrs	r3, r0, #16
 8001672:	0400      	lsls	r0, r0, #16
 8001674:	0c00      	lsrs	r0, r0, #16
 8001676:	4346      	muls	r6, r0
 8001678:	46b4      	mov	ip, r6
 800167a:	001e      	movs	r6, r3
 800167c:	436e      	muls	r6, r5
 800167e:	9600      	str	r6, [sp, #0]
 8001680:	0016      	movs	r6, r2
 8001682:	0007      	movs	r7, r0
 8001684:	435e      	muls	r6, r3
 8001686:	4661      	mov	r1, ip
 8001688:	46b0      	mov	r8, r6
 800168a:	436f      	muls	r7, r5
 800168c:	0c0e      	lsrs	r6, r1, #16
 800168e:	44b8      	add	r8, r7
 8001690:	4446      	add	r6, r8
 8001692:	42b7      	cmp	r7, r6
 8001694:	d905      	bls.n	80016a2 <__aeabi_dmul+0x1fe>
 8001696:	2180      	movs	r1, #128	@ 0x80
 8001698:	0249      	lsls	r1, r1, #9
 800169a:	4688      	mov	r8, r1
 800169c:	9f00      	ldr	r7, [sp, #0]
 800169e:	4447      	add	r7, r8
 80016a0:	9700      	str	r7, [sp, #0]
 80016a2:	4661      	mov	r1, ip
 80016a4:	0409      	lsls	r1, r1, #16
 80016a6:	0c09      	lsrs	r1, r1, #16
 80016a8:	0c37      	lsrs	r7, r6, #16
 80016aa:	0436      	lsls	r6, r6, #16
 80016ac:	468c      	mov	ip, r1
 80016ae:	0031      	movs	r1, r6
 80016b0:	4461      	add	r1, ip
 80016b2:	9101      	str	r1, [sp, #4]
 80016b4:	0011      	movs	r1, r2
 80016b6:	0c26      	lsrs	r6, r4, #16
 80016b8:	0424      	lsls	r4, r4, #16
 80016ba:	0c24      	lsrs	r4, r4, #16
 80016bc:	4361      	muls	r1, r4
 80016be:	468c      	mov	ip, r1
 80016c0:	0021      	movs	r1, r4
 80016c2:	4369      	muls	r1, r5
 80016c4:	4689      	mov	r9, r1
 80016c6:	4661      	mov	r1, ip
 80016c8:	0c09      	lsrs	r1, r1, #16
 80016ca:	4688      	mov	r8, r1
 80016cc:	4372      	muls	r2, r6
 80016ce:	444a      	add	r2, r9
 80016d0:	4442      	add	r2, r8
 80016d2:	4375      	muls	r5, r6
 80016d4:	4591      	cmp	r9, r2
 80016d6:	d903      	bls.n	80016e0 <__aeabi_dmul+0x23c>
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0249      	lsls	r1, r1, #9
 80016dc:	4688      	mov	r8, r1
 80016de:	4445      	add	r5, r8
 80016e0:	0c11      	lsrs	r1, r2, #16
 80016e2:	4688      	mov	r8, r1
 80016e4:	4661      	mov	r1, ip
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	0c09      	lsrs	r1, r1, #16
 80016ea:	468c      	mov	ip, r1
 80016ec:	0412      	lsls	r2, r2, #16
 80016ee:	4462      	add	r2, ip
 80016f0:	18b9      	adds	r1, r7, r2
 80016f2:	9102      	str	r1, [sp, #8]
 80016f4:	4651      	mov	r1, sl
 80016f6:	0c09      	lsrs	r1, r1, #16
 80016f8:	468c      	mov	ip, r1
 80016fa:	4651      	mov	r1, sl
 80016fc:	040f      	lsls	r7, r1, #16
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	0039      	movs	r1, r7
 8001702:	4341      	muls	r1, r0
 8001704:	4445      	add	r5, r8
 8001706:	4688      	mov	r8, r1
 8001708:	4661      	mov	r1, ip
 800170a:	4341      	muls	r1, r0
 800170c:	468a      	mov	sl, r1
 800170e:	4641      	mov	r1, r8
 8001710:	4660      	mov	r0, ip
 8001712:	0c09      	lsrs	r1, r1, #16
 8001714:	4689      	mov	r9, r1
 8001716:	4358      	muls	r0, r3
 8001718:	437b      	muls	r3, r7
 800171a:	4453      	add	r3, sl
 800171c:	444b      	add	r3, r9
 800171e:	459a      	cmp	sl, r3
 8001720:	d903      	bls.n	800172a <__aeabi_dmul+0x286>
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	0249      	lsls	r1, r1, #9
 8001726:	4689      	mov	r9, r1
 8001728:	4448      	add	r0, r9
 800172a:	0c19      	lsrs	r1, r3, #16
 800172c:	4689      	mov	r9, r1
 800172e:	4641      	mov	r1, r8
 8001730:	0409      	lsls	r1, r1, #16
 8001732:	0c09      	lsrs	r1, r1, #16
 8001734:	4688      	mov	r8, r1
 8001736:	0039      	movs	r1, r7
 8001738:	4361      	muls	r1, r4
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	4443      	add	r3, r8
 800173e:	4688      	mov	r8, r1
 8001740:	4661      	mov	r1, ip
 8001742:	434c      	muls	r4, r1
 8001744:	4371      	muls	r1, r6
 8001746:	468c      	mov	ip, r1
 8001748:	4641      	mov	r1, r8
 800174a:	4377      	muls	r7, r6
 800174c:	0c0e      	lsrs	r6, r1, #16
 800174e:	193f      	adds	r7, r7, r4
 8001750:	19f6      	adds	r6, r6, r7
 8001752:	4448      	add	r0, r9
 8001754:	42b4      	cmp	r4, r6
 8001756:	d903      	bls.n	8001760 <__aeabi_dmul+0x2bc>
 8001758:	2180      	movs	r1, #128	@ 0x80
 800175a:	0249      	lsls	r1, r1, #9
 800175c:	4689      	mov	r9, r1
 800175e:	44cc      	add	ip, r9
 8001760:	9902      	ldr	r1, [sp, #8]
 8001762:	9f00      	ldr	r7, [sp, #0]
 8001764:	4689      	mov	r9, r1
 8001766:	0431      	lsls	r1, r6, #16
 8001768:	444f      	add	r7, r9
 800176a:	4689      	mov	r9, r1
 800176c:	4641      	mov	r1, r8
 800176e:	4297      	cmp	r7, r2
 8001770:	4192      	sbcs	r2, r2
 8001772:	040c      	lsls	r4, r1, #16
 8001774:	0c24      	lsrs	r4, r4, #16
 8001776:	444c      	add	r4, r9
 8001778:	18ff      	adds	r7, r7, r3
 800177a:	4252      	negs	r2, r2
 800177c:	1964      	adds	r4, r4, r5
 800177e:	18a1      	adds	r1, r4, r2
 8001780:	429f      	cmp	r7, r3
 8001782:	419b      	sbcs	r3, r3
 8001784:	4688      	mov	r8, r1
 8001786:	4682      	mov	sl, r0
 8001788:	425b      	negs	r3, r3
 800178a:	4699      	mov	r9, r3
 800178c:	4590      	cmp	r8, r2
 800178e:	4192      	sbcs	r2, r2
 8001790:	42ac      	cmp	r4, r5
 8001792:	41a4      	sbcs	r4, r4
 8001794:	44c2      	add	sl, r8
 8001796:	44d1      	add	r9, sl
 8001798:	4252      	negs	r2, r2
 800179a:	4264      	negs	r4, r4
 800179c:	4314      	orrs	r4, r2
 800179e:	4599      	cmp	r9, r3
 80017a0:	419b      	sbcs	r3, r3
 80017a2:	4582      	cmp	sl, r0
 80017a4:	4192      	sbcs	r2, r2
 80017a6:	425b      	negs	r3, r3
 80017a8:	4252      	negs	r2, r2
 80017aa:	4313      	orrs	r3, r2
 80017ac:	464a      	mov	r2, r9
 80017ae:	0c36      	lsrs	r6, r6, #16
 80017b0:	19a4      	adds	r4, r4, r6
 80017b2:	18e3      	adds	r3, r4, r3
 80017b4:	4463      	add	r3, ip
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	0dd2      	lsrs	r2, r2, #23
 80017ba:	431a      	orrs	r2, r3
 80017bc:	9901      	ldr	r1, [sp, #4]
 80017be:	4692      	mov	sl, r2
 80017c0:	027a      	lsls	r2, r7, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	1e50      	subs	r0, r2, #1
 80017c6:	4182      	sbcs	r2, r0
 80017c8:	0dff      	lsrs	r7, r7, #23
 80017ca:	4317      	orrs	r7, r2
 80017cc:	464a      	mov	r2, r9
 80017ce:	0252      	lsls	r2, r2, #9
 80017d0:	4317      	orrs	r7, r2
 80017d2:	46b8      	mov	r8, r7
 80017d4:	01db      	lsls	r3, r3, #7
 80017d6:	d500      	bpl.n	80017da <__aeabi_dmul+0x336>
 80017d8:	e6ed      	b.n	80015b6 <__aeabi_dmul+0x112>
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <__aeabi_dmul+0x36c>)
 80017dc:	9a03      	ldr	r2, [sp, #12]
 80017de:	445b      	add	r3, fp
 80017e0:	4691      	mov	r9, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc00      	bgt.n	80017e8 <__aeabi_dmul+0x344>
 80017e6:	e0ac      	b.n	8001942 <__aeabi_dmul+0x49e>
 80017e8:	003a      	movs	r2, r7
 80017ea:	0752      	lsls	r2, r2, #29
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dmul+0x34c>
 80017ee:	e710      	b.n	8001612 <__aeabi_dmul+0x16e>
 80017f0:	220f      	movs	r2, #15
 80017f2:	4658      	mov	r0, fp
 80017f4:	403a      	ands	r2, r7
 80017f6:	2a04      	cmp	r2, #4
 80017f8:	d000      	beq.n	80017fc <__aeabi_dmul+0x358>
 80017fa:	e6f9      	b.n	80015f0 <__aeabi_dmul+0x14c>
 80017fc:	e709      	b.n	8001612 <__aeabi_dmul+0x16e>
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	fffffc01 	.word	0xfffffc01
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	000003ff 	.word	0x000003ff
 8001814:	0022      	movs	r2, r4
 8001816:	4332      	orrs	r2, r6
 8001818:	d06f      	beq.n	80018fa <__aeabi_dmul+0x456>
 800181a:	2c00      	cmp	r4, #0
 800181c:	d100      	bne.n	8001820 <__aeabi_dmul+0x37c>
 800181e:	e0c2      	b.n	80019a6 <__aeabi_dmul+0x502>
 8001820:	0020      	movs	r0, r4
 8001822:	f000 fddf 	bl	80023e4 <__clzsi2>
 8001826:	0002      	movs	r2, r0
 8001828:	0003      	movs	r3, r0
 800182a:	3a0b      	subs	r2, #11
 800182c:	201d      	movs	r0, #29
 800182e:	1a82      	subs	r2, r0, r2
 8001830:	0030      	movs	r0, r6
 8001832:	0019      	movs	r1, r3
 8001834:	40d0      	lsrs	r0, r2
 8001836:	3908      	subs	r1, #8
 8001838:	408c      	lsls	r4, r1
 800183a:	0002      	movs	r2, r0
 800183c:	4322      	orrs	r2, r4
 800183e:	0034      	movs	r4, r6
 8001840:	408c      	lsls	r4, r1
 8001842:	4659      	mov	r1, fp
 8001844:	1acb      	subs	r3, r1, r3
 8001846:	4986      	ldr	r1, [pc, #536]	@ (8001a60 <__aeabi_dmul+0x5bc>)
 8001848:	468b      	mov	fp, r1
 800184a:	449b      	add	fp, r3
 800184c:	2d0a      	cmp	r5, #10
 800184e:	dd00      	ble.n	8001852 <__aeabi_dmul+0x3ae>
 8001850:	e6a4      	b.n	800159c <__aeabi_dmul+0xf8>
 8001852:	4649      	mov	r1, r9
 8001854:	9b00      	ldr	r3, [sp, #0]
 8001856:	9401      	str	r4, [sp, #4]
 8001858:	4059      	eors	r1, r3
 800185a:	b2cb      	uxtb	r3, r1
 800185c:	0014      	movs	r4, r2
 800185e:	2000      	movs	r0, #0
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	2d02      	cmp	r5, #2
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x3c4>
 8001866:	e667      	b.n	8001538 <__aeabi_dmul+0x94>
 8001868:	e6fb      	b.n	8001662 <__aeabi_dmul+0x1be>
 800186a:	4653      	mov	r3, sl
 800186c:	4303      	orrs	r3, r0
 800186e:	4698      	mov	r8, r3
 8001870:	d03c      	beq.n	80018ec <__aeabi_dmul+0x448>
 8001872:	4653      	mov	r3, sl
 8001874:	2b00      	cmp	r3, #0
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0x3d6>
 8001878:	e0a3      	b.n	80019c2 <__aeabi_dmul+0x51e>
 800187a:	4650      	mov	r0, sl
 800187c:	f000 fdb2 	bl	80023e4 <__clzsi2>
 8001880:	230b      	movs	r3, #11
 8001882:	425b      	negs	r3, r3
 8001884:	469c      	mov	ip, r3
 8001886:	0002      	movs	r2, r0
 8001888:	4484      	add	ip, r0
 800188a:	0011      	movs	r1, r2
 800188c:	4650      	mov	r0, sl
 800188e:	3908      	subs	r1, #8
 8001890:	4088      	lsls	r0, r1
 8001892:	231d      	movs	r3, #29
 8001894:	4680      	mov	r8, r0
 8001896:	4660      	mov	r0, ip
 8001898:	1a1b      	subs	r3, r3, r0
 800189a:	0020      	movs	r0, r4
 800189c:	40d8      	lsrs	r0, r3
 800189e:	0003      	movs	r3, r0
 80018a0:	4640      	mov	r0, r8
 80018a2:	4303      	orrs	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	0023      	movs	r3, r4
 80018a8:	408b      	lsls	r3, r1
 80018aa:	4698      	mov	r8, r3
 80018ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <__aeabi_dmul+0x5bc>)
 80018ae:	2500      	movs	r5, #0
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	469b      	mov	fp, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	e61a      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018ba:	2d0f      	cmp	r5, #15
 80018bc:	d000      	beq.n	80018c0 <__aeabi_dmul+0x41c>
 80018be:	e0c9      	b.n	8001a54 <__aeabi_dmul+0x5b0>
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	4652      	mov	r2, sl
 80018c4:	031b      	lsls	r3, r3, #12
 80018c6:	421a      	tst	r2, r3
 80018c8:	d002      	beq.n	80018d0 <__aeabi_dmul+0x42c>
 80018ca:	421c      	tst	r4, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dmul+0x42c>
 80018ce:	e092      	b.n	80019f6 <__aeabi_dmul+0x552>
 80018d0:	2480      	movs	r4, #128	@ 0x80
 80018d2:	4653      	mov	r3, sl
 80018d4:	0324      	lsls	r4, r4, #12
 80018d6:	431c      	orrs	r4, r3
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	4642      	mov	r2, r8
 80018dc:	0b24      	lsrs	r4, r4, #12
 80018de:	e63e      	b.n	800155e <__aeabi_dmul+0xba>
 80018e0:	469b      	mov	fp, r3
 80018e2:	2303      	movs	r3, #3
 80018e4:	4680      	mov	r8, r0
 80018e6:	250c      	movs	r5, #12
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	e601      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018ec:	2300      	movs	r3, #0
 80018ee:	469a      	mov	sl, r3
 80018f0:	469b      	mov	fp, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	2504      	movs	r5, #4
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	e5fa      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018fa:	2101      	movs	r1, #1
 80018fc:	430d      	orrs	r5, r1
 80018fe:	2d0a      	cmp	r5, #10
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x460>
 8001902:	e64b      	b.n	800159c <__aeabi_dmul+0xf8>
 8001904:	4649      	mov	r1, r9
 8001906:	9800      	ldr	r0, [sp, #0]
 8001908:	4041      	eors	r1, r0
 800190a:	b2c9      	uxtb	r1, r1
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	2d02      	cmp	r5, #2
 8001910:	dc00      	bgt.n	8001914 <__aeabi_dmul+0x470>
 8001912:	e096      	b.n	8001a42 <__aeabi_dmul+0x59e>
 8001914:	2300      	movs	r3, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2001      	movs	r0, #1
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	e60c      	b.n	8001538 <__aeabi_dmul+0x94>
 800191e:	4649      	mov	r1, r9
 8001920:	2302      	movs	r3, #2
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	432b      	orrs	r3, r5
 8001926:	4051      	eors	r1, r2
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	9203      	str	r2, [sp, #12]
 800192c:	2b0a      	cmp	r3, #10
 800192e:	dd00      	ble.n	8001932 <__aeabi_dmul+0x48e>
 8001930:	e634      	b.n	800159c <__aeabi_dmul+0xf8>
 8001932:	2d00      	cmp	r5, #0
 8001934:	d157      	bne.n	80019e6 <__aeabi_dmul+0x542>
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	4699      	mov	r9, r3
 800193a:	2400      	movs	r4, #0
 800193c:	2200      	movs	r2, #0
 800193e:	4b49      	ldr	r3, [pc, #292]	@ (8001a64 <__aeabi_dmul+0x5c0>)
 8001940:	e60e      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001942:	4658      	mov	r0, fp
 8001944:	2101      	movs	r1, #1
 8001946:	1ac9      	subs	r1, r1, r3
 8001948:	2938      	cmp	r1, #56	@ 0x38
 800194a:	dd00      	ble.n	800194e <__aeabi_dmul+0x4aa>
 800194c:	e62f      	b.n	80015ae <__aeabi_dmul+0x10a>
 800194e:	291f      	cmp	r1, #31
 8001950:	dd56      	ble.n	8001a00 <__aeabi_dmul+0x55c>
 8001952:	221f      	movs	r2, #31
 8001954:	4654      	mov	r4, sl
 8001956:	4252      	negs	r2, r2
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	40dc      	lsrs	r4, r3
 800195c:	2920      	cmp	r1, #32
 800195e:	d007      	beq.n	8001970 <__aeabi_dmul+0x4cc>
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <__aeabi_dmul+0x5c4>)
 8001962:	4642      	mov	r2, r8
 8001964:	469c      	mov	ip, r3
 8001966:	4653      	mov	r3, sl
 8001968:	4460      	add	r0, ip
 800196a:	4083      	lsls	r3, r0
 800196c:	431a      	orrs	r2, r3
 800196e:	4690      	mov	r8, r2
 8001970:	4642      	mov	r2, r8
 8001972:	2107      	movs	r1, #7
 8001974:	1e53      	subs	r3, r2, #1
 8001976:	419a      	sbcs	r2, r3
 8001978:	000b      	movs	r3, r1
 800197a:	4322      	orrs	r2, r4
 800197c:	4013      	ands	r3, r2
 800197e:	2400      	movs	r4, #0
 8001980:	4211      	tst	r1, r2
 8001982:	d009      	beq.n	8001998 <__aeabi_dmul+0x4f4>
 8001984:	230f      	movs	r3, #15
 8001986:	4013      	ands	r3, r2
 8001988:	2b04      	cmp	r3, #4
 800198a:	d05d      	beq.n	8001a48 <__aeabi_dmul+0x5a4>
 800198c:	1d11      	adds	r1, r2, #4
 800198e:	4291      	cmp	r1, r2
 8001990:	419b      	sbcs	r3, r3
 8001992:	000a      	movs	r2, r1
 8001994:	425b      	negs	r3, r3
 8001996:	075b      	lsls	r3, r3, #29
 8001998:	08d2      	lsrs	r2, r2, #3
 800199a:	431a      	orrs	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	e5df      	b.n	8001560 <__aeabi_dmul+0xbc>
 80019a0:	9b03      	ldr	r3, [sp, #12]
 80019a2:	4699      	mov	r9, r3
 80019a4:	e5fa      	b.n	800159c <__aeabi_dmul+0xf8>
 80019a6:	9801      	ldr	r0, [sp, #4]
 80019a8:	f000 fd1c 	bl	80023e4 <__clzsi2>
 80019ac:	0002      	movs	r2, r0
 80019ae:	0003      	movs	r3, r0
 80019b0:	3215      	adds	r2, #21
 80019b2:	3320      	adds	r3, #32
 80019b4:	2a1c      	cmp	r2, #28
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dmul+0x516>
 80019b8:	e738      	b.n	800182c <__aeabi_dmul+0x388>
 80019ba:	9a01      	ldr	r2, [sp, #4]
 80019bc:	3808      	subs	r0, #8
 80019be:	4082      	lsls	r2, r0
 80019c0:	e73f      	b.n	8001842 <__aeabi_dmul+0x39e>
 80019c2:	f000 fd0f 	bl	80023e4 <__clzsi2>
 80019c6:	2315      	movs	r3, #21
 80019c8:	469c      	mov	ip, r3
 80019ca:	4484      	add	ip, r0
 80019cc:	0002      	movs	r2, r0
 80019ce:	4663      	mov	r3, ip
 80019d0:	3220      	adds	r2, #32
 80019d2:	2b1c      	cmp	r3, #28
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x534>
 80019d6:	e758      	b.n	800188a <__aeabi_dmul+0x3e6>
 80019d8:	2300      	movs	r3, #0
 80019da:	4698      	mov	r8, r3
 80019dc:	0023      	movs	r3, r4
 80019de:	3808      	subs	r0, #8
 80019e0:	4083      	lsls	r3, r0
 80019e2:	469a      	mov	sl, r3
 80019e4:	e762      	b.n	80018ac <__aeabi_dmul+0x408>
 80019e6:	001d      	movs	r5, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	2400      	movs	r4, #0
 80019ec:	2002      	movs	r0, #2
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	e5a2      	b.n	8001538 <__aeabi_dmul+0x94>
 80019f2:	9002      	str	r0, [sp, #8]
 80019f4:	e632      	b.n	800165c <__aeabi_dmul+0x1b8>
 80019f6:	431c      	orrs	r4, r3
 80019f8:	9b00      	ldr	r3, [sp, #0]
 80019fa:	9a01      	ldr	r2, [sp, #4]
 80019fc:	4699      	mov	r9, r3
 80019fe:	e5ae      	b.n	800155e <__aeabi_dmul+0xba>
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <__aeabi_dmul+0x5c8>)
 8001a02:	4652      	mov	r2, sl
 8001a04:	18c3      	adds	r3, r0, r3
 8001a06:	4640      	mov	r0, r8
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	40c8      	lsrs	r0, r1
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4098      	lsls	r0, r3
 8001a12:	0003      	movs	r3, r0
 8001a14:	1e58      	subs	r0, r3, #1
 8001a16:	4183      	sbcs	r3, r0
 8001a18:	4654      	mov	r4, sl
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	40cc      	lsrs	r4, r1
 8001a1e:	0753      	lsls	r3, r2, #29
 8001a20:	d009      	beq.n	8001a36 <__aeabi_dmul+0x592>
 8001a22:	230f      	movs	r3, #15
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d005      	beq.n	8001a36 <__aeabi_dmul+0x592>
 8001a2a:	1d13      	adds	r3, r2, #4
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	4192      	sbcs	r2, r2
 8001a30:	4252      	negs	r2, r2
 8001a32:	18a4      	adds	r4, r4, r2
 8001a34:	001a      	movs	r2, r3
 8001a36:	0223      	lsls	r3, r4, #8
 8001a38:	d508      	bpl.n	8001a4c <__aeabi_dmul+0x5a8>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	e58e      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001a42:	4689      	mov	r9, r1
 8001a44:	2400      	movs	r4, #0
 8001a46:	e58b      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e7a5      	b.n	8001998 <__aeabi_dmul+0x4f4>
 8001a4c:	0763      	lsls	r3, r4, #29
 8001a4e:	0264      	lsls	r4, r4, #9
 8001a50:	0b24      	lsrs	r4, r4, #12
 8001a52:	e7a1      	b.n	8001998 <__aeabi_dmul+0x4f4>
 8001a54:	9b00      	ldr	r3, [sp, #0]
 8001a56:	46a2      	mov	sl, r4
 8001a58:	4699      	mov	r9, r3
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	e737      	b.n	80018d0 <__aeabi_dmul+0x42c>
 8001a60:	fffffc0d 	.word	0xfffffc0d
 8001a64:	000007ff 	.word	0x000007ff
 8001a68:	0000043e 	.word	0x0000043e
 8001a6c:	0000041e 	.word	0x0000041e

08001a70 <__aeabi_dsub>:
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	4657      	mov	r7, sl
 8001a74:	464e      	mov	r6, r9
 8001a76:	4645      	mov	r5, r8
 8001a78:	46de      	mov	lr, fp
 8001a7a:	b5e0      	push	{r5, r6, r7, lr}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	9000      	str	r0, [sp, #0]
 8001a80:	9101      	str	r1, [sp, #4]
 8001a82:	030c      	lsls	r4, r1, #12
 8001a84:	004d      	lsls	r5, r1, #1
 8001a86:	0fce      	lsrs	r6, r1, #31
 8001a88:	0a61      	lsrs	r1, r4, #9
 8001a8a:	9c00      	ldr	r4, [sp, #0]
 8001a8c:	005f      	lsls	r7, r3, #1
 8001a8e:	0f64      	lsrs	r4, r4, #29
 8001a90:	430c      	orrs	r4, r1
 8001a92:	9900      	ldr	r1, [sp, #0]
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	00c8      	lsls	r0, r1, #3
 8001a9a:	0319      	lsls	r1, r3, #12
 8001a9c:	0d7b      	lsrs	r3, r7, #21
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001aa4:	0fdb      	lsrs	r3, r3, #31
 8001aa6:	469c      	mov	ip, r3
 8001aa8:	0a4b      	lsrs	r3, r1, #9
 8001aaa:	9900      	ldr	r1, [sp, #0]
 8001aac:	4680      	mov	r8, r0
 8001aae:	0f49      	lsrs	r1, r1, #29
 8001ab0:	4319      	orrs	r1, r3
 8001ab2:	9b00      	ldr	r3, [sp, #0]
 8001ab4:	468b      	mov	fp, r1
 8001ab6:	00da      	lsls	r2, r3, #3
 8001ab8:	4692      	mov	sl, r2
 8001aba:	0d6d      	lsrs	r5, r5, #21
 8001abc:	45b9      	cmp	r9, r7
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x52>
 8001ac0:	e0bf      	b.n	8001c42 <__aeabi_dsub+0x1d2>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	4661      	mov	r1, ip
 8001ac6:	4059      	eors	r1, r3
 8001ac8:	464b      	mov	r3, r9
 8001aca:	468c      	mov	ip, r1
 8001acc:	1aeb      	subs	r3, r5, r3
 8001ace:	428e      	cmp	r6, r1
 8001ad0:	d075      	beq.n	8001bbe <__aeabi_dsub+0x14e>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	dc00      	bgt.n	8001ad8 <__aeabi_dsub+0x68>
 8001ad6:	e2a3      	b.n	8002020 <__aeabi_dsub+0x5b0>
 8001ad8:	4649      	mov	r1, r9
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x70>
 8001ade:	e0ce      	b.n	8001c7e <__aeabi_dsub+0x20e>
 8001ae0:	42bd      	cmp	r5, r7
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x76>
 8001ae4:	e200      	b.n	8001ee8 <__aeabi_dsub+0x478>
 8001ae6:	2701      	movs	r7, #1
 8001ae8:	2b38      	cmp	r3, #56	@ 0x38
 8001aea:	dc19      	bgt.n	8001b20 <__aeabi_dsub+0xb0>
 8001aec:	2780      	movs	r7, #128	@ 0x80
 8001aee:	4659      	mov	r1, fp
 8001af0:	043f      	lsls	r7, r7, #16
 8001af2:	4339      	orrs	r1, r7
 8001af4:	468b      	mov	fp, r1
 8001af6:	2b1f      	cmp	r3, #31
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dsub+0x8c>
 8001afa:	e1fa      	b.n	8001ef2 <__aeabi_dsub+0x482>
 8001afc:	2720      	movs	r7, #32
 8001afe:	1af9      	subs	r1, r7, r3
 8001b00:	468c      	mov	ip, r1
 8001b02:	4659      	mov	r1, fp
 8001b04:	4667      	mov	r7, ip
 8001b06:	40b9      	lsls	r1, r7
 8001b08:	000f      	movs	r7, r1
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	40d9      	lsrs	r1, r3
 8001b0e:	430f      	orrs	r7, r1
 8001b10:	4661      	mov	r1, ip
 8001b12:	408a      	lsls	r2, r1
 8001b14:	1e51      	subs	r1, r2, #1
 8001b16:	418a      	sbcs	r2, r1
 8001b18:	4659      	mov	r1, fp
 8001b1a:	40d9      	lsrs	r1, r3
 8001b1c:	4317      	orrs	r7, r2
 8001b1e:	1a64      	subs	r4, r4, r1
 8001b20:	1bc7      	subs	r7, r0, r7
 8001b22:	42b8      	cmp	r0, r7
 8001b24:	4180      	sbcs	r0, r0
 8001b26:	4240      	negs	r0, r0
 8001b28:	1a24      	subs	r4, r4, r0
 8001b2a:	0223      	lsls	r3, r4, #8
 8001b2c:	d400      	bmi.n	8001b30 <__aeabi_dsub+0xc0>
 8001b2e:	e140      	b.n	8001db2 <__aeabi_dsub+0x342>
 8001b30:	0264      	lsls	r4, r4, #9
 8001b32:	0a64      	lsrs	r4, r4, #9
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0xca>
 8001b38:	e154      	b.n	8001de4 <__aeabi_dsub+0x374>
 8001b3a:	0020      	movs	r0, r4
 8001b3c:	f000 fc52 	bl	80023e4 <__clzsi2>
 8001b40:	0003      	movs	r3, r0
 8001b42:	3b08      	subs	r3, #8
 8001b44:	2120      	movs	r1, #32
 8001b46:	0038      	movs	r0, r7
 8001b48:	1aca      	subs	r2, r1, r3
 8001b4a:	40d0      	lsrs	r0, r2
 8001b4c:	409c      	lsls	r4, r3
 8001b4e:	0002      	movs	r2, r0
 8001b50:	409f      	lsls	r7, r3
 8001b52:	4322      	orrs	r2, r4
 8001b54:	429d      	cmp	r5, r3
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dsub+0xea>
 8001b58:	e1a6      	b.n	8001ea8 <__aeabi_dsub+0x438>
 8001b5a:	1b58      	subs	r0, r3, r5
 8001b5c:	3001      	adds	r0, #1
 8001b5e:	1a09      	subs	r1, r1, r0
 8001b60:	003c      	movs	r4, r7
 8001b62:	408f      	lsls	r7, r1
 8001b64:	40c4      	lsrs	r4, r0
 8001b66:	1e7b      	subs	r3, r7, #1
 8001b68:	419f      	sbcs	r7, r3
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	408b      	lsls	r3, r1
 8001b6e:	4327      	orrs	r7, r4
 8001b70:	431f      	orrs	r7, r3
 8001b72:	40c2      	lsrs	r2, r0
 8001b74:	003b      	movs	r3, r7
 8001b76:	0014      	movs	r4, r2
 8001b78:	2500      	movs	r5, #0
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x110>
 8001b7e:	e1f7      	b.n	8001f70 <__aeabi_dsub+0x500>
 8001b80:	077b      	lsls	r3, r7, #29
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x116>
 8001b84:	e377      	b.n	8002276 <__aeabi_dsub+0x806>
 8001b86:	230f      	movs	r3, #15
 8001b88:	0038      	movs	r0, r7
 8001b8a:	403b      	ands	r3, r7
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d004      	beq.n	8001b9a <__aeabi_dsub+0x12a>
 8001b90:	1d38      	adds	r0, r7, #4
 8001b92:	42b8      	cmp	r0, r7
 8001b94:	41bf      	sbcs	r7, r7
 8001b96:	427f      	negs	r7, r7
 8001b98:	19e4      	adds	r4, r4, r7
 8001b9a:	0223      	lsls	r3, r4, #8
 8001b9c:	d400      	bmi.n	8001ba0 <__aeabi_dsub+0x130>
 8001b9e:	e368      	b.n	8002272 <__aeabi_dsub+0x802>
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001ba2:	3501      	adds	r5, #1
 8001ba4:	429d      	cmp	r5, r3
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x13a>
 8001ba8:	e0f4      	b.n	8001d94 <__aeabi_dsub+0x324>
 8001baa:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001bac:	056d      	lsls	r5, r5, #21
 8001bae:	401c      	ands	r4, r3
 8001bb0:	0d6d      	lsrs	r5, r5, #21
 8001bb2:	0767      	lsls	r7, r4, #29
 8001bb4:	08c0      	lsrs	r0, r0, #3
 8001bb6:	0264      	lsls	r4, r4, #9
 8001bb8:	4307      	orrs	r7, r0
 8001bba:	0b24      	lsrs	r4, r4, #12
 8001bbc:	e0ec      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dc00      	bgt.n	8001bc4 <__aeabi_dsub+0x154>
 8001bc2:	e329      	b.n	8002218 <__aeabi_dsub+0x7a8>
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	2900      	cmp	r1, #0
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_dsub+0x15c>
 8001bca:	e0d6      	b.n	8001d7a <__aeabi_dsub+0x30a>
 8001bcc:	4659      	mov	r1, fp
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x164>
 8001bd2:	e12e      	b.n	8001e32 <__aeabi_dsub+0x3c2>
 8001bd4:	1e59      	subs	r1, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x16c>
 8001bda:	e1e6      	b.n	8001faa <__aeabi_dsub+0x53a>
 8001bdc:	42bb      	cmp	r3, r7
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x172>
 8001be0:	e182      	b.n	8001ee8 <__aeabi_dsub+0x478>
 8001be2:	2701      	movs	r7, #1
 8001be4:	000b      	movs	r3, r1
 8001be6:	2938      	cmp	r1, #56	@ 0x38
 8001be8:	dc14      	bgt.n	8001c14 <__aeabi_dsub+0x1a4>
 8001bea:	2b1f      	cmp	r3, #31
 8001bec:	dd00      	ble.n	8001bf0 <__aeabi_dsub+0x180>
 8001bee:	e23c      	b.n	800206a <__aeabi_dsub+0x5fa>
 8001bf0:	2720      	movs	r7, #32
 8001bf2:	1af9      	subs	r1, r7, r3
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	4667      	mov	r7, ip
 8001bfa:	40b9      	lsls	r1, r7
 8001bfc:	000f      	movs	r7, r1
 8001bfe:	0011      	movs	r1, r2
 8001c00:	40d9      	lsrs	r1, r3
 8001c02:	430f      	orrs	r7, r1
 8001c04:	4661      	mov	r1, ip
 8001c06:	408a      	lsls	r2, r1
 8001c08:	1e51      	subs	r1, r2, #1
 8001c0a:	418a      	sbcs	r2, r1
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	40d9      	lsrs	r1, r3
 8001c10:	4317      	orrs	r7, r2
 8001c12:	1864      	adds	r4, r4, r1
 8001c14:	183f      	adds	r7, r7, r0
 8001c16:	4287      	cmp	r7, r0
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	4240      	negs	r0, r0
 8001c1c:	1824      	adds	r4, r4, r0
 8001c1e:	0223      	lsls	r3, r4, #8
 8001c20:	d400      	bmi.n	8001c24 <__aeabi_dsub+0x1b4>
 8001c22:	e0c6      	b.n	8001db2 <__aeabi_dsub+0x342>
 8001c24:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001c26:	3501      	adds	r5, #1
 8001c28:	429d      	cmp	r5, r3
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x1be>
 8001c2c:	e0b2      	b.n	8001d94 <__aeabi_dsub+0x324>
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4b69      	ldr	r3, [pc, #420]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001c32:	087a      	lsrs	r2, r7, #1
 8001c34:	401c      	ands	r4, r3
 8001c36:	4039      	ands	r1, r7
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	07e7      	lsls	r7, r4, #31
 8001c3c:	4317      	orrs	r7, r2
 8001c3e:	0864      	lsrs	r4, r4, #1
 8001c40:	e79e      	b.n	8001b80 <__aeabi_dsub+0x110>
 8001c42:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <__aeabi_dsub+0x36c>)
 8001c44:	4311      	orrs	r1, r2
 8001c46:	468a      	mov	sl, r1
 8001c48:	18eb      	adds	r3, r5, r3
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d028      	beq.n	8001ca0 <__aeabi_dsub+0x230>
 8001c4e:	4566      	cmp	r6, ip
 8001c50:	d02c      	beq.n	8001cac <__aeabi_dsub+0x23c>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d05b      	beq.n	8001d0e <__aeabi_dsub+0x29e>
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x1ec>
 8001c5a:	e12c      	b.n	8001eb6 <__aeabi_dsub+0x446>
 8001c5c:	465b      	mov	r3, fp
 8001c5e:	4666      	mov	r6, ip
 8001c60:	075f      	lsls	r7, r3, #29
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	4317      	orrs	r7, r2
 8001c66:	08dd      	lsrs	r5, r3, #3
 8001c68:	003b      	movs	r3, r7
 8001c6a:	432b      	orrs	r3, r5
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x200>
 8001c6e:	e0e2      	b.n	8001e36 <__aeabi_dsub+0x3c6>
 8001c70:	2480      	movs	r4, #128	@ 0x80
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	432c      	orrs	r4, r5
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	4d56      	ldr	r5, [pc, #344]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	e08c      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001c7e:	4659      	mov	r1, fp
 8001c80:	4311      	orrs	r1, r2
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x216>
 8001c84:	e0d5      	b.n	8001e32 <__aeabi_dsub+0x3c2>
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x21e>
 8001c8c:	e1b9      	b.n	8002002 <__aeabi_dsub+0x592>
 8001c8e:	42bb      	cmp	r3, r7
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x224>
 8001c92:	e1b1      	b.n	8001ff8 <__aeabi_dsub+0x588>
 8001c94:	2701      	movs	r7, #1
 8001c96:	000b      	movs	r3, r1
 8001c98:	2938      	cmp	r1, #56	@ 0x38
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dsub+0x22e>
 8001c9c:	e740      	b.n	8001b20 <__aeabi_dsub+0xb0>
 8001c9e:	e72a      	b.n	8001af6 <__aeabi_dsub+0x86>
 8001ca0:	4661      	mov	r1, ip
 8001ca2:	2701      	movs	r7, #1
 8001ca4:	4079      	eors	r1, r7
 8001ca6:	468c      	mov	ip, r1
 8001ca8:	4566      	cmp	r6, ip
 8001caa:	d1d2      	bne.n	8001c52 <__aeabi_dsub+0x1e2>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x242>
 8001cb0:	e0c5      	b.n	8001e3e <__aeabi_dsub+0x3ce>
 8001cb2:	2d00      	cmp	r5, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x248>
 8001cb6:	e155      	b.n	8001f64 <__aeabi_dsub+0x4f4>
 8001cb8:	464b      	mov	r3, r9
 8001cba:	0025      	movs	r5, r4
 8001cbc:	4305      	orrs	r5, r0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x252>
 8001cc0:	e212      	b.n	80020e8 <__aeabi_dsub+0x678>
 8001cc2:	1e59      	subs	r1, r3, #1
 8001cc4:	468c      	mov	ip, r1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x25c>
 8001cca:	e249      	b.n	8002160 <__aeabi_dsub+0x6f0>
 8001ccc:	4d41      	ldr	r5, [pc, #260]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001cce:	42ab      	cmp	r3, r5
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x264>
 8001cd2:	e28f      	b.n	80021f4 <__aeabi_dsub+0x784>
 8001cd4:	2701      	movs	r7, #1
 8001cd6:	2938      	cmp	r1, #56	@ 0x38
 8001cd8:	dc11      	bgt.n	8001cfe <__aeabi_dsub+0x28e>
 8001cda:	4663      	mov	r3, ip
 8001cdc:	2b1f      	cmp	r3, #31
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0x272>
 8001ce0:	e25b      	b.n	800219a <__aeabi_dsub+0x72a>
 8001ce2:	4661      	mov	r1, ip
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	0027      	movs	r7, r4
 8001ce8:	1a5b      	subs	r3, r3, r1
 8001cea:	0005      	movs	r5, r0
 8001cec:	4098      	lsls	r0, r3
 8001cee:	409f      	lsls	r7, r3
 8001cf0:	40cd      	lsrs	r5, r1
 8001cf2:	1e43      	subs	r3, r0, #1
 8001cf4:	4198      	sbcs	r0, r3
 8001cf6:	40cc      	lsrs	r4, r1
 8001cf8:	432f      	orrs	r7, r5
 8001cfa:	4307      	orrs	r7, r0
 8001cfc:	44a3      	add	fp, r4
 8001cfe:	18bf      	adds	r7, r7, r2
 8001d00:	4297      	cmp	r7, r2
 8001d02:	4192      	sbcs	r2, r2
 8001d04:	4252      	negs	r2, r2
 8001d06:	445a      	add	r2, fp
 8001d08:	0014      	movs	r4, r2
 8001d0a:	464d      	mov	r5, r9
 8001d0c:	e787      	b.n	8001c1e <__aeabi_dsub+0x1ae>
 8001d0e:	4f34      	ldr	r7, [pc, #208]	@ (8001de0 <__aeabi_dsub+0x370>)
 8001d10:	1c6b      	adds	r3, r5, #1
 8001d12:	423b      	tst	r3, r7
 8001d14:	d000      	beq.n	8001d18 <__aeabi_dsub+0x2a8>
 8001d16:	e0b6      	b.n	8001e86 <__aeabi_dsub+0x416>
 8001d18:	4659      	mov	r1, fp
 8001d1a:	0023      	movs	r3, r4
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	000f      	movs	r7, r1
 8001d20:	4303      	orrs	r3, r0
 8001d22:	2d00      	cmp	r5, #0
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dsub+0x2b8>
 8001d26:	e126      	b.n	8001f76 <__aeabi_dsub+0x506>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x2be>
 8001d2c:	e1c0      	b.n	80020b0 <__aeabi_dsub+0x640>
 8001d2e:	2900      	cmp	r1, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x2c4>
 8001d32:	e0a1      	b.n	8001e78 <__aeabi_dsub+0x408>
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	4698      	mov	r8, r3
 8001d38:	465b      	mov	r3, fp
 8001d3a:	4540      	cmp	r0, r8
 8001d3c:	41ad      	sbcs	r5, r5
 8001d3e:	1ae3      	subs	r3, r4, r3
 8001d40:	426d      	negs	r5, r5
 8001d42:	1b5b      	subs	r3, r3, r5
 8001d44:	2580      	movs	r5, #128	@ 0x80
 8001d46:	042d      	lsls	r5, r5, #16
 8001d48:	422b      	tst	r3, r5
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x2de>
 8001d4c:	e14b      	b.n	8001fe6 <__aeabi_dsub+0x576>
 8001d4e:	465b      	mov	r3, fp
 8001d50:	1a10      	subs	r0, r2, r0
 8001d52:	4282      	cmp	r2, r0
 8001d54:	4192      	sbcs	r2, r2
 8001d56:	1b1c      	subs	r4, r3, r4
 8001d58:	0007      	movs	r7, r0
 8001d5a:	2601      	movs	r6, #1
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	4252      	negs	r2, r2
 8001d60:	1aa4      	subs	r4, r4, r2
 8001d62:	4327      	orrs	r7, r4
 8001d64:	401e      	ands	r6, r3
 8001d66:	2f00      	cmp	r7, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x2fc>
 8001d6a:	e142      	b.n	8001ff2 <__aeabi_dsub+0x582>
 8001d6c:	422c      	tst	r4, r5
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x302>
 8001d70:	e26d      	b.n	800224e <__aeabi_dsub+0x7de>
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001d74:	2501      	movs	r5, #1
 8001d76:	401c      	ands	r4, r3
 8001d78:	e71b      	b.n	8001bb2 <__aeabi_dsub+0x142>
 8001d7a:	42bd      	cmp	r5, r7
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x310>
 8001d7e:	e13b      	b.n	8001ff8 <__aeabi_dsub+0x588>
 8001d80:	2701      	movs	r7, #1
 8001d82:	2b38      	cmp	r3, #56	@ 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x318>
 8001d86:	e745      	b.n	8001c14 <__aeabi_dsub+0x1a4>
 8001d88:	2780      	movs	r7, #128	@ 0x80
 8001d8a:	4659      	mov	r1, fp
 8001d8c:	043f      	lsls	r7, r7, #16
 8001d8e:	4339      	orrs	r1, r7
 8001d90:	468b      	mov	fp, r1
 8001d92:	e72a      	b.n	8001bea <__aeabi_dsub+0x17a>
 8001d94:	2400      	movs	r4, #0
 8001d96:	2700      	movs	r7, #0
 8001d98:	052d      	lsls	r5, r5, #20
 8001d9a:	4325      	orrs	r5, r4
 8001d9c:	07f6      	lsls	r6, r6, #31
 8001d9e:	4335      	orrs	r5, r6
 8001da0:	0038      	movs	r0, r7
 8001da2:	0029      	movs	r1, r5
 8001da4:	b003      	add	sp, #12
 8001da6:	bcf0      	pop	{r4, r5, r6, r7}
 8001da8:	46bb      	mov	fp, r7
 8001daa:	46b2      	mov	sl, r6
 8001dac:	46a9      	mov	r9, r5
 8001dae:	46a0      	mov	r8, r4
 8001db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db2:	077b      	lsls	r3, r7, #29
 8001db4:	d004      	beq.n	8001dc0 <__aeabi_dsub+0x350>
 8001db6:	230f      	movs	r3, #15
 8001db8:	403b      	ands	r3, r7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dsub+0x350>
 8001dbe:	e6e7      	b.n	8001b90 <__aeabi_dsub+0x120>
 8001dc0:	002b      	movs	r3, r5
 8001dc2:	08f8      	lsrs	r0, r7, #3
 8001dc4:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001dc6:	0767      	lsls	r7, r4, #29
 8001dc8:	4307      	orrs	r7, r0
 8001dca:	08e5      	lsrs	r5, r4, #3
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x362>
 8001dd0:	e74a      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001dd2:	e0a5      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	ff7fffff 	.word	0xff7fffff
 8001ddc:	fffff801 	.word	0xfffff801
 8001de0:	000007fe 	.word	0x000007fe
 8001de4:	0038      	movs	r0, r7
 8001de6:	f000 fafd 	bl	80023e4 <__clzsi2>
 8001dea:	0003      	movs	r3, r0
 8001dec:	3318      	adds	r3, #24
 8001dee:	2b1f      	cmp	r3, #31
 8001df0:	dc00      	bgt.n	8001df4 <__aeabi_dsub+0x384>
 8001df2:	e6a7      	b.n	8001b44 <__aeabi_dsub+0xd4>
 8001df4:	003a      	movs	r2, r7
 8001df6:	3808      	subs	r0, #8
 8001df8:	4082      	lsls	r2, r0
 8001dfa:	429d      	cmp	r5, r3
 8001dfc:	dd00      	ble.n	8001e00 <__aeabi_dsub+0x390>
 8001dfe:	e08a      	b.n	8001f16 <__aeabi_dsub+0x4a6>
 8001e00:	1b5b      	subs	r3, r3, r5
 8001e02:	1c58      	adds	r0, r3, #1
 8001e04:	281f      	cmp	r0, #31
 8001e06:	dc00      	bgt.n	8001e0a <__aeabi_dsub+0x39a>
 8001e08:	e1d8      	b.n	80021bc <__aeabi_dsub+0x74c>
 8001e0a:	0017      	movs	r7, r2
 8001e0c:	3b1f      	subs	r3, #31
 8001e0e:	40df      	lsrs	r7, r3
 8001e10:	2820      	cmp	r0, #32
 8001e12:	d005      	beq.n	8001e20 <__aeabi_dsub+0x3b0>
 8001e14:	2340      	movs	r3, #64	@ 0x40
 8001e16:	1a1b      	subs	r3, r3, r0
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	1e53      	subs	r3, r2, #1
 8001e1c:	419a      	sbcs	r2, r3
 8001e1e:	4317      	orrs	r7, r2
 8001e20:	2500      	movs	r5, #0
 8001e22:	2f00      	cmp	r7, #0
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x3b8>
 8001e26:	e0e5      	b.n	8001ff4 <__aeabi_dsub+0x584>
 8001e28:	077b      	lsls	r3, r7, #29
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x3be>
 8001e2c:	e6ab      	b.n	8001b86 <__aeabi_dsub+0x116>
 8001e2e:	002c      	movs	r4, r5
 8001e30:	e7c6      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001e32:	08c0      	lsrs	r0, r0, #3
 8001e34:	e7c6      	b.n	8001dc4 <__aeabi_dsub+0x354>
 8001e36:	2700      	movs	r7, #0
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4dd1      	ldr	r5, [pc, #836]	@ (8002180 <__aeabi_dsub+0x710>)
 8001e3c:	e7ac      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001e3e:	4fd1      	ldr	r7, [pc, #836]	@ (8002184 <__aeabi_dsub+0x714>)
 8001e40:	1c6b      	adds	r3, r5, #1
 8001e42:	423b      	tst	r3, r7
 8001e44:	d171      	bne.n	8001f2a <__aeabi_dsub+0x4ba>
 8001e46:	0023      	movs	r3, r4
 8001e48:	4303      	orrs	r3, r0
 8001e4a:	2d00      	cmp	r5, #0
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_dsub+0x3e0>
 8001e4e:	e14e      	b.n	80020ee <__aeabi_dsub+0x67e>
 8001e50:	4657      	mov	r7, sl
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x3e8>
 8001e56:	e1b5      	b.n	80021c4 <__aeabi_dsub+0x754>
 8001e58:	2f00      	cmp	r7, #0
 8001e5a:	d00d      	beq.n	8001e78 <__aeabi_dsub+0x408>
 8001e5c:	1883      	adds	r3, r0, r2
 8001e5e:	4283      	cmp	r3, r0
 8001e60:	4180      	sbcs	r0, r0
 8001e62:	445c      	add	r4, fp
 8001e64:	4240      	negs	r0, r0
 8001e66:	1824      	adds	r4, r4, r0
 8001e68:	0222      	lsls	r2, r4, #8
 8001e6a:	d500      	bpl.n	8001e6e <__aeabi_dsub+0x3fe>
 8001e6c:	e1c8      	b.n	8002200 <__aeabi_dsub+0x790>
 8001e6e:	001f      	movs	r7, r3
 8001e70:	4698      	mov	r8, r3
 8001e72:	4327      	orrs	r7, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x408>
 8001e76:	e0bc      	b.n	8001ff2 <__aeabi_dsub+0x582>
 8001e78:	4643      	mov	r3, r8
 8001e7a:	0767      	lsls	r7, r4, #29
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	431f      	orrs	r7, r3
 8001e80:	08e5      	lsrs	r5, r4, #3
 8001e82:	2300      	movs	r3, #0
 8001e84:	e04c      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001e86:	1a83      	subs	r3, r0, r2
 8001e88:	4698      	mov	r8, r3
 8001e8a:	465b      	mov	r3, fp
 8001e8c:	4540      	cmp	r0, r8
 8001e8e:	41bf      	sbcs	r7, r7
 8001e90:	1ae3      	subs	r3, r4, r3
 8001e92:	427f      	negs	r7, r7
 8001e94:	1bdb      	subs	r3, r3, r7
 8001e96:	021f      	lsls	r7, r3, #8
 8001e98:	d47c      	bmi.n	8001f94 <__aeabi_dsub+0x524>
 8001e9a:	4647      	mov	r7, r8
 8001e9c:	431f      	orrs	r7, r3
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_dsub+0x432>
 8001ea0:	e0a6      	b.n	8001ff0 <__aeabi_dsub+0x580>
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	4647      	mov	r7, r8
 8001ea6:	e645      	b.n	8001b34 <__aeabi_dsub+0xc4>
 8001ea8:	4cb7      	ldr	r4, [pc, #732]	@ (8002188 <__aeabi_dsub+0x718>)
 8001eaa:	1aed      	subs	r5, r5, r3
 8001eac:	4014      	ands	r4, r2
 8001eae:	077b      	lsls	r3, r7, #29
 8001eb0:	d000      	beq.n	8001eb4 <__aeabi_dsub+0x444>
 8001eb2:	e780      	b.n	8001db6 <__aeabi_dsub+0x346>
 8001eb4:	e784      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	0025      	movs	r5, r4
 8001eba:	4305      	orrs	r5, r0
 8001ebc:	d066      	beq.n	8001f8c <__aeabi_dsub+0x51c>
 8001ebe:	1e5f      	subs	r7, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x456>
 8001ec4:	e0fc      	b.n	80020c0 <__aeabi_dsub+0x650>
 8001ec6:	4dae      	ldr	r5, [pc, #696]	@ (8002180 <__aeabi_dsub+0x710>)
 8001ec8:	42ab      	cmp	r3, r5
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x45e>
 8001ecc:	e15e      	b.n	800218c <__aeabi_dsub+0x71c>
 8001ece:	4666      	mov	r6, ip
 8001ed0:	2f38      	cmp	r7, #56	@ 0x38
 8001ed2:	dc00      	bgt.n	8001ed6 <__aeabi_dsub+0x466>
 8001ed4:	e0b4      	b.n	8002040 <__aeabi_dsub+0x5d0>
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	1a17      	subs	r7, r2, r0
 8001eda:	42ba      	cmp	r2, r7
 8001edc:	4192      	sbcs	r2, r2
 8001ede:	465b      	mov	r3, fp
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	464d      	mov	r5, r9
 8001ee4:	1a9c      	subs	r4, r3, r2
 8001ee6:	e620      	b.n	8001b2a <__aeabi_dsub+0xba>
 8001ee8:	0767      	lsls	r7, r4, #29
 8001eea:	08c0      	lsrs	r0, r0, #3
 8001eec:	4307      	orrs	r7, r0
 8001eee:	08e5      	lsrs	r5, r4, #3
 8001ef0:	e6ba      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001ef2:	001f      	movs	r7, r3
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	3f20      	subs	r7, #32
 8001ef8:	40f9      	lsrs	r1, r7
 8001efa:	000f      	movs	r7, r1
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x49c>
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	1acb      	subs	r3, r1, r3
 8001f04:	4659      	mov	r1, fp
 8001f06:	4099      	lsls	r1, r3
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	4692      	mov	sl, r2
 8001f0c:	4653      	mov	r3, sl
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	4193      	sbcs	r3, r2
 8001f12:	431f      	orrs	r7, r3
 8001f14:	e604      	b.n	8001b20 <__aeabi_dsub+0xb0>
 8001f16:	1aeb      	subs	r3, r5, r3
 8001f18:	4d9b      	ldr	r5, [pc, #620]	@ (8002188 <__aeabi_dsub+0x718>)
 8001f1a:	4015      	ands	r5, r2
 8001f1c:	076f      	lsls	r7, r5, #29
 8001f1e:	08ed      	lsrs	r5, r5, #3
 8001f20:	032c      	lsls	r4, r5, #12
 8001f22:	055d      	lsls	r5, r3, #21
 8001f24:	0b24      	lsrs	r4, r4, #12
 8001f26:	0d6d      	lsrs	r5, r5, #21
 8001f28:	e736      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f2a:	4d95      	ldr	r5, [pc, #596]	@ (8002180 <__aeabi_dsub+0x710>)
 8001f2c:	42ab      	cmp	r3, r5
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x4c2>
 8001f30:	e0d6      	b.n	80020e0 <__aeabi_dsub+0x670>
 8001f32:	1882      	adds	r2, r0, r2
 8001f34:	0021      	movs	r1, r4
 8001f36:	4282      	cmp	r2, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	4459      	add	r1, fp
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	1808      	adds	r0, r1, r0
 8001f40:	07c7      	lsls	r7, r0, #31
 8001f42:	0852      	lsrs	r2, r2, #1
 8001f44:	4317      	orrs	r7, r2
 8001f46:	0844      	lsrs	r4, r0, #1
 8001f48:	0752      	lsls	r2, r2, #29
 8001f4a:	d400      	bmi.n	8001f4e <__aeabi_dsub+0x4de>
 8001f4c:	e185      	b.n	800225a <__aeabi_dsub+0x7ea>
 8001f4e:	220f      	movs	r2, #15
 8001f50:	001d      	movs	r5, r3
 8001f52:	403a      	ands	r2, r7
 8001f54:	2a04      	cmp	r2, #4
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x4ea>
 8001f58:	e61a      	b.n	8001b90 <__aeabi_dsub+0x120>
 8001f5a:	08ff      	lsrs	r7, r7, #3
 8001f5c:	0764      	lsls	r4, r4, #29
 8001f5e:	4327      	orrs	r7, r4
 8001f60:	0905      	lsrs	r5, r0, #4
 8001f62:	e7dd      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001f64:	465b      	mov	r3, fp
 8001f66:	08d2      	lsrs	r2, r2, #3
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	4317      	orrs	r7, r2
 8001f6c:	08dd      	lsrs	r5, r3, #3
 8001f6e:	e67b      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001f70:	2700      	movs	r7, #0
 8001f72:	2400      	movs	r4, #0
 8001f74:	e710      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dsub+0x50c>
 8001f7a:	e0d6      	b.n	800212a <__aeabi_dsub+0x6ba>
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x512>
 8001f80:	e12f      	b.n	80021e2 <__aeabi_dsub+0x772>
 8001f82:	2480      	movs	r4, #128	@ 0x80
 8001f84:	2600      	movs	r6, #0
 8001f86:	4d7e      	ldr	r5, [pc, #504]	@ (8002180 <__aeabi_dsub+0x710>)
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	e705      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f8c:	4666      	mov	r6, ip
 8001f8e:	465c      	mov	r4, fp
 8001f90:	08d0      	lsrs	r0, r2, #3
 8001f92:	e717      	b.n	8001dc4 <__aeabi_dsub+0x354>
 8001f94:	465b      	mov	r3, fp
 8001f96:	1a17      	subs	r7, r2, r0
 8001f98:	42ba      	cmp	r2, r7
 8001f9a:	4192      	sbcs	r2, r2
 8001f9c:	1b1c      	subs	r4, r3, r4
 8001f9e:	2601      	movs	r6, #1
 8001fa0:	4663      	mov	r3, ip
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	1aa4      	subs	r4, r4, r2
 8001fa6:	401e      	ands	r6, r3
 8001fa8:	e5c4      	b.n	8001b34 <__aeabi_dsub+0xc4>
 8001faa:	1883      	adds	r3, r0, r2
 8001fac:	4283      	cmp	r3, r0
 8001fae:	4180      	sbcs	r0, r0
 8001fb0:	445c      	add	r4, fp
 8001fb2:	4240      	negs	r0, r0
 8001fb4:	1825      	adds	r5, r4, r0
 8001fb6:	022a      	lsls	r2, r5, #8
 8001fb8:	d400      	bmi.n	8001fbc <__aeabi_dsub+0x54c>
 8001fba:	e0da      	b.n	8002172 <__aeabi_dsub+0x702>
 8001fbc:	4a72      	ldr	r2, [pc, #456]	@ (8002188 <__aeabi_dsub+0x718>)
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	4015      	ands	r5, r2
 8001fc2:	07ea      	lsls	r2, r5, #31
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	0869      	lsrs	r1, r5, #1
 8001fc8:	075b      	lsls	r3, r3, #29
 8001fca:	d400      	bmi.n	8001fce <__aeabi_dsub+0x55e>
 8001fcc:	e14a      	b.n	8002264 <__aeabi_dsub+0x7f4>
 8001fce:	230f      	movs	r3, #15
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x568>
 8001fd6:	e0fc      	b.n	80021d2 <__aeabi_dsub+0x762>
 8001fd8:	1d17      	adds	r7, r2, #4
 8001fda:	4297      	cmp	r7, r2
 8001fdc:	41a4      	sbcs	r4, r4
 8001fde:	4264      	negs	r4, r4
 8001fe0:	2502      	movs	r5, #2
 8001fe2:	1864      	adds	r4, r4, r1
 8001fe4:	e6ec      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001fe6:	4647      	mov	r7, r8
 8001fe8:	001c      	movs	r4, r3
 8001fea:	431f      	orrs	r7, r3
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_dsub+0x580>
 8001fee:	e743      	b.n	8001e78 <__aeabi_dsub+0x408>
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	e6cf      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001ff8:	08c0      	lsrs	r0, r0, #3
 8001ffa:	0767      	lsls	r7, r4, #29
 8001ffc:	4307      	orrs	r7, r0
 8001ffe:	08e5      	lsrs	r5, r4, #3
 8002000:	e632      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002002:	1a87      	subs	r7, r0, r2
 8002004:	465b      	mov	r3, fp
 8002006:	42b8      	cmp	r0, r7
 8002008:	4180      	sbcs	r0, r0
 800200a:	1ae4      	subs	r4, r4, r3
 800200c:	4240      	negs	r0, r0
 800200e:	1a24      	subs	r4, r4, r0
 8002010:	0223      	lsls	r3, r4, #8
 8002012:	d428      	bmi.n	8002066 <__aeabi_dsub+0x5f6>
 8002014:	0763      	lsls	r3, r4, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	431f      	orrs	r7, r3
 800201a:	08e5      	lsrs	r5, r4, #3
 800201c:	2301      	movs	r3, #1
 800201e:	e77f      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d100      	bne.n	8002026 <__aeabi_dsub+0x5b6>
 8002024:	e673      	b.n	8001d0e <__aeabi_dsub+0x29e>
 8002026:	464b      	mov	r3, r9
 8002028:	1b5f      	subs	r7, r3, r5
 800202a:	003b      	movs	r3, r7
 800202c:	2d00      	cmp	r5, #0
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x5c2>
 8002030:	e742      	b.n	8001eb8 <__aeabi_dsub+0x448>
 8002032:	2f38      	cmp	r7, #56	@ 0x38
 8002034:	dd00      	ble.n	8002038 <__aeabi_dsub+0x5c8>
 8002036:	e0ec      	b.n	8002212 <__aeabi_dsub+0x7a2>
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	000e      	movs	r6, r1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431c      	orrs	r4, r3
 8002040:	2f1f      	cmp	r7, #31
 8002042:	dc25      	bgt.n	8002090 <__aeabi_dsub+0x620>
 8002044:	2520      	movs	r5, #32
 8002046:	0023      	movs	r3, r4
 8002048:	1bed      	subs	r5, r5, r7
 800204a:	0001      	movs	r1, r0
 800204c:	40a8      	lsls	r0, r5
 800204e:	40ab      	lsls	r3, r5
 8002050:	40f9      	lsrs	r1, r7
 8002052:	1e45      	subs	r5, r0, #1
 8002054:	41a8      	sbcs	r0, r5
 8002056:	430b      	orrs	r3, r1
 8002058:	40fc      	lsrs	r4, r7
 800205a:	4318      	orrs	r0, r3
 800205c:	465b      	mov	r3, fp
 800205e:	1b1b      	subs	r3, r3, r4
 8002060:	469b      	mov	fp, r3
 8002062:	e739      	b.n	8001ed8 <__aeabi_dsub+0x468>
 8002064:	4666      	mov	r6, ip
 8002066:	2501      	movs	r5, #1
 8002068:	e562      	b.n	8001b30 <__aeabi_dsub+0xc0>
 800206a:	001f      	movs	r7, r3
 800206c:	4659      	mov	r1, fp
 800206e:	3f20      	subs	r7, #32
 8002070:	40f9      	lsrs	r1, r7
 8002072:	468c      	mov	ip, r1
 8002074:	2b20      	cmp	r3, #32
 8002076:	d005      	beq.n	8002084 <__aeabi_dsub+0x614>
 8002078:	2740      	movs	r7, #64	@ 0x40
 800207a:	4659      	mov	r1, fp
 800207c:	1afb      	subs	r3, r7, r3
 800207e:	4099      	lsls	r1, r3
 8002080:	430a      	orrs	r2, r1
 8002082:	4692      	mov	sl, r2
 8002084:	4657      	mov	r7, sl
 8002086:	1e7b      	subs	r3, r7, #1
 8002088:	419f      	sbcs	r7, r3
 800208a:	4663      	mov	r3, ip
 800208c:	431f      	orrs	r7, r3
 800208e:	e5c1      	b.n	8001c14 <__aeabi_dsub+0x1a4>
 8002090:	003b      	movs	r3, r7
 8002092:	0025      	movs	r5, r4
 8002094:	3b20      	subs	r3, #32
 8002096:	40dd      	lsrs	r5, r3
 8002098:	2f20      	cmp	r7, #32
 800209a:	d004      	beq.n	80020a6 <__aeabi_dsub+0x636>
 800209c:	2340      	movs	r3, #64	@ 0x40
 800209e:	1bdb      	subs	r3, r3, r7
 80020a0:	409c      	lsls	r4, r3
 80020a2:	4320      	orrs	r0, r4
 80020a4:	4680      	mov	r8, r0
 80020a6:	4640      	mov	r0, r8
 80020a8:	1e43      	subs	r3, r0, #1
 80020aa:	4198      	sbcs	r0, r3
 80020ac:	4328      	orrs	r0, r5
 80020ae:	e713      	b.n	8001ed8 <__aeabi_dsub+0x468>
 80020b0:	2900      	cmp	r1, #0
 80020b2:	d09d      	beq.n	8001ff0 <__aeabi_dsub+0x580>
 80020b4:	2601      	movs	r6, #1
 80020b6:	4663      	mov	r3, ip
 80020b8:	465c      	mov	r4, fp
 80020ba:	4690      	mov	r8, r2
 80020bc:	401e      	ands	r6, r3
 80020be:	e6db      	b.n	8001e78 <__aeabi_dsub+0x408>
 80020c0:	1a17      	subs	r7, r2, r0
 80020c2:	465b      	mov	r3, fp
 80020c4:	42ba      	cmp	r2, r7
 80020c6:	4192      	sbcs	r2, r2
 80020c8:	1b1c      	subs	r4, r3, r4
 80020ca:	4252      	negs	r2, r2
 80020cc:	1aa4      	subs	r4, r4, r2
 80020ce:	0223      	lsls	r3, r4, #8
 80020d0:	d4c8      	bmi.n	8002064 <__aeabi_dsub+0x5f4>
 80020d2:	0763      	lsls	r3, r4, #29
 80020d4:	08ff      	lsrs	r7, r7, #3
 80020d6:	431f      	orrs	r7, r3
 80020d8:	4666      	mov	r6, ip
 80020da:	2301      	movs	r3, #1
 80020dc:	08e5      	lsrs	r5, r4, #3
 80020de:	e71f      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 80020e0:	001d      	movs	r5, r3
 80020e2:	2400      	movs	r4, #0
 80020e4:	2700      	movs	r7, #0
 80020e6:	e657      	b.n	8001d98 <__aeabi_dsub+0x328>
 80020e8:	465c      	mov	r4, fp
 80020ea:	08d0      	lsrs	r0, r2, #3
 80020ec:	e66a      	b.n	8001dc4 <__aeabi_dsub+0x354>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x684>
 80020f2:	e737      	b.n	8001f64 <__aeabi_dsub+0x4f4>
 80020f4:	4653      	mov	r3, sl
 80020f6:	08c0      	lsrs	r0, r0, #3
 80020f8:	0767      	lsls	r7, r4, #29
 80020fa:	4307      	orrs	r7, r0
 80020fc:	08e5      	lsrs	r5, r4, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x694>
 8002102:	e5b1      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	031b      	lsls	r3, r3, #12
 8002108:	421d      	tst	r5, r3
 800210a:	d008      	beq.n	800211e <__aeabi_dsub+0x6ae>
 800210c:	4659      	mov	r1, fp
 800210e:	08c8      	lsrs	r0, r1, #3
 8002110:	4218      	tst	r0, r3
 8002112:	d104      	bne.n	800211e <__aeabi_dsub+0x6ae>
 8002114:	08d2      	lsrs	r2, r2, #3
 8002116:	0749      	lsls	r1, r1, #29
 8002118:	430a      	orrs	r2, r1
 800211a:	0017      	movs	r7, r2
 800211c:	0005      	movs	r5, r0
 800211e:	0f7b      	lsrs	r3, r7, #29
 8002120:	00ff      	lsls	r7, r7, #3
 8002122:	08ff      	lsrs	r7, r7, #3
 8002124:	075b      	lsls	r3, r3, #29
 8002126:	431f      	orrs	r7, r3
 8002128:	e59e      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 800212a:	08c0      	lsrs	r0, r0, #3
 800212c:	0763      	lsls	r3, r4, #29
 800212e:	4318      	orrs	r0, r3
 8002130:	08e5      	lsrs	r5, r4, #3
 8002132:	2900      	cmp	r1, #0
 8002134:	d053      	beq.n	80021de <__aeabi_dsub+0x76e>
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	031b      	lsls	r3, r3, #12
 800213a:	421d      	tst	r5, r3
 800213c:	d00a      	beq.n	8002154 <__aeabi_dsub+0x6e4>
 800213e:	4659      	mov	r1, fp
 8002140:	08cc      	lsrs	r4, r1, #3
 8002142:	421c      	tst	r4, r3
 8002144:	d106      	bne.n	8002154 <__aeabi_dsub+0x6e4>
 8002146:	2601      	movs	r6, #1
 8002148:	4663      	mov	r3, ip
 800214a:	0025      	movs	r5, r4
 800214c:	08d0      	lsrs	r0, r2, #3
 800214e:	0749      	lsls	r1, r1, #29
 8002150:	4308      	orrs	r0, r1
 8002152:	401e      	ands	r6, r3
 8002154:	0f47      	lsrs	r7, r0, #29
 8002156:	00c0      	lsls	r0, r0, #3
 8002158:	08c0      	lsrs	r0, r0, #3
 800215a:	077f      	lsls	r7, r7, #29
 800215c:	4307      	orrs	r7, r0
 800215e:	e583      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002160:	1883      	adds	r3, r0, r2
 8002162:	4293      	cmp	r3, r2
 8002164:	4192      	sbcs	r2, r2
 8002166:	445c      	add	r4, fp
 8002168:	4252      	negs	r2, r2
 800216a:	18a5      	adds	r5, r4, r2
 800216c:	022a      	lsls	r2, r5, #8
 800216e:	d500      	bpl.n	8002172 <__aeabi_dsub+0x702>
 8002170:	e724      	b.n	8001fbc <__aeabi_dsub+0x54c>
 8002172:	076f      	lsls	r7, r5, #29
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	431f      	orrs	r7, r3
 8002178:	08ed      	lsrs	r5, r5, #3
 800217a:	2301      	movs	r3, #1
 800217c:	e6d0      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	000007ff 	.word	0x000007ff
 8002184:	000007fe 	.word	0x000007fe
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	465b      	mov	r3, fp
 800218e:	08d2      	lsrs	r2, r2, #3
 8002190:	075f      	lsls	r7, r3, #29
 8002192:	4666      	mov	r6, ip
 8002194:	4317      	orrs	r7, r2
 8002196:	08dd      	lsrs	r5, r3, #3
 8002198:	e566      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 800219a:	0025      	movs	r5, r4
 800219c:	3b20      	subs	r3, #32
 800219e:	40dd      	lsrs	r5, r3
 80021a0:	4663      	mov	r3, ip
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d005      	beq.n	80021b2 <__aeabi_dsub+0x742>
 80021a6:	2340      	movs	r3, #64	@ 0x40
 80021a8:	4661      	mov	r1, ip
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	409c      	lsls	r4, r3
 80021ae:	4320      	orrs	r0, r4
 80021b0:	4680      	mov	r8, r0
 80021b2:	4647      	mov	r7, r8
 80021b4:	1e7b      	subs	r3, r7, #1
 80021b6:	419f      	sbcs	r7, r3
 80021b8:	432f      	orrs	r7, r5
 80021ba:	e5a0      	b.n	8001cfe <__aeabi_dsub+0x28e>
 80021bc:	2120      	movs	r1, #32
 80021be:	2700      	movs	r7, #0
 80021c0:	1a09      	subs	r1, r1, r0
 80021c2:	e4d2      	b.n	8001b6a <__aeabi_dsub+0xfa>
 80021c4:	2f00      	cmp	r7, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dsub+0x75a>
 80021c8:	e713      	b.n	8001ff2 <__aeabi_dsub+0x582>
 80021ca:	465c      	mov	r4, fp
 80021cc:	0017      	movs	r7, r2
 80021ce:	2500      	movs	r5, #0
 80021d0:	e5f6      	b.n	8001dc0 <__aeabi_dsub+0x350>
 80021d2:	08d7      	lsrs	r7, r2, #3
 80021d4:	0749      	lsls	r1, r1, #29
 80021d6:	2302      	movs	r3, #2
 80021d8:	430f      	orrs	r7, r1
 80021da:	092d      	lsrs	r5, r5, #4
 80021dc:	e6a0      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 80021de:	0007      	movs	r7, r0
 80021e0:	e542      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 80021e2:	465b      	mov	r3, fp
 80021e4:	2601      	movs	r6, #1
 80021e6:	075f      	lsls	r7, r3, #29
 80021e8:	08dd      	lsrs	r5, r3, #3
 80021ea:	4663      	mov	r3, ip
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	4317      	orrs	r7, r2
 80021f0:	401e      	ands	r6, r3
 80021f2:	e539      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 80021f4:	465b      	mov	r3, fp
 80021f6:	08d2      	lsrs	r2, r2, #3
 80021f8:	075f      	lsls	r7, r3, #29
 80021fa:	4317      	orrs	r7, r2
 80021fc:	08dd      	lsrs	r5, r3, #3
 80021fe:	e533      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002200:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <__aeabi_dsub+0x80c>)
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	4022      	ands	r2, r4
 8002206:	0757      	lsls	r7, r2, #29
 8002208:	0252      	lsls	r2, r2, #9
 800220a:	2501      	movs	r5, #1
 800220c:	431f      	orrs	r7, r3
 800220e:	0b14      	lsrs	r4, r2, #12
 8002210:	e5c2      	b.n	8001d98 <__aeabi_dsub+0x328>
 8002212:	000e      	movs	r6, r1
 8002214:	2001      	movs	r0, #1
 8002216:	e65f      	b.n	8001ed8 <__aeabi_dsub+0x468>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <__aeabi_dsub+0x7c8>
 800221c:	464b      	mov	r3, r9
 800221e:	1b5b      	subs	r3, r3, r5
 8002220:	469c      	mov	ip, r3
 8002222:	2d00      	cmp	r5, #0
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x7b8>
 8002226:	e548      	b.n	8001cba <__aeabi_dsub+0x24a>
 8002228:	2701      	movs	r7, #1
 800222a:	2b38      	cmp	r3, #56	@ 0x38
 800222c:	dd00      	ble.n	8002230 <__aeabi_dsub+0x7c0>
 800222e:	e566      	b.n	8001cfe <__aeabi_dsub+0x28e>
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431c      	orrs	r4, r3
 8002236:	e550      	b.n	8001cda <__aeabi_dsub+0x26a>
 8002238:	1c6b      	adds	r3, r5, #1
 800223a:	4d11      	ldr	r5, [pc, #68]	@ (8002280 <__aeabi_dsub+0x810>)
 800223c:	422b      	tst	r3, r5
 800223e:	d000      	beq.n	8002242 <__aeabi_dsub+0x7d2>
 8002240:	e673      	b.n	8001f2a <__aeabi_dsub+0x4ba>
 8002242:	4659      	mov	r1, fp
 8002244:	0023      	movs	r3, r4
 8002246:	4311      	orrs	r1, r2
 8002248:	468a      	mov	sl, r1
 800224a:	4303      	orrs	r3, r0
 800224c:	e600      	b.n	8001e50 <__aeabi_dsub+0x3e0>
 800224e:	0767      	lsls	r7, r4, #29
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	2300      	movs	r3, #0
 8002254:	4307      	orrs	r7, r0
 8002256:	08e5      	lsrs	r5, r4, #3
 8002258:	e662      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 800225a:	0764      	lsls	r4, r4, #29
 800225c:	08ff      	lsrs	r7, r7, #3
 800225e:	4327      	orrs	r7, r4
 8002260:	0905      	lsrs	r5, r0, #4
 8002262:	e65d      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002264:	08d2      	lsrs	r2, r2, #3
 8002266:	0749      	lsls	r1, r1, #29
 8002268:	4311      	orrs	r1, r2
 800226a:	000f      	movs	r7, r1
 800226c:	2302      	movs	r3, #2
 800226e:	092d      	lsrs	r5, r5, #4
 8002270:	e656      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002272:	0007      	movs	r7, r0
 8002274:	e5a4      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8002276:	0038      	movs	r0, r7
 8002278:	e48f      	b.n	8001b9a <__aeabi_dsub+0x12a>
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	ff7fffff 	.word	0xff7fffff
 8002280:	000007fe 	.word	0x000007fe

08002284 <__aeabi_dcmpun>:
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	46c6      	mov	lr, r8
 8002288:	031e      	lsls	r6, r3, #12
 800228a:	0b36      	lsrs	r6, r6, #12
 800228c:	46b0      	mov	r8, r6
 800228e:	4e0d      	ldr	r6, [pc, #52]	@ (80022c4 <__aeabi_dcmpun+0x40>)
 8002290:	030c      	lsls	r4, r1, #12
 8002292:	004d      	lsls	r5, r1, #1
 8002294:	005f      	lsls	r7, r3, #1
 8002296:	b500      	push	{lr}
 8002298:	0b24      	lsrs	r4, r4, #12
 800229a:	0d6d      	lsrs	r5, r5, #21
 800229c:	0d7f      	lsrs	r7, r7, #21
 800229e:	42b5      	cmp	r5, r6
 80022a0:	d00b      	beq.n	80022ba <__aeabi_dcmpun+0x36>
 80022a2:	4908      	ldr	r1, [pc, #32]	@ (80022c4 <__aeabi_dcmpun+0x40>)
 80022a4:	2000      	movs	r0, #0
 80022a6:	428f      	cmp	r7, r1
 80022a8:	d104      	bne.n	80022b4 <__aeabi_dcmpun+0x30>
 80022aa:	4646      	mov	r6, r8
 80022ac:	4316      	orrs	r6, r2
 80022ae:	0030      	movs	r0, r6
 80022b0:	1e43      	subs	r3, r0, #1
 80022b2:	4198      	sbcs	r0, r3
 80022b4:	bc80      	pop	{r7}
 80022b6:	46b8      	mov	r8, r7
 80022b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ba:	4304      	orrs	r4, r0
 80022bc:	2001      	movs	r0, #1
 80022be:	2c00      	cmp	r4, #0
 80022c0:	d1f8      	bne.n	80022b4 <__aeabi_dcmpun+0x30>
 80022c2:	e7ee      	b.n	80022a2 <__aeabi_dcmpun+0x1e>
 80022c4:	000007ff 	.word	0x000007ff

080022c8 <__aeabi_d2iz>:
 80022c8:	000b      	movs	r3, r1
 80022ca:	0002      	movs	r2, r0
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4d16      	ldr	r5, [pc, #88]	@ (8002328 <__aeabi_d2iz+0x60>)
 80022d0:	030c      	lsls	r4, r1, #12
 80022d2:	b082      	sub	sp, #8
 80022d4:	0049      	lsls	r1, r1, #1
 80022d6:	2000      	movs	r0, #0
 80022d8:	9200      	str	r2, [sp, #0]
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	0b24      	lsrs	r4, r4, #12
 80022de:	0d49      	lsrs	r1, r1, #21
 80022e0:	0fde      	lsrs	r6, r3, #31
 80022e2:	42a9      	cmp	r1, r5
 80022e4:	dd04      	ble.n	80022f0 <__aeabi_d2iz+0x28>
 80022e6:	4811      	ldr	r0, [pc, #68]	@ (800232c <__aeabi_d2iz+0x64>)
 80022e8:	4281      	cmp	r1, r0
 80022ea:	dd03      	ble.n	80022f4 <__aeabi_d2iz+0x2c>
 80022ec:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <__aeabi_d2iz+0x68>)
 80022ee:	18f0      	adds	r0, r6, r3
 80022f0:	b002      	add	sp, #8
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	2080      	movs	r0, #128	@ 0x80
 80022f6:	0340      	lsls	r0, r0, #13
 80022f8:	4320      	orrs	r0, r4
 80022fa:	4c0e      	ldr	r4, [pc, #56]	@ (8002334 <__aeabi_d2iz+0x6c>)
 80022fc:	1a64      	subs	r4, r4, r1
 80022fe:	2c1f      	cmp	r4, #31
 8002300:	dd08      	ble.n	8002314 <__aeabi_d2iz+0x4c>
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <__aeabi_d2iz+0x70>)
 8002304:	1a5b      	subs	r3, r3, r1
 8002306:	40d8      	lsrs	r0, r3
 8002308:	0003      	movs	r3, r0
 800230a:	4258      	negs	r0, r3
 800230c:	2e00      	cmp	r6, #0
 800230e:	d1ef      	bne.n	80022f0 <__aeabi_d2iz+0x28>
 8002310:	0018      	movs	r0, r3
 8002312:	e7ed      	b.n	80022f0 <__aeabi_d2iz+0x28>
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <__aeabi_d2iz+0x74>)
 8002316:	9a00      	ldr	r2, [sp, #0]
 8002318:	469c      	mov	ip, r3
 800231a:	0003      	movs	r3, r0
 800231c:	4461      	add	r1, ip
 800231e:	408b      	lsls	r3, r1
 8002320:	40e2      	lsrs	r2, r4
 8002322:	4313      	orrs	r3, r2
 8002324:	e7f1      	b.n	800230a <__aeabi_d2iz+0x42>
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	000003fe 	.word	0x000003fe
 800232c:	0000041d 	.word	0x0000041d
 8002330:	7fffffff 	.word	0x7fffffff
 8002334:	00000433 	.word	0x00000433
 8002338:	00000413 	.word	0x00000413
 800233c:	fffffbed 	.word	0xfffffbed

08002340 <__aeabi_i2d>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	2800      	cmp	r0, #0
 8002344:	d016      	beq.n	8002374 <__aeabi_i2d+0x34>
 8002346:	17c3      	asrs	r3, r0, #31
 8002348:	18c5      	adds	r5, r0, r3
 800234a:	405d      	eors	r5, r3
 800234c:	0fc4      	lsrs	r4, r0, #31
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f848 	bl	80023e4 <__clzsi2>
 8002354:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <__aeabi_i2d+0x58>)
 8002356:	1a1b      	subs	r3, r3, r0
 8002358:	055b      	lsls	r3, r3, #21
 800235a:	0d5b      	lsrs	r3, r3, #21
 800235c:	280a      	cmp	r0, #10
 800235e:	dc14      	bgt.n	800238a <__aeabi_i2d+0x4a>
 8002360:	0002      	movs	r2, r0
 8002362:	002e      	movs	r6, r5
 8002364:	3215      	adds	r2, #21
 8002366:	4096      	lsls	r6, r2
 8002368:	220b      	movs	r2, #11
 800236a:	1a12      	subs	r2, r2, r0
 800236c:	40d5      	lsrs	r5, r2
 800236e:	032d      	lsls	r5, r5, #12
 8002370:	0b2d      	lsrs	r5, r5, #12
 8002372:	e003      	b.n	800237c <__aeabi_i2d+0x3c>
 8002374:	2400      	movs	r4, #0
 8002376:	2300      	movs	r3, #0
 8002378:	2500      	movs	r5, #0
 800237a:	2600      	movs	r6, #0
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	432b      	orrs	r3, r5
 8002380:	07e4      	lsls	r4, r4, #31
 8002382:	4323      	orrs	r3, r4
 8002384:	0030      	movs	r0, r6
 8002386:	0019      	movs	r1, r3
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	380b      	subs	r0, #11
 800238c:	4085      	lsls	r5, r0
 800238e:	032d      	lsls	r5, r5, #12
 8002390:	2600      	movs	r6, #0
 8002392:	0b2d      	lsrs	r5, r5, #12
 8002394:	e7f2      	b.n	800237c <__aeabi_i2d+0x3c>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	0000041e 	.word	0x0000041e

0800239c <__aeabi_ui2d>:
 800239c:	b510      	push	{r4, lr}
 800239e:	1e04      	subs	r4, r0, #0
 80023a0:	d010      	beq.n	80023c4 <__aeabi_ui2d+0x28>
 80023a2:	f000 f81f 	bl	80023e4 <__clzsi2>
 80023a6:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <__aeabi_ui2d+0x44>)
 80023a8:	1a1b      	subs	r3, r3, r0
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	0d5b      	lsrs	r3, r3, #21
 80023ae:	280a      	cmp	r0, #10
 80023b0:	dc0f      	bgt.n	80023d2 <__aeabi_ui2d+0x36>
 80023b2:	220b      	movs	r2, #11
 80023b4:	0021      	movs	r1, r4
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	40d1      	lsrs	r1, r2
 80023ba:	3015      	adds	r0, #21
 80023bc:	030a      	lsls	r2, r1, #12
 80023be:	4084      	lsls	r4, r0
 80023c0:	0b12      	lsrs	r2, r2, #12
 80023c2:	e001      	b.n	80023c8 <__aeabi_ui2d+0x2c>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2200      	movs	r2, #0
 80023c8:	051b      	lsls	r3, r3, #20
 80023ca:	4313      	orrs	r3, r2
 80023cc:	0020      	movs	r0, r4
 80023ce:	0019      	movs	r1, r3
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	0022      	movs	r2, r4
 80023d4:	380b      	subs	r0, #11
 80023d6:	4082      	lsls	r2, r0
 80023d8:	0312      	lsls	r2, r2, #12
 80023da:	2400      	movs	r4, #0
 80023dc:	0b12      	lsrs	r2, r2, #12
 80023de:	e7f3      	b.n	80023c8 <__aeabi_ui2d+0x2c>
 80023e0:	0000041e 	.word	0x0000041e

080023e4 <__clzsi2>:
 80023e4:	211c      	movs	r1, #28
 80023e6:	2301      	movs	r3, #1
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	4298      	cmp	r0, r3
 80023ec:	d301      	bcc.n	80023f2 <__clzsi2+0xe>
 80023ee:	0c00      	lsrs	r0, r0, #16
 80023f0:	3910      	subs	r1, #16
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	4298      	cmp	r0, r3
 80023f6:	d301      	bcc.n	80023fc <__clzsi2+0x18>
 80023f8:	0a00      	lsrs	r0, r0, #8
 80023fa:	3908      	subs	r1, #8
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	4298      	cmp	r0, r3
 8002400:	d301      	bcc.n	8002406 <__clzsi2+0x22>
 8002402:	0900      	lsrs	r0, r0, #4
 8002404:	3904      	subs	r1, #4
 8002406:	a202      	add	r2, pc, #8	@ (adr r2, 8002410 <__clzsi2+0x2c>)
 8002408:	5c10      	ldrb	r0, [r2, r0]
 800240a:	1840      	adds	r0, r0, r1
 800240c:	4770      	bx	lr
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	02020304 	.word	0x02020304
 8002414:	01010101 	.word	0x01010101
	...

08002420 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	240c      	movs	r4, #12
 8002428:	193b      	adds	r3, r7, r4
 800242a:	0018      	movs	r0, r3
 800242c:	2314      	movs	r3, #20
 800242e:	001a      	movs	r2, r3
 8002430:	2100      	movs	r1, #0
 8002432:	f003 f937 	bl	80056a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b4c      	ldr	r3, [pc, #304]	@ (8002568 <MX_GPIO_Init+0x148>)
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	4b4b      	ldr	r3, [pc, #300]	@ (8002568 <MX_GPIO_Init+0x148>)
 800243c:	2180      	movs	r1, #128	@ 0x80
 800243e:	0289      	lsls	r1, r1, #10
 8002440:	430a      	orrs	r2, r1
 8002442:	615a      	str	r2, [r3, #20]
 8002444:	4b48      	ldr	r3, [pc, #288]	@ (8002568 <MX_GPIO_Init+0x148>)
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	4b45      	ldr	r3, [pc, #276]	@ (8002568 <MX_GPIO_Init+0x148>)
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	4b44      	ldr	r3, [pc, #272]	@ (8002568 <MX_GPIO_Init+0x148>)
 8002458:	2180      	movs	r1, #128	@ 0x80
 800245a:	0309      	lsls	r1, r1, #12
 800245c:	430a      	orrs	r2, r1
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <MX_GPIO_Init+0x148>)
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	031b      	lsls	r3, r3, #12
 8002468:	4013      	ands	r3, r2
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	4b3e      	ldr	r3, [pc, #248]	@ (8002568 <MX_GPIO_Init+0x148>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	4b3d      	ldr	r3, [pc, #244]	@ (8002568 <MX_GPIO_Init+0x148>)
 8002474:	2180      	movs	r1, #128	@ 0x80
 8002476:	02c9      	lsls	r1, r1, #11
 8002478:	430a      	orrs	r2, r1
 800247a:	615a      	str	r2, [r3, #20]
 800247c:	4b3a      	ldr	r3, [pc, #232]	@ (8002568 <MX_GPIO_Init+0x148>)
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	02db      	lsls	r3, r3, #11
 8002484:	4013      	ands	r3, r2
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT_Pin|SCLK_Pin, GPIO_PIN_RESET);
 800248a:	2390      	movs	r3, #144	@ 0x90
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	2200      	movs	r2, #0
 8002490:	2121      	movs	r1, #33	@ 0x21
 8002492:	0018      	movs	r0, r3
 8002494:	f000 ff6b 	bl	800336e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_RESET);
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4833      	ldr	r0, [pc, #204]	@ (800256c <MX_GPIO_Init+0x14c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	0019      	movs	r1, r3
 80024a2:	f000 ff64 	bl	800336e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_OUT_Pin */
  GPIO_InitStruct.Pin = LED_OUT_Pin;
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	2201      	movs	r2, #1
 80024b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	2202      	movs	r2, #2
 80024b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_OUT_GPIO_Port, &GPIO_InitStruct);
 80024be:	193a      	adds	r2, r7, r4
 80024c0:	2390      	movs	r3, #144	@ 0x90
 80024c2:	05db      	lsls	r3, r3, #23
 80024c4:	0011      	movs	r1, r2
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 fdbc 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCLK_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin;
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	2220      	movs	r2, #32
 80024d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	2201      	movs	r2, #1
 80024d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	193b      	adds	r3, r7, r4
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 80024e4:	193a      	adds	r2, r7, r4
 80024e6:	2390      	movs	r3, #144	@ 0x90
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	0011      	movs	r1, r2
 80024ec:	0018      	movs	r0, r3
 80024ee:	f000 fda9 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OUT_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 80024f2:	0021      	movs	r1, r4
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2280      	movs	r2, #128	@ 0x80
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	000c      	movs	r4, r1
 80024fe:	193b      	adds	r3, r7, r4
 8002500:	2201      	movs	r2, #1
 8002502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002504:	193b      	adds	r3, r7, r4
 8002506:	2202      	movs	r2, #2
 8002508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	193b      	adds	r3, r7, r4
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8002510:	193b      	adds	r3, r7, r4
 8002512:	4a16      	ldr	r2, [pc, #88]	@ (800256c <MX_GPIO_Init+0x14c>)
 8002514:	0019      	movs	r1, r3
 8002516:	0010      	movs	r0, r2
 8002518:	f000 fd94 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : TSYG_Pin */
  GPIO_InitStruct.Pin = TSYG_Pin;
 800251c:	193b      	adds	r3, r7, r4
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	00d2      	lsls	r2, r2, #3
 8002522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002524:	193b      	adds	r3, r7, r4
 8002526:	2200      	movs	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TSYG_GPIO_Port, &GPIO_InitStruct);
 8002530:	193a      	adds	r2, r7, r4
 8002532:	2390      	movs	r3, #144	@ 0x90
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fd83 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOUT_Pin */
  GPIO_InitStruct.Pin = DOUT_Pin;
 800253e:	0021      	movs	r1, r4
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2280      	movs	r2, #128	@ 0x80
 8002544:	0092      	lsls	r2, r2, #2
 8002546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DOUT_GPIO_Port, &GPIO_InitStruct);
 8002554:	187b      	adds	r3, r7, r1
 8002556:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002558:	0019      	movs	r1, r3
 800255a:	0010      	movs	r0, r2
 800255c:	f000 fd72 	bl	8003044 <HAL_GPIO_Init>

}
 8002560:	46c0      	nop			@ (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b009      	add	sp, #36	@ 0x24
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	48000800 	.word	0x48000800
 8002570:	48000400 	.word	0x48000400

08002574 <HX711_Analyzer_Init>:
static int64_t sum = 0;
static uint8_t index = 0;
static int32_t latest = 0;

void HX711_Analyzer_Init(int32_t offset)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < HX711_BUFFER_SIZE; i++) {
 800257c:	230f      	movs	r3, #15
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e01c      	b.n	80025c0 <HX711_Analyzer_Init+0x4c>
        buffer[i] = -offset;
 8002586:	200f      	movs	r0, #15
 8002588:	183b      	adds	r3, r7, r0
 800258a:	781a      	ldrb	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4259      	negs	r1, r3
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HX711_Analyzer_Init+0x64>)
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	50d1      	str	r1, [r2, r3]
        sum += buffer[i];
 8002596:	183b      	adds	r3, r7, r0
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HX711_Analyzer_Init+0x64>)
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	58d3      	ldr	r3, [r2, r3]
 80025a0:	001c      	movs	r4, r3
 80025a2:	17db      	asrs	r3, r3, #31
 80025a4:	001d      	movs	r5, r3
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <HX711_Analyzer_Init+0x68>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	1912      	adds	r2, r2, r4
 80025ae:	416b      	adcs	r3, r5
 80025b0:	490a      	ldr	r1, [pc, #40]	@ (80025dc <HX711_Analyzer_Init+0x68>)
 80025b2:	600a      	str	r2, [r1, #0]
 80025b4:	604b      	str	r3, [r1, #4]
    for (uint8_t i = 0; i < HX711_BUFFER_SIZE; i++) {
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	183b      	adds	r3, r7, r0
 80025bc:	3201      	adds	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	230f      	movs	r3, #15
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b1f      	cmp	r3, #31
 80025c8:	d9dd      	bls.n	8002586 <HX711_Analyzer_Init+0x12>
    }
    index = 0;
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HX711_Analyzer_Init+0x6c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b004      	add	sp, #16
 80025d6:	bdb0      	pop	{r4, r5, r7, pc}
 80025d8:	200001f4 	.word	0x200001f4
 80025dc:	20000278 	.word	0x20000278
 80025e0:	20000280 	.word	0x20000280

080025e4 <HX711_Analyzer_Push>:

void HX711_Analyzer_Push(int32_t sample)
{
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
    latest = sample;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HX711_Analyzer_Push+0x80>)
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]

    sum -= buffer[index];
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HX711_Analyzer_Push+0x84>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	491c      	ldr	r1, [pc, #112]	@ (800266c <HX711_Analyzer_Push+0x88>)
 80025fa:	7809      	ldrb	r1, [r1, #0]
 80025fc:	0008      	movs	r0, r1
 80025fe:	491c      	ldr	r1, [pc, #112]	@ (8002670 <HX711_Analyzer_Push+0x8c>)
 8002600:	0080      	lsls	r0, r0, #2
 8002602:	5841      	ldr	r1, [r0, r1]
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	17c9      	asrs	r1, r1, #31
 8002608:	6079      	str	r1, [r7, #4]
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	1a12      	subs	r2, r2, r0
 8002610:	418b      	sbcs	r3, r1
 8002612:	4915      	ldr	r1, [pc, #84]	@ (8002668 <HX711_Analyzer_Push+0x84>)
 8002614:	600a      	str	r2, [r1, #0]
 8002616:	604b      	str	r3, [r1, #4]
    buffer[index] = sample;
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HX711_Analyzer_Push+0x88>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	001a      	movs	r2, r3
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HX711_Analyzer_Push+0x8c>)
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	50d1      	str	r1, [r2, r3]
    sum += sample;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	001c      	movs	r4, r3
 800262a:	17db      	asrs	r3, r3, #31
 800262c:	001d      	movs	r5, r3
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <HX711_Analyzer_Push+0x84>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	1912      	adds	r2, r2, r4
 8002636:	416b      	adcs	r3, r5
 8002638:	490b      	ldr	r1, [pc, #44]	@ (8002668 <HX711_Analyzer_Push+0x84>)
 800263a:	600a      	str	r2, [r1, #0]
 800263c:	604b      	str	r3, [r1, #4]

    index = (index + 1) % HX711_BUFFER_SIZE;
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HX711_Analyzer_Push+0x88>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <HX711_Analyzer_Push+0x90>)
 8002646:	4013      	ands	r3, r2
 8002648:	d504      	bpl.n	8002654 <HX711_Analyzer_Push+0x70>
 800264a:	3b01      	subs	r3, #1
 800264c:	2220      	movs	r2, #32
 800264e:	4252      	negs	r2, r2
 8002650:	4313      	orrs	r3, r2
 8002652:	3301      	adds	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HX711_Analyzer_Push+0x88>)
 8002658:	701a      	strb	r2, [r3, #0]
}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bdb0      	pop	{r4, r5, r7, pc}
 8002662:	46c0      	nop			@ (mov r8, r8)
 8002664:	20000284 	.word	0x20000284
 8002668:	20000278 	.word	0x20000278
 800266c:	20000280 	.word	0x20000280
 8002670:	200001f4 	.word	0x200001f4
 8002674:	8000001f 	.word	0x8000001f

08002678 <HX711_Analyzer_GetAverage>:

int32_t HX711_Analyzer_GetAverage(void)
{
 8002678:	b5b0      	push	{r4, r5, r7, lr}
 800267a:	af00      	add	r7, sp, #0
    return (int32_t)(sum / HX711_BUFFER_SIZE);
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <HX711_Analyzer_GetAverage+0x2c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da03      	bge.n	800268e <HX711_Analyzer_GetAverage+0x16>
 8002686:	241f      	movs	r4, #31
 8002688:	2500      	movs	r5, #0
 800268a:	1912      	adds	r2, r2, r4
 800268c:	416b      	adcs	r3, r5
 800268e:	06dc      	lsls	r4, r3, #27
 8002690:	0950      	lsrs	r0, r2, #5
 8002692:	4320      	orrs	r0, r4
 8002694:	1159      	asrs	r1, r3, #5
 8002696:	0002      	movs	r2, r0
 8002698:	000b      	movs	r3, r1
 800269a:	0013      	movs	r3, r2
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	20000278 	.word	0x20000278

080026a8 <HX711_Analyzer_GetDeviation>:

int32_t HX711_Analyzer_GetDeviation(void)
{
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	af00      	add	r7, sp, #0
    return latest - HX711_Analyzer_GetAverage();
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <HX711_Analyzer_GetDeviation+0x18>)
 80026ae:	681c      	ldr	r4, [r3, #0]
 80026b0:	f7ff ffe2 	bl	8002678 <HX711_Analyzer_GetAverage>
 80026b4:	0003      	movs	r3, r0
 80026b6:	1ae3      	subs	r3, r4, r3
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bdb0      	pop	{r4, r5, r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	20000284 	.word	0x20000284

080026c4 <HX711_Init>:

void HX711_Init()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
	printf("Kalibracja HX711...\r\n");
 80026ca:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HX711_Init+0x9c>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f002 fef3 	bl	80054b8 <puts>

	int32_t offset = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	e00b      	b.n	80026f4 <HX711_Init+0x30>
	    offset += HX711_Read();
 80026dc:	f000 f8c4 	bl	8002868 <HX711_Read>
 80026e0:	0002      	movs	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	189b      	adds	r3, r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
	    HAL_Delay(10);
 80026e8:	200a      	movs	r0, #10
 80026ea:	f000 fbd3 	bl	8002e94 <HAL_Delay>
	for (int i = 0; i < 100; i++) {
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b63      	cmp	r3, #99	@ 0x63
 80026f8:	ddf0      	ble.n	80026dc <HX711_Init+0x18>
	}
	offset /= 100;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2164      	movs	r1, #100	@ 0x64
 80026fe:	0018      	movs	r0, r3
 8002700:	f7fd fda6 	bl	8000250 <__divsi3>
 8002704:	0003      	movs	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]

	HX711_Analyzer_Init(offset);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff ff32 	bl	8002574 <HX711_Analyzer_Init>

	HAL_Delay(1000);
 8002710:	23fa      	movs	r3, #250	@ 0xfa
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fbbd 	bl	8002e94 <HAL_Delay>
	for (uint16_t i = 0; i < 100; i++)
 800271a:	1dbb      	adds	r3, r7, #6
 800271c:	2200      	movs	r2, #0
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e00f      	b.n	8002742 <HX711_Init+0x7e>
	{
		int32_t sample = HX711_Read();
 8002722:	f000 f8a1 	bl	8002868 <HX711_Read>
 8002726:	0003      	movs	r3, r0
 8002728:	603b      	str	r3, [r7, #0]
		HX711_Analyzer_Push(sample);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff ff59 	bl	80025e4 <HX711_Analyzer_Push>
		HAL_Delay(10);
 8002732:	200a      	movs	r0, #10
 8002734:	f000 fbae 	bl	8002e94 <HAL_Delay>
	for (uint16_t i = 0; i < 100; i++)
 8002738:	1dbb      	adds	r3, r7, #6
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	1dbb      	adds	r3, r7, #6
 800273e:	3201      	adds	r2, #1
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	1dbb      	adds	r3, r7, #6
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	2b63      	cmp	r3, #99	@ 0x63
 8002748:	d9eb      	bls.n	8002722 <HX711_Init+0x5e>
	}

	printf("Offset ustawiony: %ld\r\n", offset);
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HX711_Init+0xa0>)
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f002 fe4b 	bl	80053ec <iprintf>
}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b004      	add	sp, #16
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	080074e8 	.word	0x080074e8
 8002764:	08007500 	.word	0x08007500

08002768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800276c:	f000 fb2e 	bl	8002dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002770:	f000 f822 	bl	80027b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002774:	f7ff fe54 	bl	8002420 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002778:	f000 fa70 	bl	8002c5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_SET);
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	480c      	ldr	r0, [pc, #48]	@ (80027b4 <main+0x4c>)
 8002782:	2201      	movs	r2, #1
 8002784:	0019      	movs	r1, r3
 8002786:	f000 fdf2 	bl	800336e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_SET);
 800278a:	2390      	movs	r3, #144	@ 0x90
 800278c:	05db      	lsls	r3, r3, #23
 800278e:	2201      	movs	r2, #1
 8002790:	2101      	movs	r1, #1
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fdeb 	bl	800336e <HAL_GPIO_WritePin>
  HX711_Init();
 8002798:	f7ff ff94 	bl	80026c4 <HX711_Init>
  HAL_Delay(1000);
 800279c:	23fa      	movs	r3, #250	@ 0xfa
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 fb77 	bl	8002e94 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  checkInput();
 80027a6:	f000 f8cb 	bl	8002940 <checkInput>
	  HAL_Delay(10);
 80027aa:	200a      	movs	r0, #10
 80027ac:	f000 fb72 	bl	8002e94 <HAL_Delay>
	  checkInput();
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	e7f8      	b.n	80027a6 <main+0x3e>
 80027b4:	48000800 	.word	0x48000800

080027b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b099      	sub	sp, #100	@ 0x64
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	242c      	movs	r4, #44	@ 0x2c
 80027c0:	193b      	adds	r3, r7, r4
 80027c2:	0018      	movs	r0, r3
 80027c4:	2334      	movs	r3, #52	@ 0x34
 80027c6:	001a      	movs	r2, r3
 80027c8:	2100      	movs	r1, #0
 80027ca:	f002 ff6b 	bl	80056a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ce:	231c      	movs	r3, #28
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	0018      	movs	r0, r3
 80027d4:	2310      	movs	r3, #16
 80027d6:	001a      	movs	r2, r3
 80027d8:	2100      	movs	r1, #0
 80027da:	f002 ff63 	bl	80056a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027de:	003b      	movs	r3, r7
 80027e0:	0018      	movs	r0, r3
 80027e2:	231c      	movs	r3, #28
 80027e4:	001a      	movs	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	f002 ff5c 	bl	80056a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027ec:	0021      	movs	r1, r4
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2202      	movs	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2201      	movs	r2, #1
 80027f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2210      	movs	r2, #16
 80027fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002806:	187b      	adds	r3, r7, r1
 8002808:	0018      	movs	r0, r3
 800280a:	f000 fdcd 	bl	80033a8 <HAL_RCC_OscConfig>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002812:	f000 f91b 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002816:	211c      	movs	r1, #28
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2207      	movs	r2, #7
 800281c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2200      	movs	r2, #0
 800282e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002830:	187b      	adds	r3, r7, r1
 8002832:	2100      	movs	r1, #0
 8002834:	0018      	movs	r0, r3
 8002836:	f001 f93d 	bl	8003ab4 <HAL_RCC_ClockConfig>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800283e:	f000 f905 	bl	8002a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002842:	003b      	movs	r3, r7
 8002844:	2202      	movs	r2, #2
 8002846:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002848:	003b      	movs	r3, r7
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800284e:	003b      	movs	r3, r7
 8002850:	0018      	movs	r0, r3
 8002852:	f001 fa9b 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d001      	beq.n	800285e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800285a:	f000 f8f7 	bl	8002a4c <Error_Handler>
  }
}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b019      	add	sp, #100	@ 0x64
 8002864:	bd90      	pop	{r4, r7, pc}
	...

08002868 <HX711_Read>:

/* USER CODE BEGIN 4 */
int32_t HX711_Read(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
    int32_t value = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]

    uint32_t timeout = HAL_GetTick();
 8002872:	f000 fb05 	bl	8002e80 <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	607b      	str	r3, [r7, #4]
    while (HAL_GPIO_ReadPin(DOUT_GPIO_Port, DOUT_Pin))
 800287a:	e00e      	b.n	800289a <HX711_Read+0x32>
    {
        if (HAL_GetTick() - timeout > 1000)
 800287c:	f000 fb00 	bl	8002e80 <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	1ad2      	subs	r2, r2, r3
 8002886:	23fa      	movs	r3, #250	@ 0xfa
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	429a      	cmp	r2, r3
 800288c:	d905      	bls.n	800289a <HX711_Read+0x32>
        {
            printf("Timeout HX711 - brak odpowiedzi\n");
 800288e:	4b2a      	ldr	r3, [pc, #168]	@ (8002938 <HX711_Read+0xd0>)
 8002890:	0018      	movs	r0, r3
 8002892:	f002 fe11 	bl	80054b8 <puts>
            return 0;
 8002896:	2300      	movs	r3, #0
 8002898:	e049      	b.n	800292e <HX711_Read+0xc6>
    while (HAL_GPIO_ReadPin(DOUT_GPIO_Port, DOUT_Pin))
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4a27      	ldr	r2, [pc, #156]	@ (800293c <HX711_Read+0xd4>)
 80028a0:	0019      	movs	r1, r3
 80028a2:	0010      	movs	r0, r2
 80028a4:	f000 fd46 	bl	8003334 <HAL_GPIO_ReadPin>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d1e7      	bne.n	800287c <HX711_Read+0x14>
        }
    }

    for (int i = 0; i < 24; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e021      	b.n	80028f6 <HX711_Read+0x8e>
    {
        HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80028b2:	2390      	movs	r3, #144	@ 0x90
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	2201      	movs	r2, #1
 80028b8:	2120      	movs	r1, #32
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 fd57 	bl	800336e <HAL_GPIO_WritePin>
        __NOP(); __NOP();
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	46c0      	nop			@ (mov r8, r8)
        value = value << 1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80028ca:	2390      	movs	r3, #144	@ 0x90
 80028cc:	05db      	lsls	r3, r3, #23
 80028ce:	2200      	movs	r2, #0
 80028d0:	2120      	movs	r1, #32
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fd4b 	bl	800336e <HAL_GPIO_WritePin>

        if (HAL_GPIO_ReadPin(DOUT_GPIO_Port, DOUT_Pin))
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4a17      	ldr	r2, [pc, #92]	@ (800293c <HX711_Read+0xd4>)
 80028de:	0019      	movs	r1, r3
 80028e0:	0010      	movs	r0, r2
 80028e2:	f000 fd27 	bl	8003334 <HAL_GPIO_ReadPin>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d002      	beq.n	80028f0 <HX711_Read+0x88>
            value++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 24; i++)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b17      	cmp	r3, #23
 80028fa:	ddda      	ble.n	80028b2 <HX711_Read+0x4a>
    }

    HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80028fc:	2390      	movs	r3, #144	@ 0x90
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	2201      	movs	r2, #1
 8002902:	2120      	movs	r1, #32
 8002904:	0018      	movs	r0, r3
 8002906:	f000 fd32 	bl	800336e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800290a:	2390      	movs	r3, #144	@ 0x90
 800290c:	05db      	lsls	r3, r3, #23
 800290e:	2200      	movs	r2, #0
 8002910:	2120      	movs	r1, #32
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fd2b 	bl	800336e <HAL_GPIO_WritePin>

    if (value & 0x800000)
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	4013      	ands	r3, r2
 8002920:	d004      	beq.n	800292c <HX711_Read+0xc4>
        value |= 0xFF000000;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	22ff      	movs	r2, #255	@ 0xff
 8002926:	0612      	lsls	r2, r2, #24
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

    return value;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	08007518 	.word	0x08007518
 800293c:	48000400 	.word	0x48000400

08002940 <checkInput>:

void checkInput(void)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
	int32_t sample = HX711_Read();
 8002946:	f7ff ff8f 	bl	8002868 <HX711_Read>
 800294a:	0003      	movs	r3, r0
 800294c:	60fb      	str	r3, [r7, #12]
	HX711_Analyzer_Push(sample);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff fe47 	bl	80025e4 <HX711_Analyzer_Push>

    int32_t dev = HX711_Analyzer_GetDeviation();
 8002956:	f7ff fea7 	bl	80026a8 <HX711_Analyzer_GetDeviation>
 800295a:	0003      	movs	r3, r0
 800295c:	60bb      	str	r3, [r7, #8]
    GPIO_PinState pinState = HAL_GPIO_ReadPin(TSYG_GPIO_Port, TSYG_Pin);
 800295e:	1dfc      	adds	r4, r7, #7
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	00da      	lsls	r2, r3, #3
 8002964:	2390      	movs	r3, #144	@ 0x90
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fce2 	bl	8003334 <HAL_GPIO_ReadPin>
 8002970:	0003      	movs	r3, r0
 8002972:	7023      	strb	r3, [r4, #0]

    if (dev > 2000 || dev < -2000)
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	23fa      	movs	r3, #250	@ 0xfa
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	429a      	cmp	r2, r3
 800297c:	dc03      	bgt.n	8002986 <checkInput+0x46>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4a2d      	ldr	r2, [pc, #180]	@ (8002a38 <checkInput+0xf8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	da0a      	bge.n	800299c <checkInput+0x5c>
    {
        if (checker < 10)
 8002986:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <checkInput+0xfc>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b09      	cmp	r3, #9
 800298c:	d809      	bhi.n	80029a2 <checkInput+0x62>
        {
            checker++;
 800298e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a3c <checkInput+0xfc>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <checkInput+0xfc>)
 8002998:	701a      	strb	r2, [r3, #0]
        if (checker < 10)
 800299a:	e002      	b.n	80029a2 <checkInput+0x62>
        }
    }
    else
    {
        checker = 0;
 800299c:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <checkInput+0xfc>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
    }

    uint8_t findContact = (pinState == GPIO_PIN_SET);
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	425a      	negs	r2, r3
 80029aa:	4153      	adcs	r3, r2
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	1dbb      	adds	r3, r7, #6
 80029b0:	701a      	strb	r2, [r3, #0]

    if ((checker >= 5 || findContact) && !triggered)
 80029b2:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <checkInput+0xfc>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d803      	bhi.n	80029c2 <checkInput+0x82>
 80029ba:	1dbb      	adds	r3, r7, #6
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d035      	beq.n	8002a2e <checkInput+0xee>
 80029c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <checkInput+0x100>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d131      	bne.n	8002a2e <checkInput+0xee>
    {
        triggered = 1;
 80029ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <checkInput+0x100>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]

        uint32_t czas = HAL_GetTick();
 80029d0:	f000 fa56 	bl	8002e80 <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	603b      	str	r3, [r7, #0]
        printf("Wykryto kontakr narzędzia: %lu ms\r\n", czas);
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <checkInput+0x104>)
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f002 fd04 	bl	80053ec <iprintf>

        HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
 80029e4:	2390      	movs	r3, #144	@ 0x90
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	2200      	movs	r2, #0
 80029ea:	2101      	movs	r1, #1
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 fcbe 	bl	800336e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_RESET);
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4814      	ldr	r0, [pc, #80]	@ (8002a48 <checkInput+0x108>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	0019      	movs	r1, r3
 80029fc:	f000 fcb7 	bl	800336e <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8002a00:	20c8      	movs	r0, #200	@ 0xc8
 8002a02:	f000 fa47 	bl	8002e94 <HAL_Delay>
        HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_SET);
 8002a06:	2390      	movs	r3, #144	@ 0x90
 8002a08:	05db      	lsls	r3, r3, #23
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 fcad 	bl	800336e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin, GPIO_PIN_SET);
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	480b      	ldr	r0, [pc, #44]	@ (8002a48 <checkInput+0x108>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	f000 fca6 	bl	800336e <HAL_GPIO_WritePin>

        checker = 0;
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <checkInput+0xfc>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
        triggered = 0;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <checkInput+0x100>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
    }
}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b005      	add	sp, #20
 8002a34:	bd90      	pop	{r4, r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	fffff830 	.word	0xfffff830
 8002a3c:	20000288 	.word	0x20000288
 8002a40:	20000289 	.word	0x20000289
 8002a44:	08007538 	.word	0x08007538
 8002a48:	48000800 	.word	0x48000800

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	e7fd      	b.n	8002a54 <Error_Handler+0x8>

08002a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	430a      	orrs	r2, r1
 8002a68:	619a      	str	r2, [r3, #24]
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	0549      	lsls	r1, r1, #21
 8002a80:	430a      	orrs	r2, r1
 8002a82:	61da      	str	r2, [r3, #28]
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	055b      	lsls	r3, r3, #21
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	e7fd      	b.n	8002aa4 <NMI_Handler+0x4>

08002aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	e7fd      	b.n	8002aac <HardFault_Handler+0x4>

08002ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac8:	f000 f9c8 	bl	8002e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	af00      	add	r7, sp, #0
  return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_kill>:

int _kill(int pid, int sig)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ae8:	f002 fe36 	bl	8005758 <__errno>
 8002aec:	0003      	movs	r3, r0
 8002aee:	2216      	movs	r2, #22
 8002af0:	601a      	str	r2, [r3, #0]
  return -1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	425b      	negs	r3, r3
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b002      	add	sp, #8
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_exit>:

void _exit (int status)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b06:	2301      	movs	r3, #1
 8002b08:	425a      	negs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff ffe5 	bl	8002ade <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	e7fd      	b.n	8002b14 <_exit+0x16>

08002b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e00a      	b.n	8002b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b2a:	e000      	b.n	8002b2e <_read+0x16>
 8002b2c:	bf00      	nop
 8002b2e:	0001      	movs	r1, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	60ba      	str	r2, [r7, #8]
 8002b36:	b2ca      	uxtb	r2, r1
 8002b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	dbf0      	blt.n	8002b2a <_read+0x12>
  }

  return len;
 8002b48:	687b      	ldr	r3, [r7, #4]
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b006      	add	sp, #24
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e009      	b.n	8002b78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	60ba      	str	r2, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 f8f1 	bl	8002d54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dbf1      	blt.n	8002b64 <_write+0x12>
  }
  return len;
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b006      	add	sp, #24
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_close>:

int _close(int file)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	425b      	negs	r3, r3
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	0192      	lsls	r2, r2, #6
 8002bae:	605a      	str	r2, [r3, #4]
  return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_isatty>:

int _isatty(int file)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b004      	add	sp, #16
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bec:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <_sbrk+0x5c>)
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <_sbrk+0x60>)
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf8:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <_sbrk+0x64>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <_sbrk+0x68>)
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d207      	bcs.n	8002c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c14:	f002 fda0 	bl	8005758 <__errno>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	425b      	negs	r3, r3
 8002c22:	e009      	b.n	8002c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c24:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <_sbrk+0x64>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c2a:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	18d2      	adds	r2, r2, r3
 8002c32:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <_sbrk+0x64>)
 8002c34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b006      	add	sp, #24
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20008000 	.word	0x20008000
 8002c44:	00000400 	.word	0x00000400
 8002c48:	2000028c 	.word	0x2000028c
 8002c4c:	20000468 	.word	0x20000468

08002c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c60:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c62:	4a15      	ldr	r2, [pc, #84]	@ (8002cb8 <MX_USART2_UART_Init+0x5c>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c66:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c68:	22e1      	movs	r2, #225	@ 0xe1
 8002c6a:	0252      	lsls	r2, r2, #9
 8002c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c98:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c9e:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <MX_USART2_UART_Init+0x58>)
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f001 f973 	bl	8003f8c <HAL_UART_Init>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002caa:	f7ff fecf 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000290 	.word	0x20000290
 8002cb8:	40004400 	.word	0x40004400

08002cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b08b      	sub	sp, #44	@ 0x2c
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	2414      	movs	r4, #20
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	0018      	movs	r0, r3
 8002cca:	2314      	movs	r3, #20
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f002 fce8 	bl	80056a4 <memset>
  if(uartHandle->Instance==USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <HAL_UART_MspInit+0x90>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d132      	bne.n	8002d44 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cde:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <HAL_UART_MspInit+0x94>)
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_UART_MspInit+0x94>)
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	0289      	lsls	r1, r1, #10
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]
 8002cec:	4b18      	ldr	r3, [pc, #96]	@ (8002d50 <HAL_UART_MspInit+0x94>)
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	029b      	lsls	r3, r3, #10
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b15      	ldr	r3, [pc, #84]	@ (8002d50 <HAL_UART_MspInit+0x94>)
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <HAL_UART_MspInit+0x94>)
 8002d00:	2180      	movs	r1, #128	@ 0x80
 8002d02:	0289      	lsls	r1, r1, #10
 8002d04:	430a      	orrs	r2, r1
 8002d06:	615a      	str	r2, [r3, #20]
 8002d08:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <HAL_UART_MspInit+0x94>)
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d16:	0021      	movs	r1, r4
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2202      	movs	r2, #2
 8002d22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2201      	movs	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d36:	187a      	adds	r2, r7, r1
 8002d38:	2390      	movs	r3, #144	@ 0x90
 8002d3a:	05db      	lsls	r3, r3, #23
 8002d3c:	0011      	movs	r1, r2
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f980 	bl	8003044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b00b      	add	sp, #44	@ 0x2c
 8002d4a:	bd90      	pop	{r4, r7, pc}
 8002d4c:	40004400 	.word	0x40004400
 8002d50:	40021000 	.word	0x40021000

08002d54 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	425b      	negs	r3, r3
 8002d60:	1d39      	adds	r1, r7, #4
 8002d62:	4804      	ldr	r0, [pc, #16]	@ (8002d74 <__io_putchar+0x20>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	f001 f965 	bl	8004034 <HAL_UART_Transmit>
    return ch;
 8002d6a:	687b      	ldr	r3, [r7, #4]
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000290 	.word	0x20000290

08002d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d78:	480d      	ldr	r0, [pc, #52]	@ (8002db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d7c:	f7ff ff68 	bl	8002c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d80:	480c      	ldr	r0, [pc, #48]	@ (8002db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d82:	490d      	ldr	r1, [pc, #52]	@ (8002db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <LoopForever+0xe>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d88:	e002      	b.n	8002d90 <LoopCopyDataInit>

08002d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8e:	3304      	adds	r3, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d94:	d3f9      	bcc.n	8002d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d98:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc4 <LoopForever+0x16>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d9c:	e001      	b.n	8002da2 <LoopFillZerobss>

08002d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da0:	3204      	adds	r2, #4

08002da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da4:	d3fb      	bcc.n	8002d9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002da6:	f002 fcdd 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002daa:	f7ff fcdd 	bl	8002768 <main>

08002dae <LoopForever>:

LoopForever:
    b LoopForever
 8002dae:	e7fe      	b.n	8002dae <LoopForever>
  ldr   r0, =_estack
 8002db0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002dbc:	08007954 	.word	0x08007954
  ldr r2, =_sbss
 8002dc0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002dc4:	20000468 	.word	0x20000468

08002dc8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC1_COMP_IRQHandler>
	...

08002dcc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <HAL_Init+0x24>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_Init+0x24>)
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f000 f809 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de2:	f7ff fe39 	bl	8002a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	40022000 	.word	0x40022000

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_InitTick+0x5c>)
 8002dfe:	681c      	ldr	r4, [r3, #0]
 8002e00:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <HAL_InitTick+0x60>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	0019      	movs	r1, r3
 8002e06:	23fa      	movs	r3, #250	@ 0xfa
 8002e08:	0098      	lsls	r0, r3, #2
 8002e0a:	f7fd f997 	bl	800013c <__udivsi3>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	0019      	movs	r1, r3
 8002e12:	0020      	movs	r0, r4
 8002e14:	f7fd f992 	bl	800013c <__udivsi3>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f905 	bl	800302a <HAL_SYSTICK_Config>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e00f      	b.n	8002e48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d80b      	bhi.n	8002e46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	2301      	movs	r3, #1
 8002e32:	425b      	negs	r3, r3
 8002e34:	2200      	movs	r2, #0
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 f8e2 	bl	8003000 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_InitTick+0x64>)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b003      	add	sp, #12
 8002e4e:	bd90      	pop	{r4, r7, pc}
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000008 	.word	0x20000008
 8002e58:	20000004 	.word	0x20000004

08002e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_IncTick+0x1c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	001a      	movs	r2, r3
 8002e66:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <HAL_IncTick+0x20>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	18d2      	adds	r2, r2, r3
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_IncTick+0x20>)
 8002e6e:	601a      	str	r2, [r3, #0]
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	20000008 	.word	0x20000008
 8002e7c:	20000318 	.word	0x20000318

08002e80 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  return uwTick;
 8002e84:	4b02      	ldr	r3, [pc, #8]	@ (8002e90 <HAL_GetTick+0x10>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	20000318 	.word	0x20000318

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff fff0 	bl	8002e80 <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_Delay+0x44>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	f7ff ffe0 	bl	8002e80 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	20000008 	.word	0x20000008

08002edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	1dfb      	adds	r3, r7, #7
 8002ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ef0:	d828      	bhi.n	8002f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb0 <__NVIC_SetPriority+0xd4>)
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	33c0      	adds	r3, #192	@ 0xc0
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	589b      	ldr	r3, [r3, r2]
 8002f02:	1dfa      	adds	r2, r7, #7
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	0011      	movs	r1, r2
 8002f08:	2203      	movs	r2, #3
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	00d2      	lsls	r2, r2, #3
 8002f0e:	21ff      	movs	r1, #255	@ 0xff
 8002f10:	4091      	lsls	r1, r2
 8002f12:	000a      	movs	r2, r1
 8002f14:	43d2      	mvns	r2, r2
 8002f16:	401a      	ands	r2, r3
 8002f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	22ff      	movs	r2, #255	@ 0xff
 8002f20:	401a      	ands	r2, r3
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	0018      	movs	r0, r3
 8002f28:	2303      	movs	r3, #3
 8002f2a:	4003      	ands	r3, r0
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f30:	481f      	ldr	r0, [pc, #124]	@ (8002fb0 <__NVIC_SetPriority+0xd4>)
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b25b      	sxtb	r3, r3
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	33c0      	adds	r3, #192	@ 0xc0
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f42:	e031      	b.n	8002fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f44:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb4 <__NVIC_SetPriority+0xd8>)
 8002f46:	1dfb      	adds	r3, r7, #7
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	400b      	ands	r3, r1
 8002f50:	3b08      	subs	r3, #8
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3306      	adds	r3, #6
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	1dfa      	adds	r2, r7, #7
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	0011      	movs	r1, r2
 8002f64:	2203      	movs	r2, #3
 8002f66:	400a      	ands	r2, r1
 8002f68:	00d2      	lsls	r2, r2, #3
 8002f6a:	21ff      	movs	r1, #255	@ 0xff
 8002f6c:	4091      	lsls	r1, r2
 8002f6e:	000a      	movs	r2, r1
 8002f70:	43d2      	mvns	r2, r2
 8002f72:	401a      	ands	r2, r3
 8002f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	22ff      	movs	r2, #255	@ 0xff
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	0018      	movs	r0, r3
 8002f84:	2303      	movs	r3, #3
 8002f86:	4003      	ands	r3, r0
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f8c:	4809      	ldr	r0, [pc, #36]	@ (8002fb4 <__NVIC_SetPriority+0xd8>)
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	001c      	movs	r4, r3
 8002f94:	230f      	movs	r3, #15
 8002f96:	4023      	ands	r3, r4
 8002f98:	3b08      	subs	r3, #8
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	3306      	adds	r3, #6
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	18c3      	adds	r3, r0, r3
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	601a      	str	r2, [r3, #0]
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b003      	add	sp, #12
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1e5a      	subs	r2, r3, #1
 8002fc4:	2380      	movs	r3, #128	@ 0x80
 8002fc6:	045b      	lsls	r3, r3, #17
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d301      	bcc.n	8002fd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e010      	b.n	8002ff2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <SysTick_Config+0x44>)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd8:	2301      	movs	r3, #1
 8002fda:	425b      	negs	r3, r3
 8002fdc:	2103      	movs	r1, #3
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff ff7c 	bl	8002edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <SysTick_Config+0x44>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fea:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <SysTick_Config+0x44>)
 8002fec:	2207      	movs	r2, #7
 8002fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	e000e010 	.word	0xe000e010

08003000 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	210f      	movs	r1, #15
 800300c:	187b      	adds	r3, r7, r1
 800300e:	1c02      	adds	r2, r0, #0
 8003010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	187b      	adds	r3, r7, r1
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b25b      	sxtb	r3, r3
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f7ff ff5d 	bl	8002edc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff ffbf 	bl	8002fb8 <SysTick_Config>
 800303a:	0003      	movs	r3, r0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003052:	e155      	b.n	8003300 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2101      	movs	r1, #1
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4091      	lsls	r1, r2
 800305e:	000a      	movs	r2, r1
 8003060:	4013      	ands	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d100      	bne.n	800306c <HAL_GPIO_Init+0x28>
 800306a:	e146      	b.n	80032fa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	4013      	ands	r3, r2
 8003074:	2b01      	cmp	r3, #1
 8003076:	d005      	beq.n	8003084 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003080:	2b02      	cmp	r3, #2
 8003082:	d130      	bne.n	80030e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	409a      	lsls	r2, r3
 8003092:	0013      	movs	r3, r2
 8003094:	43da      	mvns	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	409a      	lsls	r2, r3
 80030a6:	0013      	movs	r3, r2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ba:	2201      	movs	r2, #1
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
 80030c0:	0013      	movs	r3, r2
 80030c2:	43da      	mvns	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	2201      	movs	r2, #1
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
 80030d8:	0013      	movs	r3, r2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2203      	movs	r2, #3
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d017      	beq.n	8003122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	43da      	mvns	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	409a      	lsls	r2, r3
 8003114:	0013      	movs	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2203      	movs	r2, #3
 8003128:	4013      	ands	r3, r2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d123      	bne.n	8003176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	08da      	lsrs	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3208      	adds	r2, #8
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	58d3      	ldr	r3, [r2, r3]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2207      	movs	r2, #7
 8003140:	4013      	ands	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	220f      	movs	r2, #15
 8003146:	409a      	lsls	r2, r3
 8003148:	0013      	movs	r3, r2
 800314a:	43da      	mvns	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2107      	movs	r1, #7
 800315a:	400b      	ands	r3, r1
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	08da      	lsrs	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3208      	adds	r2, #8
 8003170:	0092      	lsls	r2, r2, #2
 8003172:	6939      	ldr	r1, [r7, #16]
 8003174:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	409a      	lsls	r2, r3
 8003184:	0013      	movs	r3, r2
 8003186:	43da      	mvns	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2203      	movs	r2, #3
 8003194:	401a      	ands	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	23c0      	movs	r3, #192	@ 0xc0
 80031b0:	029b      	lsls	r3, r3, #10
 80031b2:	4013      	ands	r3, r2
 80031b4:	d100      	bne.n	80031b8 <HAL_GPIO_Init+0x174>
 80031b6:	e0a0      	b.n	80032fa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b8:	4b57      	ldr	r3, [pc, #348]	@ (8003318 <HAL_GPIO_Init+0x2d4>)
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	4b56      	ldr	r3, [pc, #344]	@ (8003318 <HAL_GPIO_Init+0x2d4>)
 80031be:	2101      	movs	r1, #1
 80031c0:	430a      	orrs	r2, r1
 80031c2:	619a      	str	r2, [r3, #24]
 80031c4:	4b54      	ldr	r3, [pc, #336]	@ (8003318 <HAL_GPIO_Init+0x2d4>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031d0:	4a52      	ldr	r2, [pc, #328]	@ (800331c <HAL_GPIO_Init+0x2d8>)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	3302      	adds	r3, #2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	589b      	ldr	r3, [r3, r2]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2203      	movs	r2, #3
 80031e2:	4013      	ands	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220f      	movs	r2, #15
 80031e8:	409a      	lsls	r2, r3
 80031ea:	0013      	movs	r3, r2
 80031ec:	43da      	mvns	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	2390      	movs	r3, #144	@ 0x90
 80031f8:	05db      	lsls	r3, r3, #23
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x1ee>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a47      	ldr	r2, [pc, #284]	@ (8003320 <HAL_GPIO_Init+0x2dc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x1ea>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a46      	ldr	r2, [pc, #280]	@ (8003324 <HAL_GPIO_Init+0x2e0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x1e6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a45      	ldr	r2, [pc, #276]	@ (8003328 <HAL_GPIO_Init+0x2e4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x1e2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a44      	ldr	r2, [pc, #272]	@ (800332c <HAL_GPIO_Init+0x2e8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x1de>
 800321e:	2304      	movs	r3, #4
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x1f0>
 8003222:	2305      	movs	r3, #5
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x1f0>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x1f0>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x1f0>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x1f0>
 8003232:	2300      	movs	r3, #0
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	2103      	movs	r1, #3
 8003238:	400a      	ands	r2, r1
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	@ (800331c <HAL_GPIO_Init+0x2d8>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b37      	ldr	r3, [pc, #220]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43da      	mvns	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	035b      	lsls	r3, r3, #13
 800326a:	4013      	ands	r3, r2
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003276:	4b2e      	ldr	r3, [pc, #184]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800327c:	4b2c      	ldr	r3, [pc, #176]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43da      	mvns	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	039b      	lsls	r3, r3, #14
 8003294:	4013      	ands	r3, r2
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032a0:	4b23      	ldr	r3, [pc, #140]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80032a6:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	029b      	lsls	r3, r3, #10
 80032be:	4013      	ands	r3, r2
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80032d0:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43da      	mvns	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	2380      	movs	r3, #128	@ 0x80
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	4013      	ands	r3, r2
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	40da      	lsrs	r2, r3
 8003308:	1e13      	subs	r3, r2, #0
 800330a:	d000      	beq.n	800330e <HAL_GPIO_Init+0x2ca>
 800330c:	e6a2      	b.n	8003054 <HAL_GPIO_Init+0x10>
  } 
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b006      	add	sp, #24
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	40010000 	.word	0x40010000
 8003320:	48000400 	.word	0x48000400
 8003324:	48000800 	.word	0x48000800
 8003328:	48000c00 	.word	0x48000c00
 800332c:	48001000 	.word	0x48001000
 8003330:	40010400 	.word	0x40010400

08003334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	000a      	movs	r2, r1
 800333e:	1cbb      	adds	r3, r7, #2
 8003340:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	1cba      	adds	r2, r7, #2
 8003348:	8812      	ldrh	r2, [r2, #0]
 800334a:	4013      	ands	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800334e:	230f      	movs	r3, #15
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e003      	b.n	8003360 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003358:	230f      	movs	r3, #15
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003360:	230f      	movs	r3, #15
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
  }
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	0008      	movs	r0, r1
 8003378:	0011      	movs	r1, r2
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	1c02      	adds	r2, r0, #0
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	1c7b      	adds	r3, r7, #1
 8003382:	1c0a      	adds	r2, r1, #0
 8003384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003386:	1c7b      	adds	r3, r7, #1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800338e:	1cbb      	adds	r3, r7, #2
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003396:	e003      	b.n	80033a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003398:	1cbb      	adds	r3, r7, #2
 800339a:	881a      	ldrh	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f000 fb76 	bl	8003aa8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d100      	bne.n	80033c8 <HAL_RCC_OscConfig+0x20>
 80033c6:	e08e      	b.n	80034e6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033c8:	4bc5      	ldr	r3, [pc, #788]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	220c      	movs	r2, #12
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d00e      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d4:	4bc2      	ldr	r3, [pc, #776]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	220c      	movs	r2, #12
 80033da:	4013      	ands	r3, r2
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d117      	bne.n	8003410 <HAL_RCC_OscConfig+0x68>
 80033e0:	4bbf      	ldr	r3, [pc, #764]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	025b      	lsls	r3, r3, #9
 80033e8:	401a      	ands	r2, r3
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	025b      	lsls	r3, r3, #9
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10e      	bne.n	8003410 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	4bbb      	ldr	r3, [pc, #748]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	4013      	ands	r3, r2
 80033fc:	d100      	bne.n	8003400 <HAL_RCC_OscConfig+0x58>
 80033fe:	e071      	b.n	80034e4 <HAL_RCC_OscConfig+0x13c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d000      	beq.n	800340a <HAL_RCC_OscConfig+0x62>
 8003408:	e06c      	b.n	80034e4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f000 fb4c 	bl	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x80>
 8003418:	4bb1      	ldr	r3, [pc, #708]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4bb0      	ldr	r3, [pc, #704]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	0249      	lsls	r1, r1, #9
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e02f      	b.n	8003488 <HAL_RCC_OscConfig+0xe0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_RCC_OscConfig+0xa2>
 8003430:	4bab      	ldr	r3, [pc, #684]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4baa      	ldr	r3, [pc, #680]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003436:	49ab      	ldr	r1, [pc, #684]	@ (80036e4 <HAL_RCC_OscConfig+0x33c>)
 8003438:	400a      	ands	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	4ba8      	ldr	r3, [pc, #672]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4ba7      	ldr	r3, [pc, #668]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003442:	49a9      	ldr	r1, [pc, #676]	@ (80036e8 <HAL_RCC_OscConfig+0x340>)
 8003444:	400a      	ands	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e01e      	b.n	8003488 <HAL_RCC_OscConfig+0xe0>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d10e      	bne.n	8003470 <HAL_RCC_OscConfig+0xc8>
 8003452:	4ba3      	ldr	r3, [pc, #652]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4ba2      	ldr	r3, [pc, #648]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003458:	2180      	movs	r1, #128	@ 0x80
 800345a:	02c9      	lsls	r1, r1, #11
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	4b9f      	ldr	r3, [pc, #636]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b9e      	ldr	r3, [pc, #632]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	0249      	lsls	r1, r1, #9
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xe0>
 8003470:	4b9b      	ldr	r3, [pc, #620]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b9a      	ldr	r3, [pc, #616]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003476:	499b      	ldr	r1, [pc, #620]	@ (80036e4 <HAL_RCC_OscConfig+0x33c>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	4b98      	ldr	r3, [pc, #608]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b97      	ldr	r3, [pc, #604]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003482:	4999      	ldr	r1, [pc, #612]	@ (80036e8 <HAL_RCC_OscConfig+0x340>)
 8003484:	400a      	ands	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d014      	beq.n	80034ba <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7ff fcf6 	bl	8002e80 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349a:	f7ff fcf1 	bl	8002e80 <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	@ 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e2fd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ac:	4b8c      	ldr	r3, [pc, #560]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0xf2>
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7ff fce1 	bl	8002e80 <HAL_GetTick>
 80034be:	0003      	movs	r3, r0
 80034c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c4:	f7ff fcdc 	bl	8002e80 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	@ 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e2e8      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b82      	ldr	r3, [pc, #520]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	2380      	movs	r3, #128	@ 0x80
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	4013      	ands	r3, r2
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x11c>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d100      	bne.n	80034f2 <HAL_RCC_OscConfig+0x14a>
 80034f0:	e06c      	b.n	80035cc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034f2:	4b7b      	ldr	r3, [pc, #492]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	220c      	movs	r2, #12
 80034f8:	4013      	ands	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034fc:	4b78      	ldr	r3, [pc, #480]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	220c      	movs	r2, #12
 8003502:	4013      	ands	r3, r2
 8003504:	2b08      	cmp	r3, #8
 8003506:	d11f      	bne.n	8003548 <HAL_RCC_OscConfig+0x1a0>
 8003508:	4b75      	ldr	r3, [pc, #468]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	23c0      	movs	r3, #192	@ 0xc0
 800350e:	025b      	lsls	r3, r3, #9
 8003510:	401a      	ands	r2, r3
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	429a      	cmp	r2, r3
 8003518:	d116      	bne.n	8003548 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	4b71      	ldr	r3, [pc, #452]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2202      	movs	r2, #2
 8003520:	4013      	ands	r3, r2
 8003522:	d005      	beq.n	8003530 <HAL_RCC_OscConfig+0x188>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e2bb      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b6b      	ldr	r3, [pc, #428]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	22f8      	movs	r2, #248	@ 0xf8
 8003536:	4393      	bics	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00da      	lsls	r2, r3, #3
 8003540:	4b67      	ldr	r3, [pc, #412]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	e041      	b.n	80035cc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d024      	beq.n	800359a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	4b63      	ldr	r3, [pc, #396]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b62      	ldr	r3, [pc, #392]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7ff fc90 	bl	8002e80 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003566:	f7ff fc8b 	bl	8002e80 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e297      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	4b59      	ldr	r3, [pc, #356]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d0f1      	beq.n	8003566 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b57      	ldr	r3, [pc, #348]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	22f8      	movs	r2, #248	@ 0xf8
 8003588:	4393      	bics	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00da      	lsls	r2, r3, #3
 8003592:	4b53      	ldr	r3, [pc, #332]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e018      	b.n	80035cc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b51      	ldr	r3, [pc, #324]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b50      	ldr	r3, [pc, #320]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	438a      	bics	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7ff fc6b 	bl	8002e80 <HAL_GetTick>
 80035aa:	0003      	movs	r3, r0
 80035ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b0:	f7ff fc66 	bl	8002e80 <HAL_GetTick>
 80035b4:	0002      	movs	r2, r0
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e272      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1f1      	bne.n	80035b0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2208      	movs	r2, #8
 80035d2:	4013      	ands	r3, r2
 80035d4:	d036      	beq.n	8003644 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d019      	beq.n	8003612 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035de:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e2:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035e4:	2101      	movs	r1, #1
 80035e6:	430a      	orrs	r2, r1
 80035e8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7ff fc49 	bl	8002e80 <HAL_GetTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7ff fc44 	bl	8002e80 <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e250      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b36      	ldr	r3, [pc, #216]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	d0f1      	beq.n	80035f4 <HAL_RCC_OscConfig+0x24c>
 8003610:	e018      	b.n	8003644 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003612:	4b33      	ldr	r3, [pc, #204]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003616:	4b32      	ldr	r3, [pc, #200]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003618:	2101      	movs	r1, #1
 800361a:	438a      	bics	r2, r1
 800361c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7ff fc2f 	bl	8002e80 <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7ff fc2a 	bl	8002e80 <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e236      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363a:	4b29      	ldr	r3, [pc, #164]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d1f1      	bne.n	8003628 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2204      	movs	r2, #4
 800364a:	4013      	ands	r3, r2
 800364c:	d100      	bne.n	8003650 <HAL_RCC_OscConfig+0x2a8>
 800364e:	e0b5      	b.n	80037bc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003650:	201f      	movs	r0, #31
 8003652:	183b      	adds	r3, r7, r0
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003658:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	4013      	ands	r3, r2
 8003662:	d110      	bne.n	8003686 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003664:	4b1e      	ldr	r3, [pc, #120]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800366a:	2180      	movs	r1, #128	@ 0x80
 800366c:	0549      	lsls	r1, r1, #21
 800366e:	430a      	orrs	r2, r1
 8003670:	61da      	str	r2, [r3, #28]
 8003672:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	2380      	movs	r3, #128	@ 0x80
 8003678:	055b      	lsls	r3, r3, #21
 800367a:	4013      	ands	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003680:	183b      	adds	r3, r7, r0
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d11a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	0049      	lsls	r1, r1, #1
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a0:	f7ff fbee 	bl	8002e80 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7ff fbe9 	bl	8002e80 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	@ 0x64
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1f5      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d10f      	bne.n	80036f0 <HAL_RCC_OscConfig+0x348>
 80036d0:	4b03      	ldr	r3, [pc, #12]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	4b02      	ldr	r3, [pc, #8]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	430a      	orrs	r2, r1
 80036da:	621a      	str	r2, [r3, #32]
 80036dc:	e036      	b.n	800374c <HAL_RCC_OscConfig+0x3a4>
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	40021000 	.word	0x40021000
 80036e4:	fffeffff 	.word	0xfffeffff
 80036e8:	fffbffff 	.word	0xfffbffff
 80036ec:	40007000 	.word	0x40007000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x36a>
 80036f8:	4bca      	ldr	r3, [pc, #808]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	4bc9      	ldr	r3, [pc, #804]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	621a      	str	r2, [r3, #32]
 8003704:	4bc7      	ldr	r3, [pc, #796]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	4bc6      	ldr	r3, [pc, #792]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800370a:	2104      	movs	r1, #4
 800370c:	438a      	bics	r2, r1
 800370e:	621a      	str	r2, [r3, #32]
 8003710:	e01c      	b.n	800374c <HAL_RCC_OscConfig+0x3a4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b05      	cmp	r3, #5
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x38c>
 800371a:	4bc2      	ldr	r3, [pc, #776]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	4bc1      	ldr	r3, [pc, #772]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003720:	2104      	movs	r1, #4
 8003722:	430a      	orrs	r2, r1
 8003724:	621a      	str	r2, [r3, #32]
 8003726:	4bbf      	ldr	r3, [pc, #764]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	4bbe      	ldr	r3, [pc, #760]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800372c:	2101      	movs	r1, #1
 800372e:	430a      	orrs	r2, r1
 8003730:	621a      	str	r2, [r3, #32]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0x3a4>
 8003734:	4bbb      	ldr	r3, [pc, #748]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4bba      	ldr	r3, [pc, #744]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	621a      	str	r2, [r3, #32]
 8003740:	4bb8      	ldr	r3, [pc, #736]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	4bb7      	ldr	r3, [pc, #732]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003746:	2104      	movs	r1, #4
 8003748:	438a      	bics	r2, r1
 800374a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d014      	beq.n	800377e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003754:	f7ff fb94 	bl	8002e80 <HAL_GetTick>
 8003758:	0003      	movs	r3, r0
 800375a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e009      	b.n	8003772 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7ff fb8f 	bl	8002e80 <HAL_GetTick>
 8003762:	0002      	movs	r2, r0
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	4aaf      	ldr	r2, [pc, #700]	@ (8003a28 <HAL_RCC_OscConfig+0x680>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e19a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003772:	4bac      	ldr	r3, [pc, #688]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	2202      	movs	r2, #2
 8003778:	4013      	ands	r3, r2
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x3b6>
 800377c:	e013      	b.n	80037a6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7ff fb7f 	bl	8002e80 <HAL_GetTick>
 8003782:	0003      	movs	r3, r0
 8003784:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	e009      	b.n	800379c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7ff fb7a 	bl	8002e80 <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	4aa5      	ldr	r2, [pc, #660]	@ (8003a28 <HAL_RCC_OscConfig+0x680>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e185      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	4ba1      	ldr	r3, [pc, #644]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	2202      	movs	r2, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a6:	231f      	movs	r3, #31
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b9c      	ldr	r3, [pc, #624]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037b6:	499d      	ldr	r1, [pc, #628]	@ (8003a2c <HAL_RCC_OscConfig+0x684>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2210      	movs	r2, #16
 80037c2:	4013      	ands	r3, r2
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d12a      	bne.n	8003824 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037ce:	4b95      	ldr	r3, [pc, #596]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037d2:	4b94      	ldr	r3, [pc, #592]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037d4:	2104      	movs	r1, #4
 80037d6:	430a      	orrs	r2, r1
 80037d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80037da:	4b92      	ldr	r3, [pc, #584]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037de:	4b91      	ldr	r3, [pc, #580]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	430a      	orrs	r2, r1
 80037e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e6:	f7ff fb4b 	bl	8002e80 <HAL_GetTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037f0:	f7ff fb46 	bl	8002e80 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e152      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003802:	4b88      	ldr	r3, [pc, #544]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	2202      	movs	r2, #2
 8003808:	4013      	ands	r3, r2
 800380a:	d0f1      	beq.n	80037f0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800380c:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800380e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003810:	22f8      	movs	r2, #248	@ 0xf8
 8003812:	4393      	bics	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	00da      	lsls	r2, r3, #3
 800381c:	4b81      	ldr	r3, [pc, #516]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800381e:	430a      	orrs	r2, r1
 8003820:	635a      	str	r2, [r3, #52]	@ 0x34
 8003822:	e034      	b.n	800388e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	3305      	adds	r3, #5
 800382a:	d111      	bne.n	8003850 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800382c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800382e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003830:	4b7c      	ldr	r3, [pc, #496]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003832:	2104      	movs	r1, #4
 8003834:	438a      	bics	r2, r1
 8003836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003838:	4b7a      	ldr	r3, [pc, #488]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800383a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383c:	22f8      	movs	r2, #248	@ 0xf8
 800383e:	4393      	bics	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	00da      	lsls	r2, r3, #3
 8003848:	4b76      	ldr	r3, [pc, #472]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800384a:	430a      	orrs	r2, r1
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34
 800384e:	e01e      	b.n	800388e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003850:	4b74      	ldr	r3, [pc, #464]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003854:	4b73      	ldr	r3, [pc, #460]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003856:	2104      	movs	r1, #4
 8003858:	430a      	orrs	r2, r1
 800385a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800385c:	4b71      	ldr	r3, [pc, #452]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800385e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003860:	4b70      	ldr	r3, [pc, #448]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003862:	2101      	movs	r1, #1
 8003864:	438a      	bics	r2, r1
 8003866:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7ff fb0a 	bl	8002e80 <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003872:	f7ff fb05 	bl	8002e80 <HAL_GetTick>
 8003876:	0002      	movs	r2, r0
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e111      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003884:	4b67      	ldr	r3, [pc, #412]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003888:	2202      	movs	r2, #2
 800388a:	4013      	ands	r3, r2
 800388c:	d1f1      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2220      	movs	r2, #32
 8003894:	4013      	ands	r3, r2
 8003896:	d05c      	beq.n	8003952 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003898:	4b62      	ldr	r3, [pc, #392]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	220c      	movs	r2, #12
 800389e:	4013      	ands	r3, r2
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d00e      	beq.n	80038c2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	220c      	movs	r2, #12
 80038aa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d114      	bne.n	80038da <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	23c0      	movs	r3, #192	@ 0xc0
 80038b6:	025b      	lsls	r3, r3, #9
 80038b8:	401a      	ands	r2, r3
 80038ba:	23c0      	movs	r3, #192	@ 0xc0
 80038bc:	025b      	lsls	r3, r3, #9
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80038c2:	4b58      	ldr	r3, [pc, #352]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c6:	2380      	movs	r3, #128	@ 0x80
 80038c8:	029b      	lsls	r3, r3, #10
 80038ca:	4013      	ands	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_RCC_OscConfig+0x5a8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d03c      	beq.n	8003950 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0e6      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01b      	beq.n	800391a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80038e2:	4b50      	ldr	r3, [pc, #320]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038e8:	2180      	movs	r1, #128	@ 0x80
 80038ea:	0249      	lsls	r1, r1, #9
 80038ec:	430a      	orrs	r2, r1
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7ff fac6 	bl	8002e80 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038fa:	f7ff fac1 	bl	8002e80 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0cd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800390c:	4b45      	ldr	r3, [pc, #276]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800390e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	4013      	ands	r3, r2
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x552>
 8003918:	e01b      	b.n	8003952 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800391a:	4b42      	ldr	r3, [pc, #264]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800391c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003920:	4943      	ldr	r1, [pc, #268]	@ (8003a30 <HAL_RCC_OscConfig+0x688>)
 8003922:	400a      	ands	r2, r1
 8003924:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7ff faab 	bl	8002e80 <HAL_GetTick>
 800392a:	0003      	movs	r3, r0
 800392c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003930:	f7ff faa6 	bl	8002e80 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0b2      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003942:	4b38      	ldr	r3, [pc, #224]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	4013      	ands	r3, r2
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x588>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003950:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d100      	bne.n	800395c <HAL_RCC_OscConfig+0x5b4>
 800395a:	e0a4      	b.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800395c:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	220c      	movs	r2, #12
 8003962:	4013      	ands	r3, r2
 8003964:	2b08      	cmp	r3, #8
 8003966:	d100      	bne.n	800396a <HAL_RCC_OscConfig+0x5c2>
 8003968:	e078      	b.n	8003a5c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	2b02      	cmp	r3, #2
 8003970:	d14c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b2c      	ldr	r3, [pc, #176]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b2b      	ldr	r3, [pc, #172]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003978:	492e      	ldr	r1, [pc, #184]	@ (8003a34 <HAL_RCC_OscConfig+0x68c>)
 800397a:	400a      	ands	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7ff fa7f 	bl	8002e80 <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003988:	f7ff fa7a 	bl	8002e80 <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e086      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399a:	4b22      	ldr	r3, [pc, #136]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	049b      	lsls	r3, r3, #18
 80039a2:	4013      	ands	r3, r2
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	220f      	movs	r2, #15
 80039ac:	4393      	bics	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <HAL_RCC_OscConfig+0x690>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	431a      	orrs	r2, r3
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	0449      	lsls	r1, r1, #17
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7ff fa4d 	bl	8002e80 <HAL_GetTick>
 80039e6:	0003      	movs	r3, r0
 80039e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7ff fa48 	bl	8002e80 <HAL_GetTick>
 80039f0:	0002      	movs	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e054      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fe:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	049b      	lsls	r3, r3, #18
 8003a06:	4013      	ands	r3, r2
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x644>
 8003a0a:	e04c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003a12:	4908      	ldr	r1, [pc, #32]	@ (8003a34 <HAL_RCC_OscConfig+0x68c>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7ff fa32 	bl	8002e80 <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x6a6>
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	40021000 	.word	0x40021000
 8003a28:	00001388 	.word	0x00001388
 8003a2c:	efffffff 	.word	0xefffffff
 8003a30:	fffeffff 	.word	0xfffeffff
 8003a34:	feffffff 	.word	0xfeffffff
 8003a38:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7ff fa20 	bl	8002e80 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e02c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4e:	4b18      	ldr	r3, [pc, #96]	@ (8003ab0 <HAL_RCC_OscConfig+0x708>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	049b      	lsls	r3, r3, #18
 8003a56:	4013      	ands	r3, r2
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x694>
 8003a5a:	e024      	b.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e01f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a68:	4b11      	ldr	r3, [pc, #68]	@ (8003ab0 <HAL_RCC_OscConfig+0x708>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_OscConfig+0x708>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	23c0      	movs	r3, #192	@ 0xc0
 8003a78:	025b      	lsls	r3, r3, #9
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d10e      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	220f      	movs	r2, #15
 8003a88:	401a      	ands	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	23f0      	movs	r3, #240	@ 0xf0
 8003a96:	039b      	lsls	r3, r3, #14
 8003a98:	401a      	ands	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b008      	add	sp, #32
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0bf      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b61      	ldr	r3, [pc, #388]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2201      	movs	r2, #1
 8003ace:	4013      	ands	r3, r2
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d911      	bls.n	8003afa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4393      	bics	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae8:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0a6      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2202      	movs	r2, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d015      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d006      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b0e:	4b51      	ldr	r3, [pc, #324]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4b50      	ldr	r3, [pc, #320]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b14:	21e0      	movs	r1, #224	@ 0xe0
 8003b16:	00c9      	lsls	r1, r1, #3
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	22f0      	movs	r2, #240	@ 0xf0
 8003b22:	4393      	bics	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	d04c      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b44      	ldr	r3, [pc, #272]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	029b      	lsls	r3, r3, #10
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d120      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07a      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	049b      	lsls	r3, r3, #18
 8003b62:	4013      	ands	r3, r2
 8003b64:	d114      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06e      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003b72:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	029b      	lsls	r3, r3, #10
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d108      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e062      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2202      	movs	r2, #2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e05b      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b90:	4b30      	ldr	r3, [pc, #192]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4393      	bics	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7ff f96c 	bl	8002e80 <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bac:	e009      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bae:	f7ff f967 	bl	8002e80 <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <HAL_RCC_ClockConfig+0x1a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e042      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	401a      	ands	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1ec      	bne.n	8003bae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	4013      	ands	r3, r2
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d211      	bcs.n	8003c06 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4393      	bics	r3, r2
 8003bea:	0019      	movs	r1, r3
 8003bec:	4b18      	ldr	r3, [pc, #96]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf4:	4b16      	ldr	r3, [pc, #88]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e020      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a11      	ldr	r2, [pc, #68]	@ (8003c5c <HAL_RCC_ClockConfig+0x1a8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c24:	f000 f820 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8003c28:	0001      	movs	r1, r0
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	220f      	movs	r2, #15
 8003c32:	4013      	ands	r3, r2
 8003c34:	4a0a      	ldr	r2, [pc, #40]	@ (8003c60 <HAL_RCC_ClockConfig+0x1ac>)
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	000a      	movs	r2, r1
 8003c3a:	40da      	lsrs	r2, r3
 8003c3c:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c40:	2003      	movs	r0, #3
 8003c42:	f7ff f8d7 	bl	8002df4 <HAL_InitTick>
  
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b004      	add	sp, #16
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40022000 	.word	0x40022000
 8003c54:	40021000 	.word	0x40021000
 8003c58:	00001388 	.word	0x00001388
 8003c5c:	fffff8ff 	.word	0xfffff8ff
 8003c60:	080075a0 	.word	0x080075a0
 8003c64:	20000000 	.word	0x20000000

08003c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c82:	4b2d      	ldr	r3, [pc, #180]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d046      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0xb8>
 8003c92:	d848      	bhi.n	8003d26 <HAL_RCC_GetSysClockFreq+0xbe>
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d002      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x36>
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d003      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003c9c:	e043      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c9e:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ca0:	613b      	str	r3, [r7, #16]
      break;
 8003ca2:	e043      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	0c9b      	lsrs	r3, r3, #18
 8003ca8:	220f      	movs	r2, #15
 8003caa:	4013      	ands	r3, r2
 8003cac:	4a24      	ldr	r2, [pc, #144]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003cb2:	4b21      	ldr	r3, [pc, #132]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	4013      	ands	r3, r2
 8003cba:	4a22      	ldr	r2, [pc, #136]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	23c0      	movs	r3, #192	@ 0xc0
 8003cc4:	025b      	lsls	r3, r3, #9
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	481a      	ldr	r0, [pc, #104]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cd4:	f7fc fa32 	bl	800013c <__udivsi3>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	001a      	movs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4353      	muls	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e01a      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	23c0      	movs	r3, #192	@ 0xc0
 8003ce8:	025b      	lsls	r3, r3, #9
 8003cea:	401a      	ands	r2, r3
 8003cec:	23c0      	movs	r3, #192	@ 0xc0
 8003cee:	025b      	lsls	r3, r3, #9
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d109      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4814      	ldr	r0, [pc, #80]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003cf8:	f7fc fa20 	bl	800013c <__udivsi3>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	001a      	movs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4353      	muls	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	480c      	ldr	r0, [pc, #48]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d0c:	f7fc fa16 	bl	800013c <__udivsi3>
 8003d10:	0003      	movs	r3, r0
 8003d12:	001a      	movs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4353      	muls	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	613b      	str	r3, [r7, #16]
      break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003d22:	613b      	str	r3, [r7, #16]
      break;
 8003d24:	e002      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d28:	613b      	str	r3, [r7, #16]
      break;
 8003d2a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d2c:	693b      	ldr	r3, [r7, #16]
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	080075b8 	.word	0x080075b8
 8003d44:	080075c8 	.word	0x080075c8
 8003d48:	02dc6c00 	.word	0x02dc6c00

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b02      	ldr	r3, [pc, #8]	@ (8003d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	20000000 	.word	0x20000000

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d64:	f7ff fff2 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d68:	0001      	movs	r1, r0
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	2207      	movs	r2, #7
 8003d72:	4013      	ands	r3, r2
 8003d74:	4a04      	ldr	r2, [pc, #16]	@ (8003d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	40d9      	lsrs	r1, r3
 8003d7a:	000b      	movs	r3, r1
}    
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	40021000 	.word	0x40021000
 8003d88:	080075b0 	.word	0x080075b0

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	@ 0x80
 8003da2:	025b      	lsls	r3, r3, #9
 8003da4:	4013      	ands	r3, r2
 8003da6:	d100      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003da8:	e08e      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003daa:	2017      	movs	r0, #23
 8003dac:	183b      	adds	r3, r7, r0
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	2380      	movs	r3, #128	@ 0x80
 8003db8:	055b      	lsls	r3, r3, #21
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d110      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dc0:	69da      	ldr	r2, [r3, #28]
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dc4:	2180      	movs	r1, #128	@ 0x80
 8003dc6:	0549      	lsls	r1, r1, #21
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
 8003dcc:	4b67      	ldr	r3, [pc, #412]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	055b      	lsls	r3, r3, #21
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	4b63      	ldr	r3, [pc, #396]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	d11a      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dec:	4b60      	ldr	r3, [pc, #384]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b5f      	ldr	r3, [pc, #380]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003df2:	2180      	movs	r1, #128	@ 0x80
 8003df4:	0049      	lsls	r1, r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7ff f841 	bl	8002e80 <HAL_GetTick>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7ff f83c 	bl	8002e80 <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	@ 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0a6      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b56      	ldr	r3, [pc, #344]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e22:	4b52      	ldr	r3, [pc, #328]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	23c0      	movs	r3, #192	@ 0xc0
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d034      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	23c0      	movs	r3, #192	@ 0xc0
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d02c      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e44:	4b49      	ldr	r3, [pc, #292]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4e:	4b47      	ldr	r3, [pc, #284]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	4b46      	ldr	r3, [pc, #280]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e54:	2180      	movs	r1, #128	@ 0x80
 8003e56:	0249      	lsls	r1, r1, #9
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5c:	4b43      	ldr	r3, [pc, #268]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	4b42      	ldr	r3, [pc, #264]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e62:	4945      	ldr	r1, [pc, #276]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e68:	4b40      	ldr	r3, [pc, #256]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	4013      	ands	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7ff f803 	bl	8002e80 <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	e009      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fe fffe 	bl	8002e80 <HAL_GetTick>
 8003e84:	0002      	movs	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	4a3c      	ldr	r2, [pc, #240]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e067      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	4b35      	ldr	r3, [pc, #212]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9e:	4b33      	ldr	r3, [pc, #204]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	4a34      	ldr	r2, [pc, #208]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4b2f      	ldr	r3, [pc, #188]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eb2:	2317      	movs	r3, #23
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ec2:	492f      	ldr	r1, [pc, #188]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed2:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	4393      	bics	r3, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2202      	movs	r2, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	4a23      	ldr	r2, [pc, #140]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	0019      	movs	r1, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f00:	430a      	orrs	r2, r1
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	02db      	lsls	r3, r3, #11
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f10:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f14:	4a1c      	ldr	r2, [pc, #112]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	4b13      	ldr	r3, [pc, #76]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f20:	430a      	orrs	r2, r1
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	2210      	movs	r2, #16
 8003f34:	4393      	bics	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	2380      	movs	r3, #128	@ 0x80
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f4e:	4b07      	ldr	r3, [pc, #28]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	2240      	movs	r2, #64	@ 0x40
 8003f54:	4393      	bics	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	4b03      	ldr	r3, [pc, #12]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b006      	add	sp, #24
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
 8003f74:	fffffcff 	.word	0xfffffcff
 8003f78:	fffeffff 	.word	0xfffeffff
 8003f7c:	00001388 	.word	0x00001388
 8003f80:	efffffff 	.word	0xefffffff
 8003f84:	fffcffff 	.word	0xfffcffff
 8003f88:	fff3ffff 	.word	0xfff3ffff

08003f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e044      	b.n	8004028 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2278      	movs	r2, #120	@ 0x78
 8003faa:	2100      	movs	r1, #0
 8003fac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7fe fe83 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	@ 0x24
 8003fba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	438a      	bics	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 fab4 	bl	8004544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 f8c8 	bl	8004174 <UART_SetConfig>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e01c      	b.n	8004028 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	490d      	ldr	r1, [pc, #52]	@ (8004030 <HAL_UART_Init+0xa4>)
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	212a      	movs	r1, #42	@ 0x2a
 800400a:	438a      	bics	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2101      	movs	r1, #1
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 fb43 	bl	80046ac <UART_CheckIdleState>
 8004026:	0003      	movs	r3, r0
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}
 8004030:	ffffb7ff 	.word	0xffffb7ff

08004034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	@ 0x28
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	1dbb      	adds	r3, r7, #6
 8004042:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004048:	2b20      	cmp	r3, #32
 800404a:	d000      	beq.n	800404e <HAL_UART_Transmit+0x1a>
 800404c:	e08c      	b.n	8004168 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_UART_Transmit+0x28>
 8004054:	1dbb      	adds	r3, r7, #6
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e084      	b.n	800416a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	015b      	lsls	r3, r3, #5
 8004068:	429a      	cmp	r2, r3
 800406a:	d109      	bne.n	8004080 <HAL_UART_Transmit+0x4c>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d105      	bne.n	8004080 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2201      	movs	r2, #1
 8004078:	4013      	ands	r3, r2
 800407a:	d001      	beq.n	8004080 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e074      	b.n	800416a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2284      	movs	r2, #132	@ 0x84
 8004084:	2100      	movs	r1, #0
 8004086:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2221      	movs	r2, #33	@ 0x21
 800408c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408e:	f7fe fef7 	bl	8002e80 <HAL_GetTick>
 8004092:	0003      	movs	r3, r0
 8004094:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1dba      	adds	r2, r7, #6
 800409a:	2150      	movs	r1, #80	@ 0x50
 800409c:	8812      	ldrh	r2, [r2, #0]
 800409e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1dba      	adds	r2, r7, #6
 80040a4:	2152      	movs	r1, #82	@ 0x52
 80040a6:	8812      	ldrh	r2, [r2, #0]
 80040a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	015b      	lsls	r3, r3, #5
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d108      	bne.n	80040c8 <HAL_UART_Transmit+0x94>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e003      	b.n	80040d0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d0:	e02f      	b.n	8004132 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	0013      	movs	r3, r2
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	@ 0x80
 80040e0:	f000 fb8c 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d004      	beq.n	80040f2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e03b      	b.n	800416a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	881a      	ldrh	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	05d2      	lsls	r2, r2, #23
 8004102:	0dd2      	lsrs	r2, r2, #23
 8004104:	b292      	uxth	r2, r2
 8004106:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	3302      	adds	r3, #2
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e007      	b.n	8004120 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2252      	movs	r2, #82	@ 0x52
 8004124:	5a9b      	ldrh	r3, [r3, r2]
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b299      	uxth	r1, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2252      	movs	r2, #82	@ 0x52
 8004130:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2252      	movs	r2, #82	@ 0x52
 8004136:	5a9b      	ldrh	r3, [r3, r2]
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1c9      	bne.n	80040d2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	0013      	movs	r3, r2
 8004148:	2200      	movs	r2, #0
 800414a:	2140      	movs	r1, #64	@ 0x40
 800414c:	f000 fb56 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 8004150:	1e03      	subs	r3, r0, #0
 8004152:	d004      	beq.n	800415e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e005      	b.n	800416a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
  }
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b008      	add	sp, #32
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800417c:	231e      	movs	r3, #30
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4abe      	ldr	r2, [pc, #760]	@ (800449c <UART_SetConfig+0x328>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4ab9      	ldr	r2, [pc, #740]	@ (80044a0 <UART_SetConfig+0x32c>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4ab0      	ldr	r2, [pc, #704]	@ (80044a4 <UART_SetConfig+0x330>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	0019      	movs	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4aac      	ldr	r2, [pc, #688]	@ (80044a8 <UART_SetConfig+0x334>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d127      	bne.n	800424a <UART_SetConfig+0xd6>
 80041fa:	4bac      	ldr	r3, [pc, #688]	@ (80044ac <UART_SetConfig+0x338>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	2203      	movs	r2, #3
 8004200:	4013      	ands	r3, r2
 8004202:	2b03      	cmp	r3, #3
 8004204:	d00d      	beq.n	8004222 <UART_SetConfig+0xae>
 8004206:	d81b      	bhi.n	8004240 <UART_SetConfig+0xcc>
 8004208:	2b02      	cmp	r3, #2
 800420a:	d014      	beq.n	8004236 <UART_SetConfig+0xc2>
 800420c:	d818      	bhi.n	8004240 <UART_SetConfig+0xcc>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <UART_SetConfig+0xa4>
 8004212:	2b01      	cmp	r3, #1
 8004214:	d00a      	beq.n	800422c <UART_SetConfig+0xb8>
 8004216:	e013      	b.n	8004240 <UART_SetConfig+0xcc>
 8004218:	231f      	movs	r3, #31
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e0bd      	b.n	800439e <UART_SetConfig+0x22a>
 8004222:	231f      	movs	r3, #31
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	2202      	movs	r2, #2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e0b8      	b.n	800439e <UART_SetConfig+0x22a>
 800422c:	231f      	movs	r3, #31
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2204      	movs	r2, #4
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e0b3      	b.n	800439e <UART_SetConfig+0x22a>
 8004236:	231f      	movs	r3, #31
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2208      	movs	r2, #8
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e0ae      	b.n	800439e <UART_SetConfig+0x22a>
 8004240:	231f      	movs	r3, #31
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2210      	movs	r2, #16
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e0a9      	b.n	800439e <UART_SetConfig+0x22a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a98      	ldr	r2, [pc, #608]	@ (80044b0 <UART_SetConfig+0x33c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d134      	bne.n	80042be <UART_SetConfig+0x14a>
 8004254:	4b95      	ldr	r3, [pc, #596]	@ (80044ac <UART_SetConfig+0x338>)
 8004256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004258:	23c0      	movs	r3, #192	@ 0xc0
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	4013      	ands	r3, r2
 800425e:	22c0      	movs	r2, #192	@ 0xc0
 8004260:	0292      	lsls	r2, r2, #10
 8004262:	4293      	cmp	r3, r2
 8004264:	d017      	beq.n	8004296 <UART_SetConfig+0x122>
 8004266:	22c0      	movs	r2, #192	@ 0xc0
 8004268:	0292      	lsls	r2, r2, #10
 800426a:	4293      	cmp	r3, r2
 800426c:	d822      	bhi.n	80042b4 <UART_SetConfig+0x140>
 800426e:	2280      	movs	r2, #128	@ 0x80
 8004270:	0292      	lsls	r2, r2, #10
 8004272:	4293      	cmp	r3, r2
 8004274:	d019      	beq.n	80042aa <UART_SetConfig+0x136>
 8004276:	2280      	movs	r2, #128	@ 0x80
 8004278:	0292      	lsls	r2, r2, #10
 800427a:	4293      	cmp	r3, r2
 800427c:	d81a      	bhi.n	80042b4 <UART_SetConfig+0x140>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <UART_SetConfig+0x118>
 8004282:	2280      	movs	r2, #128	@ 0x80
 8004284:	0252      	lsls	r2, r2, #9
 8004286:	4293      	cmp	r3, r2
 8004288:	d00a      	beq.n	80042a0 <UART_SetConfig+0x12c>
 800428a:	e013      	b.n	80042b4 <UART_SetConfig+0x140>
 800428c:	231f      	movs	r3, #31
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e083      	b.n	800439e <UART_SetConfig+0x22a>
 8004296:	231f      	movs	r3, #31
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e07e      	b.n	800439e <UART_SetConfig+0x22a>
 80042a0:	231f      	movs	r3, #31
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2204      	movs	r2, #4
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e079      	b.n	800439e <UART_SetConfig+0x22a>
 80042aa:	231f      	movs	r3, #31
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	2208      	movs	r2, #8
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e074      	b.n	800439e <UART_SetConfig+0x22a>
 80042b4:	231f      	movs	r3, #31
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	2210      	movs	r2, #16
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e06f      	b.n	800439e <UART_SetConfig+0x22a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7c      	ldr	r2, [pc, #496]	@ (80044b4 <UART_SetConfig+0x340>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d134      	bne.n	8004332 <UART_SetConfig+0x1be>
 80042c8:	4b78      	ldr	r3, [pc, #480]	@ (80044ac <UART_SetConfig+0x338>)
 80042ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042cc:	23c0      	movs	r3, #192	@ 0xc0
 80042ce:	031b      	lsls	r3, r3, #12
 80042d0:	4013      	ands	r3, r2
 80042d2:	22c0      	movs	r2, #192	@ 0xc0
 80042d4:	0312      	lsls	r2, r2, #12
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d017      	beq.n	800430a <UART_SetConfig+0x196>
 80042da:	22c0      	movs	r2, #192	@ 0xc0
 80042dc:	0312      	lsls	r2, r2, #12
 80042de:	4293      	cmp	r3, r2
 80042e0:	d822      	bhi.n	8004328 <UART_SetConfig+0x1b4>
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	0312      	lsls	r2, r2, #12
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d019      	beq.n	800431e <UART_SetConfig+0x1aa>
 80042ea:	2280      	movs	r2, #128	@ 0x80
 80042ec:	0312      	lsls	r2, r2, #12
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d81a      	bhi.n	8004328 <UART_SetConfig+0x1b4>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <UART_SetConfig+0x18c>
 80042f6:	2280      	movs	r2, #128	@ 0x80
 80042f8:	02d2      	lsls	r2, r2, #11
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00a      	beq.n	8004314 <UART_SetConfig+0x1a0>
 80042fe:	e013      	b.n	8004328 <UART_SetConfig+0x1b4>
 8004300:	231f      	movs	r3, #31
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e049      	b.n	800439e <UART_SetConfig+0x22a>
 800430a:	231f      	movs	r3, #31
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2202      	movs	r2, #2
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e044      	b.n	800439e <UART_SetConfig+0x22a>
 8004314:	231f      	movs	r3, #31
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2204      	movs	r2, #4
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e03f      	b.n	800439e <UART_SetConfig+0x22a>
 800431e:	231f      	movs	r3, #31
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	2208      	movs	r2, #8
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e03a      	b.n	800439e <UART_SetConfig+0x22a>
 8004328:	231f      	movs	r3, #31
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2210      	movs	r2, #16
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e035      	b.n	800439e <UART_SetConfig+0x22a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a60      	ldr	r2, [pc, #384]	@ (80044b8 <UART_SetConfig+0x344>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d104      	bne.n	8004346 <UART_SetConfig+0x1d2>
 800433c:	231f      	movs	r3, #31
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e02b      	b.n	800439e <UART_SetConfig+0x22a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a5c      	ldr	r2, [pc, #368]	@ (80044bc <UART_SetConfig+0x348>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d104      	bne.n	800435a <UART_SetConfig+0x1e6>
 8004350:	231f      	movs	r3, #31
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e021      	b.n	800439e <UART_SetConfig+0x22a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a58      	ldr	r2, [pc, #352]	@ (80044c0 <UART_SetConfig+0x34c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d104      	bne.n	800436e <UART_SetConfig+0x1fa>
 8004364:	231f      	movs	r3, #31
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e017      	b.n	800439e <UART_SetConfig+0x22a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a54      	ldr	r2, [pc, #336]	@ (80044c4 <UART_SetConfig+0x350>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d104      	bne.n	8004382 <UART_SetConfig+0x20e>
 8004378:	231f      	movs	r3, #31
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e00d      	b.n	800439e <UART_SetConfig+0x22a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a50      	ldr	r2, [pc, #320]	@ (80044c8 <UART_SetConfig+0x354>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d104      	bne.n	8004396 <UART_SetConfig+0x222>
 800438c:	231f      	movs	r3, #31
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e003      	b.n	800439e <UART_SetConfig+0x22a>
 8004396:	231f      	movs	r3, #31
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2210      	movs	r2, #16
 800439c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	2380      	movs	r3, #128	@ 0x80
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d15c      	bne.n	8004464 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80043aa:	231f      	movs	r3, #31
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d015      	beq.n	80043e0 <UART_SetConfig+0x26c>
 80043b4:	dc18      	bgt.n	80043e8 <UART_SetConfig+0x274>
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d00d      	beq.n	80043d6 <UART_SetConfig+0x262>
 80043ba:	dc15      	bgt.n	80043e8 <UART_SetConfig+0x274>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <UART_SetConfig+0x252>
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d005      	beq.n	80043d0 <UART_SetConfig+0x25c>
 80043c4:	e010      	b.n	80043e8 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c6:	f7ff fccb 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 80043ca:	0003      	movs	r3, r0
 80043cc:	61bb      	str	r3, [r7, #24]
        break;
 80043ce:	e012      	b.n	80043f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d0:	4b3e      	ldr	r3, [pc, #248]	@ (80044cc <UART_SetConfig+0x358>)
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e00f      	b.n	80043f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d6:	f7ff fc47 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 80043da:	0003      	movs	r3, r0
 80043dc:	61bb      	str	r3, [r7, #24]
        break;
 80043de:	e00a      	b.n	80043f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e0:	2380      	movs	r3, #128	@ 0x80
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	61bb      	str	r3, [r7, #24]
        break;
 80043e6:	e006      	b.n	80043f6 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ec:	231e      	movs	r3, #30
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	2201      	movs	r2, #1
 80043f2:	701a      	strb	r2, [r3, #0]
        break;
 80043f4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d100      	bne.n	80043fe <UART_SetConfig+0x28a>
 80043fc:	e095      	b.n	800452a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	005a      	lsls	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	18d2      	adds	r2, r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0019      	movs	r1, r3
 8004410:	0010      	movs	r0, r2
 8004412:	f7fb fe93 	bl	800013c <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b0f      	cmp	r3, #15
 800441e:	d91c      	bls.n	800445a <UART_SetConfig+0x2e6>
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	025b      	lsls	r3, r3, #9
 8004426:	429a      	cmp	r2, r3
 8004428:	d217      	bcs.n	800445a <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	b29a      	uxth	r2, r3
 800442e:	200e      	movs	r0, #14
 8004430:	183b      	adds	r3, r7, r0
 8004432:	210f      	movs	r1, #15
 8004434:	438a      	bics	r2, r1
 8004436:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	b29b      	uxth	r3, r3
 800443e:	2207      	movs	r2, #7
 8004440:	4013      	ands	r3, r2
 8004442:	b299      	uxth	r1, r3
 8004444:	183b      	adds	r3, r7, r0
 8004446:	183a      	adds	r2, r7, r0
 8004448:	8812      	ldrh	r2, [r2, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	183a      	adds	r2, r7, r0
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e067      	b.n	800452a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800445a:	231e      	movs	r3, #30
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	e062      	b.n	800452a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004464:	231f      	movs	r3, #31
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b08      	cmp	r3, #8
 800446c:	d030      	beq.n	80044d0 <UART_SetConfig+0x35c>
 800446e:	dc33      	bgt.n	80044d8 <UART_SetConfig+0x364>
 8004470:	2b04      	cmp	r3, #4
 8004472:	d00d      	beq.n	8004490 <UART_SetConfig+0x31c>
 8004474:	dc30      	bgt.n	80044d8 <UART_SetConfig+0x364>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <UART_SetConfig+0x30c>
 800447a:	2b02      	cmp	r3, #2
 800447c:	d005      	beq.n	800448a <UART_SetConfig+0x316>
 800447e:	e02b      	b.n	80044d8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004480:	f7ff fc6e 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8004484:	0003      	movs	r3, r0
 8004486:	61bb      	str	r3, [r7, #24]
        break;
 8004488:	e02d      	b.n	80044e6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <UART_SetConfig+0x358>)
 800448c:	61bb      	str	r3, [r7, #24]
        break;
 800448e:	e02a      	b.n	80044e6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004490:	f7ff fbea 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8004494:	0003      	movs	r3, r0
 8004496:	61bb      	str	r3, [r7, #24]
        break;
 8004498:	e025      	b.n	80044e6 <UART_SetConfig+0x372>
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	efff69f3 	.word	0xefff69f3
 80044a0:	ffffcfff 	.word	0xffffcfff
 80044a4:	fffff4ff 	.word	0xfffff4ff
 80044a8:	40013800 	.word	0x40013800
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40004400 	.word	0x40004400
 80044b4:	40004800 	.word	0x40004800
 80044b8:	40004c00 	.word	0x40004c00
 80044bc:	40005000 	.word	0x40005000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	40011800 	.word	0x40011800
 80044c8:	40011c00 	.word	0x40011c00
 80044cc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d0:	2380      	movs	r3, #128	@ 0x80
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	61bb      	str	r3, [r7, #24]
        break;
 80044d6:	e006      	b.n	80044e6 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044dc:	231e      	movs	r3, #30
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
        break;
 80044e4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01e      	beq.n	800452a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	085a      	lsrs	r2, r3, #1
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	18d2      	adds	r2, r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	0019      	movs	r1, r3
 80044fc:	0010      	movs	r0, r2
 80044fe:	f7fb fe1d 	bl	800013c <__udivsi3>
 8004502:	0003      	movs	r3, r0
 8004504:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d90a      	bls.n	8004522 <UART_SetConfig+0x3ae>
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	025b      	lsls	r3, r3, #9
 8004512:	429a      	cmp	r2, r3
 8004514:	d205      	bcs.n	8004522 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	e003      	b.n	800452a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004522:	231e      	movs	r3, #30
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004536:	231e      	movs	r3, #30
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	781b      	ldrb	r3, [r3, #0]
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b008      	add	sp, #32
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	2208      	movs	r2, #8
 8004552:	4013      	ands	r3, r2
 8004554:	d00b      	beq.n	800456e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a4a      	ldr	r2, [pc, #296]	@ (8004688 <UART_AdvFeatureConfig+0x144>)
 800455e:	4013      	ands	r3, r2
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d00b      	beq.n	8004590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a43      	ldr	r2, [pc, #268]	@ (800468c <UART_AdvFeatureConfig+0x148>)
 8004580:	4013      	ands	r3, r2
 8004582:	0019      	movs	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	2202      	movs	r2, #2
 8004596:	4013      	ands	r3, r2
 8004598:	d00b      	beq.n	80045b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004690 <UART_AdvFeatureConfig+0x14c>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	2204      	movs	r2, #4
 80045b8:	4013      	ands	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4a34      	ldr	r2, [pc, #208]	@ (8004694 <UART_AdvFeatureConfig+0x150>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	2210      	movs	r2, #16
 80045da:	4013      	ands	r3, r2
 80045dc:	d00b      	beq.n	80045f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004698 <UART_AdvFeatureConfig+0x154>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	2220      	movs	r2, #32
 80045fc:	4013      	ands	r3, r2
 80045fe:	d00b      	beq.n	8004618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4a25      	ldr	r2, [pc, #148]	@ (800469c <UART_AdvFeatureConfig+0x158>)
 8004608:	4013      	ands	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	2240      	movs	r2, #64	@ 0x40
 800461e:	4013      	ands	r3, r2
 8004620:	d01d      	beq.n	800465e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a1d      	ldr	r2, [pc, #116]	@ (80046a0 <UART_AdvFeatureConfig+0x15c>)
 800462a:	4013      	ands	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	035b      	lsls	r3, r3, #13
 8004642:	429a      	cmp	r2, r3
 8004644:	d10b      	bne.n	800465e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a15      	ldr	r2, [pc, #84]	@ (80046a4 <UART_AdvFeatureConfig+0x160>)
 800464e:	4013      	ands	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	2280      	movs	r2, #128	@ 0x80
 8004664:	4013      	ands	r3, r2
 8004666:	d00b      	beq.n	8004680 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4a0e      	ldr	r2, [pc, #56]	@ (80046a8 <UART_AdvFeatureConfig+0x164>)
 8004670:	4013      	ands	r3, r2
 8004672:	0019      	movs	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }
}
 8004680:	46c0      	nop			@ (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}
 8004688:	ffff7fff 	.word	0xffff7fff
 800468c:	fffdffff 	.word	0xfffdffff
 8004690:	fffeffff 	.word	0xfffeffff
 8004694:	fffbffff 	.word	0xfffbffff
 8004698:	ffffefff 	.word	0xffffefff
 800469c:	ffffdfff 	.word	0xffffdfff
 80046a0:	ffefffff 	.word	0xffefffff
 80046a4:	ff9fffff 	.word	0xff9fffff
 80046a8:	fff7ffff 	.word	0xfff7ffff

080046ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b092      	sub	sp, #72	@ 0x48
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2284      	movs	r2, #132	@ 0x84
 80046b8:	2100      	movs	r1, #0
 80046ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046bc:	f7fe fbe0 	bl	8002e80 <HAL_GetTick>
 80046c0:	0003      	movs	r3, r0
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2208      	movs	r2, #8
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d12c      	bne.n	800472c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d4:	2280      	movs	r2, #128	@ 0x80
 80046d6:	0391      	lsls	r1, r2, #14
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4a46      	ldr	r2, [pc, #280]	@ (80047f4 <UART_CheckIdleState+0x148>)
 80046dc:	9200      	str	r2, [sp, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	f000 f88c 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 80046e4:	1e03      	subs	r3, r0, #0
 80046e6:	d021      	beq.n	800472c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046f2:	2301      	movs	r3, #1
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f8:	f383 8810 	msr	PRIMASK, r3
}
 80046fc:	46c0      	nop			@ (mov r8, r8)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2180      	movs	r1, #128	@ 0x80
 800470a:	438a      	bics	r2, r1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	f383 8810 	msr	PRIMASK, r3
}
 8004718:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2278      	movs	r2, #120	@ 0x78
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e05f      	b.n	80047ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2204      	movs	r2, #4
 8004734:	4013      	ands	r3, r2
 8004736:	2b04      	cmp	r3, #4
 8004738:	d146      	bne.n	80047c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473c:	2280      	movs	r2, #128	@ 0x80
 800473e:	03d1      	lsls	r1, r2, #15
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4a2c      	ldr	r2, [pc, #176]	@ (80047f4 <UART_CheckIdleState+0x148>)
 8004744:	9200      	str	r2, [sp, #0]
 8004746:	2200      	movs	r2, #0
 8004748:	f000 f858 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d03b      	beq.n	80047c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004750:	f3ef 8310 	mrs	r3, PRIMASK
 8004754:	60fb      	str	r3, [r7, #12]
  return(result);
 8004756:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
 800475a:	2301      	movs	r3, #1
 800475c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f383 8810 	msr	PRIMASK, r3
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4921      	ldr	r1, [pc, #132]	@ (80047f8 <UART_CheckIdleState+0x14c>)
 8004772:	400a      	ands	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004778:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f383 8810 	msr	PRIMASK, r3
}
 8004780:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004782:	f3ef 8310 	mrs	r3, PRIMASK
 8004786:	61bb      	str	r3, [r7, #24]
  return(result);
 8004788:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30
 800478c:	2301      	movs	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f383 8810 	msr	PRIMASK, r3
}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2101      	movs	r1, #1
 80047a4:	438a      	bics	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2280      	movs	r2, #128	@ 0x80
 80047b8:	2120      	movs	r1, #32
 80047ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2278      	movs	r2, #120	@ 0x78
 80047c0:	2100      	movs	r1, #0
 80047c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e011      	b.n	80047ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2280      	movs	r2, #128	@ 0x80
 80047d2:	2120      	movs	r1, #32
 80047d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2278      	movs	r2, #120	@ 0x78
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b010      	add	sp, #64	@ 0x40
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	01ffffff 	.word	0x01ffffff
 80047f8:	fffffedf 	.word	0xfffffedf

080047fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	1dfb      	adds	r3, r7, #7
 800480a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	e051      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3301      	adds	r3, #1
 8004812:	d04e      	beq.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004814:	f7fe fb34 	bl	8002e80 <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	429a      	cmp	r2, r3
 8004822:	d302      	bcc.n	800482a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e051      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2204      	movs	r2, #4
 8004836:	4013      	ands	r3, r2
 8004838:	d03b      	beq.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b80      	cmp	r3, #128	@ 0x80
 800483e:	d038      	beq.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b40      	cmp	r3, #64	@ 0x40
 8004844:	d035      	beq.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2208      	movs	r2, #8
 800484e:	4013      	ands	r3, r2
 8004850:	2b08      	cmp	r3, #8
 8004852:	d111      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2208      	movs	r2, #8
 800485a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 f83c 	bl	80048dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2284      	movs	r2, #132	@ 0x84
 8004868:	2108      	movs	r1, #8
 800486a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2278      	movs	r2, #120	@ 0x78
 8004870:	2100      	movs	r1, #0
 8004872:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02c      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	401a      	ands	r2, r3
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	429a      	cmp	r2, r3
 800488a:	d112      	bne.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2280      	movs	r2, #128	@ 0x80
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	0018      	movs	r0, r3
 800489a:	f000 f81f 	bl	80048dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2284      	movs	r2, #132	@ 0x84
 80048a2:	2120      	movs	r1, #32
 80048a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2278      	movs	r2, #120	@ 0x78
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e00f      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	425a      	negs	r2, r3
 80048c2:	4153      	adcs	r3, r2
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	001a      	movs	r2, r3
 80048c8:	1dfb      	adds	r3, r7, #7
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d09e      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	0018      	movs	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	@ 0x38
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e4:	f3ef 8310 	mrs	r3, PRIMASK
 80048e8:	617b      	str	r3, [r7, #20]
  return(result);
 80048ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ee:	2301      	movs	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f383 8810 	msr	PRIMASK, r3
}
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4926      	ldr	r1, [pc, #152]	@ (80049a0 <UART_EndRxTransfer+0xc4>)
 8004906:	400a      	ands	r2, r1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004916:	f3ef 8310 	mrs	r3, PRIMASK
 800491a:	623b      	str	r3, [r7, #32]
  return(result);
 800491c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004920:	2301      	movs	r3, #1
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2101      	movs	r1, #1
 8004938:	438a      	bics	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494c:	2b01      	cmp	r3, #1
 800494e:	d118      	bne.n	8004982 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	60bb      	str	r3, [r7, #8]
  return(result);
 8004956:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495a:	2301      	movs	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			@ (mov r8, r8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2110      	movs	r1, #16
 8004972:	438a      	bics	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2280      	movs	r2, #128	@ 0x80
 8004986:	2120      	movs	r1, #32
 8004988:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	46bd      	mov	sp, r7
 800499a:	b00e      	add	sp, #56	@ 0x38
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	fffffedf 	.word	0xfffffedf

080049a4 <__cvt>:
 80049a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a6:	001f      	movs	r7, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	0016      	movs	r6, r2
 80049ac:	b08b      	sub	sp, #44	@ 0x2c
 80049ae:	429f      	cmp	r7, r3
 80049b0:	da04      	bge.n	80049bc <__cvt+0x18>
 80049b2:	2180      	movs	r1, #128	@ 0x80
 80049b4:	0609      	lsls	r1, r1, #24
 80049b6:	187b      	adds	r3, r7, r1
 80049b8:	001f      	movs	r7, r3
 80049ba:	232d      	movs	r3, #45	@ 0x2d
 80049bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80049c0:	7013      	strb	r3, [r2, #0]
 80049c2:	2320      	movs	r3, #32
 80049c4:	2203      	movs	r2, #3
 80049c6:	439d      	bics	r5, r3
 80049c8:	2d46      	cmp	r5, #70	@ 0x46
 80049ca:	d007      	beq.n	80049dc <__cvt+0x38>
 80049cc:	002b      	movs	r3, r5
 80049ce:	3b45      	subs	r3, #69	@ 0x45
 80049d0:	4259      	negs	r1, r3
 80049d2:	414b      	adcs	r3, r1
 80049d4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80049d6:	3a01      	subs	r2, #1
 80049d8:	18cb      	adds	r3, r1, r3
 80049da:	9310      	str	r3, [sp, #64]	@ 0x40
 80049dc:	ab09      	add	r3, sp, #36	@ 0x24
 80049de:	9304      	str	r3, [sp, #16]
 80049e0:	ab08      	add	r3, sp, #32
 80049e2:	9303      	str	r3, [sp, #12]
 80049e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80049e6:	9200      	str	r2, [sp, #0]
 80049e8:	9302      	str	r3, [sp, #8]
 80049ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80049ec:	0032      	movs	r2, r6
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	003b      	movs	r3, r7
 80049f2:	f000 ff6f 	bl	80058d4 <_dtoa_r>
 80049f6:	0004      	movs	r4, r0
 80049f8:	2d47      	cmp	r5, #71	@ 0x47
 80049fa:	d11b      	bne.n	8004a34 <__cvt+0x90>
 80049fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80049fe:	07db      	lsls	r3, r3, #31
 8004a00:	d511      	bpl.n	8004a26 <__cvt+0x82>
 8004a02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a04:	18c3      	adds	r3, r0, r3
 8004a06:	9307      	str	r3, [sp, #28]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	0030      	movs	r0, r6
 8004a0e:	0039      	movs	r1, r7
 8004a10:	f7fb fd1a 	bl	8000448 <__aeabi_dcmpeq>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d001      	beq.n	8004a1c <__cvt+0x78>
 8004a18:	9b07      	ldr	r3, [sp, #28]
 8004a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a1c:	2230      	movs	r2, #48	@ 0x30
 8004a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a20:	9907      	ldr	r1, [sp, #28]
 8004a22:	428b      	cmp	r3, r1
 8004a24:	d320      	bcc.n	8004a68 <__cvt+0xc4>
 8004a26:	0020      	movs	r0, r4
 8004a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a2a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004a2c:	1b1b      	subs	r3, r3, r4
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	b00b      	add	sp, #44	@ 0x2c
 8004a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a36:	18c3      	adds	r3, r0, r3
 8004a38:	9307      	str	r3, [sp, #28]
 8004a3a:	2d46      	cmp	r5, #70	@ 0x46
 8004a3c:	d1e4      	bne.n	8004a08 <__cvt+0x64>
 8004a3e:	7803      	ldrb	r3, [r0, #0]
 8004a40:	2b30      	cmp	r3, #48	@ 0x30
 8004a42:	d10c      	bne.n	8004a5e <__cvt+0xba>
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	0030      	movs	r0, r6
 8004a4a:	0039      	movs	r1, r7
 8004a4c:	f7fb fcfc 	bl	8000448 <__aeabi_dcmpeq>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d104      	bne.n	8004a5e <__cvt+0xba>
 8004a54:	2301      	movs	r3, #1
 8004a56:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004a60:	9a07      	ldr	r2, [sp, #28]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	18d3      	adds	r3, r2, r3
 8004a66:	e7ce      	b.n	8004a06 <__cvt+0x62>
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e7d6      	b.n	8004a1e <__cvt+0x7a>

08004a70 <__exponent>:
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a72:	232b      	movs	r3, #43	@ 0x2b
 8004a74:	b085      	sub	sp, #20
 8004a76:	0005      	movs	r5, r0
 8004a78:	1e0c      	subs	r4, r1, #0
 8004a7a:	7002      	strb	r2, [r0, #0]
 8004a7c:	da01      	bge.n	8004a82 <__exponent+0x12>
 8004a7e:	424c      	negs	r4, r1
 8004a80:	3302      	adds	r3, #2
 8004a82:	706b      	strb	r3, [r5, #1]
 8004a84:	2c09      	cmp	r4, #9
 8004a86:	dd2c      	ble.n	8004ae2 <__exponent+0x72>
 8004a88:	ab02      	add	r3, sp, #8
 8004a8a:	1dde      	adds	r6, r3, #7
 8004a8c:	0020      	movs	r0, r4
 8004a8e:	210a      	movs	r1, #10
 8004a90:	f7fb fcc4 	bl	800041c <__aeabi_idivmod>
 8004a94:	0037      	movs	r7, r6
 8004a96:	3130      	adds	r1, #48	@ 0x30
 8004a98:	3e01      	subs	r6, #1
 8004a9a:	0020      	movs	r0, r4
 8004a9c:	7031      	strb	r1, [r6, #0]
 8004a9e:	210a      	movs	r1, #10
 8004aa0:	9401      	str	r4, [sp, #4]
 8004aa2:	f7fb fbd5 	bl	8000250 <__divsi3>
 8004aa6:	9b01      	ldr	r3, [sp, #4]
 8004aa8:	0004      	movs	r4, r0
 8004aaa:	2b63      	cmp	r3, #99	@ 0x63
 8004aac:	dcee      	bgt.n	8004a8c <__exponent+0x1c>
 8004aae:	1eba      	subs	r2, r7, #2
 8004ab0:	1ca8      	adds	r0, r5, #2
 8004ab2:	0001      	movs	r1, r0
 8004ab4:	0013      	movs	r3, r2
 8004ab6:	3430      	adds	r4, #48	@ 0x30
 8004ab8:	7014      	strb	r4, [r2, #0]
 8004aba:	ac02      	add	r4, sp, #8
 8004abc:	3407      	adds	r4, #7
 8004abe:	429c      	cmp	r4, r3
 8004ac0:	d80a      	bhi.n	8004ad8 <__exponent+0x68>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	4294      	cmp	r4, r2
 8004ac6:	d303      	bcc.n	8004ad0 <__exponent+0x60>
 8004ac8:	3309      	adds	r3, #9
 8004aca:	aa02      	add	r2, sp, #8
 8004acc:	189b      	adds	r3, r3, r2
 8004ace:	1bdb      	subs	r3, r3, r7
 8004ad0:	18c0      	adds	r0, r0, r3
 8004ad2:	1b40      	subs	r0, r0, r5
 8004ad4:	b005      	add	sp, #20
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad8:	781c      	ldrb	r4, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	700c      	strb	r4, [r1, #0]
 8004ade:	3101      	adds	r1, #1
 8004ae0:	e7eb      	b.n	8004aba <__exponent+0x4a>
 8004ae2:	2330      	movs	r3, #48	@ 0x30
 8004ae4:	18e4      	adds	r4, r4, r3
 8004ae6:	70ab      	strb	r3, [r5, #2]
 8004ae8:	1d28      	adds	r0, r5, #4
 8004aea:	70ec      	strb	r4, [r5, #3]
 8004aec:	e7f1      	b.n	8004ad2 <__exponent+0x62>
	...

08004af0 <_printf_float>:
 8004af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af2:	b097      	sub	sp, #92	@ 0x5c
 8004af4:	000d      	movs	r5, r1
 8004af6:	920a      	str	r2, [sp, #40]	@ 0x28
 8004af8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8004afa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004afc:	9009      	str	r0, [sp, #36]	@ 0x24
 8004afe:	f000 fdd9 	bl	80056b4 <_localeconv_r>
 8004b02:	6803      	ldr	r3, [r0, #0]
 8004b04:	0018      	movs	r0, r3
 8004b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8004b08:	f7fb fafc 	bl	8000104 <strlen>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b10:	9314      	str	r3, [sp, #80]	@ 0x50
 8004b12:	7e2b      	ldrb	r3, [r5, #24]
 8004b14:	2207      	movs	r2, #7
 8004b16:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	05c9      	lsls	r1, r1, #23
 8004b22:	d545      	bpl.n	8004bb0 <_printf_float+0xc0>
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	4393      	bics	r3, r2
 8004b28:	001a      	movs	r2, r3
 8004b2a:	3208      	adds	r2, #8
 8004b2c:	6022      	str	r2, [r4, #0]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	681e      	ldr	r6, [r3, #0]
 8004b32:	685f      	ldr	r7, [r3, #4]
 8004b34:	007b      	lsls	r3, r7, #1
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	9311      	str	r3, [sp, #68]	@ 0x44
 8004b3a:	9610      	str	r6, [sp, #64]	@ 0x40
 8004b3c:	64ae      	str	r6, [r5, #72]	@ 0x48
 8004b3e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8004b40:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004b42:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004b44:	4ba7      	ldr	r3, [pc, #668]	@ (8004de4 <_printf_float+0x2f4>)
 8004b46:	4252      	negs	r2, r2
 8004b48:	f7fd fb9c 	bl	8002284 <__aeabi_dcmpun>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d131      	bne.n	8004bb4 <_printf_float+0xc4>
 8004b50:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004b52:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004b54:	2201      	movs	r2, #1
 8004b56:	4ba3      	ldr	r3, [pc, #652]	@ (8004de4 <_printf_float+0x2f4>)
 8004b58:	4252      	negs	r2, r2
 8004b5a:	f7fb fc85 	bl	8000468 <__aeabi_dcmple>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d128      	bne.n	8004bb4 <_printf_float+0xc4>
 8004b62:	2200      	movs	r2, #0
 8004b64:	2300      	movs	r3, #0
 8004b66:	0030      	movs	r0, r6
 8004b68:	0039      	movs	r1, r7
 8004b6a:	f7fb fc73 	bl	8000454 <__aeabi_dcmplt>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d003      	beq.n	8004b7a <_printf_float+0x8a>
 8004b72:	002b      	movs	r3, r5
 8004b74:	222d      	movs	r2, #45	@ 0x2d
 8004b76:	3343      	adds	r3, #67	@ 0x43
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004b7c:	4f9a      	ldr	r7, [pc, #616]	@ (8004de8 <_printf_float+0x2f8>)
 8004b7e:	2b47      	cmp	r3, #71	@ 0x47
 8004b80:	d800      	bhi.n	8004b84 <_printf_float+0x94>
 8004b82:	4f9a      	ldr	r7, [pc, #616]	@ (8004dec <_printf_float+0x2fc>)
 8004b84:	2303      	movs	r3, #3
 8004b86:	2400      	movs	r4, #0
 8004b88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b8a:	612b      	str	r3, [r5, #16]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	439a      	bics	r2, r3
 8004b90:	602a      	str	r2, [r5, #0]
 8004b92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b94:	0029      	movs	r1, r5
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b9c:	aa15      	add	r2, sp, #84	@ 0x54
 8004b9e:	f000 f9e5 	bl	8004f6c <_printf_common>
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d000      	beq.n	8004ba8 <_printf_float+0xb8>
 8004ba6:	e09e      	b.n	8004ce6 <_printf_float+0x1f6>
 8004ba8:	2001      	movs	r0, #1
 8004baa:	4240      	negs	r0, r0
 8004bac:	b017      	add	sp, #92	@ 0x5c
 8004bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb0:	3307      	adds	r3, #7
 8004bb2:	e7b8      	b.n	8004b26 <_printf_float+0x36>
 8004bb4:	0032      	movs	r2, r6
 8004bb6:	003b      	movs	r3, r7
 8004bb8:	0030      	movs	r0, r6
 8004bba:	0039      	movs	r1, r7
 8004bbc:	f7fd fb62 	bl	8002284 <__aeabi_dcmpun>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d00b      	beq.n	8004bdc <_printf_float+0xec>
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	da03      	bge.n	8004bd0 <_printf_float+0xe0>
 8004bc8:	002b      	movs	r3, r5
 8004bca:	222d      	movs	r2, #45	@ 0x2d
 8004bcc:	3343      	adds	r3, #67	@ 0x43
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004bd2:	4f87      	ldr	r7, [pc, #540]	@ (8004df0 <_printf_float+0x300>)
 8004bd4:	2b47      	cmp	r3, #71	@ 0x47
 8004bd6:	d8d5      	bhi.n	8004b84 <_printf_float+0x94>
 8004bd8:	4f86      	ldr	r7, [pc, #536]	@ (8004df4 <_printf_float+0x304>)
 8004bda:	e7d3      	b.n	8004b84 <_printf_float+0x94>
 8004bdc:	2220      	movs	r2, #32
 8004bde:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8004be0:	686b      	ldr	r3, [r5, #4]
 8004be2:	4394      	bics	r4, r2
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	d146      	bne.n	8004c76 <_printf_float+0x186>
 8004be8:	3307      	adds	r3, #7
 8004bea:	606b      	str	r3, [r5, #4]
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	9206      	str	r2, [sp, #24]
 8004bfa:	aa14      	add	r2, sp, #80	@ 0x50
 8004bfc:	9205      	str	r2, [sp, #20]
 8004bfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c00:	a90a      	add	r1, sp, #40	@ 0x28
 8004c02:	9204      	str	r2, [sp, #16]
 8004c04:	aa13      	add	r2, sp, #76	@ 0x4c
 8004c06:	9203      	str	r2, [sp, #12]
 8004c08:	2223      	movs	r2, #35	@ 0x23
 8004c0a:	1852      	adds	r2, r2, r1
 8004c0c:	9202      	str	r2, [sp, #8]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	686b      	ldr	r3, [r5, #4]
 8004c12:	0032      	movs	r2, r6
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c18:	003b      	movs	r3, r7
 8004c1a:	f7ff fec3 	bl	80049a4 <__cvt>
 8004c1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004c20:	0007      	movs	r7, r0
 8004c22:	2c47      	cmp	r4, #71	@ 0x47
 8004c24:	d12d      	bne.n	8004c82 <_printf_float+0x192>
 8004c26:	1cd3      	adds	r3, r2, #3
 8004c28:	db02      	blt.n	8004c30 <_printf_float+0x140>
 8004c2a:	686b      	ldr	r3, [r5, #4]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	dd47      	ble.n	8004cc0 <_printf_float+0x1d0>
 8004c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c32:	3b02      	subs	r3, #2
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	930c      	str	r3, [sp, #48]	@ 0x30
 8004c38:	0028      	movs	r0, r5
 8004c3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004c3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c3e:	3901      	subs	r1, #1
 8004c40:	3050      	adds	r0, #80	@ 0x50
 8004c42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004c44:	f7ff ff14 	bl	8004a70 <__exponent>
 8004c48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004c4a:	0004      	movs	r4, r0
 8004c4c:	1813      	adds	r3, r2, r0
 8004c4e:	612b      	str	r3, [r5, #16]
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	dc02      	bgt.n	8004c5a <_printf_float+0x16a>
 8004c54:	682a      	ldr	r2, [r5, #0]
 8004c56:	07d2      	lsls	r2, r2, #31
 8004c58:	d501      	bpl.n	8004c5e <_printf_float+0x16e>
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	612b      	str	r3, [r5, #16]
 8004c5e:	2323      	movs	r3, #35	@ 0x23
 8004c60:	aa0a      	add	r2, sp, #40	@ 0x28
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d100      	bne.n	8004c6c <_printf_float+0x17c>
 8004c6a:	e792      	b.n	8004b92 <_printf_float+0xa2>
 8004c6c:	002b      	movs	r3, r5
 8004c6e:	222d      	movs	r2, #45	@ 0x2d
 8004c70:	3343      	adds	r3, #67	@ 0x43
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e78d      	b.n	8004b92 <_printf_float+0xa2>
 8004c76:	2c47      	cmp	r4, #71	@ 0x47
 8004c78:	d1b8      	bne.n	8004bec <_printf_float+0xfc>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1b6      	bne.n	8004bec <_printf_float+0xfc>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	e7b3      	b.n	8004bea <_printf_float+0xfa>
 8004c82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c84:	2b65      	cmp	r3, #101	@ 0x65
 8004c86:	d9d7      	bls.n	8004c38 <_printf_float+0x148>
 8004c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c8a:	2b66      	cmp	r3, #102	@ 0x66
 8004c8c:	d11a      	bne.n	8004cc4 <_printf_float+0x1d4>
 8004c8e:	686b      	ldr	r3, [r5, #4]
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	dd09      	ble.n	8004ca8 <_printf_float+0x1b8>
 8004c94:	612a      	str	r2, [r5, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <_printf_float+0x1b0>
 8004c9a:	6829      	ldr	r1, [r5, #0]
 8004c9c:	07c9      	lsls	r1, r1, #31
 8004c9e:	d50b      	bpl.n	8004cb8 <_printf_float+0x1c8>
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	612b      	str	r3, [r5, #16]
 8004ca6:	e007      	b.n	8004cb8 <_printf_float+0x1c8>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <_printf_float+0x1c4>
 8004cac:	2201      	movs	r2, #1
 8004cae:	6829      	ldr	r1, [r5, #0]
 8004cb0:	4211      	tst	r1, r2
 8004cb2:	d000      	beq.n	8004cb6 <_printf_float+0x1c6>
 8004cb4:	1c9a      	adds	r2, r3, #2
 8004cb6:	612a      	str	r2, [r5, #16]
 8004cb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004cba:	2400      	movs	r4, #0
 8004cbc:	65ab      	str	r3, [r5, #88]	@ 0x58
 8004cbe:	e7ce      	b.n	8004c5e <_printf_float+0x16e>
 8004cc0:	2367      	movs	r3, #103	@ 0x67
 8004cc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8004cc4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004cc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	db06      	blt.n	8004cda <_printf_float+0x1ea>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	6129      	str	r1, [r5, #16]
 8004cd0:	07db      	lsls	r3, r3, #31
 8004cd2:	d5f1      	bpl.n	8004cb8 <_printf_float+0x1c8>
 8004cd4:	3101      	adds	r1, #1
 8004cd6:	6129      	str	r1, [r5, #16]
 8004cd8:	e7ee      	b.n	8004cb8 <_printf_float+0x1c8>
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	dce0      	bgt.n	8004ca2 <_printf_float+0x1b2>
 8004ce0:	1892      	adds	r2, r2, r2
 8004ce2:	1a52      	subs	r2, r2, r1
 8004ce4:	e7dd      	b.n	8004ca2 <_printf_float+0x1b2>
 8004ce6:	682a      	ldr	r2, [r5, #0]
 8004ce8:	0553      	lsls	r3, r2, #21
 8004cea:	d408      	bmi.n	8004cfe <_printf_float+0x20e>
 8004cec:	692b      	ldr	r3, [r5, #16]
 8004cee:	003a      	movs	r2, r7
 8004cf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cf4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004cf6:	47a0      	blx	r4
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d129      	bne.n	8004d50 <_printf_float+0x260>
 8004cfc:	e754      	b.n	8004ba8 <_printf_float+0xb8>
 8004cfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d00:	2b65      	cmp	r3, #101	@ 0x65
 8004d02:	d800      	bhi.n	8004d06 <_printf_float+0x216>
 8004d04:	e0db      	b.n	8004ebe <_printf_float+0x3ce>
 8004d06:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8004d08:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f7fb fb9b 	bl	8000448 <__aeabi_dcmpeq>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d033      	beq.n	8004d7e <_printf_float+0x28e>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4a37      	ldr	r2, [pc, #220]	@ (8004df8 <_printf_float+0x308>)
 8004d1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004d20:	47a0      	blx	r4
 8004d22:	3001      	adds	r0, #1
 8004d24:	d100      	bne.n	8004d28 <_printf_float+0x238>
 8004d26:	e73f      	b.n	8004ba8 <_printf_float+0xb8>
 8004d28:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8004d2a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d2c:	42b3      	cmp	r3, r6
 8004d2e:	db02      	blt.n	8004d36 <_printf_float+0x246>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	07db      	lsls	r3, r3, #31
 8004d34:	d50c      	bpl.n	8004d50 <_printf_float+0x260>
 8004d36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004d3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d40:	47a0      	blx	r4
 8004d42:	2400      	movs	r4, #0
 8004d44:	3001      	adds	r0, #1
 8004d46:	d100      	bne.n	8004d4a <_printf_float+0x25a>
 8004d48:	e72e      	b.n	8004ba8 <_printf_float+0xb8>
 8004d4a:	1e73      	subs	r3, r6, #1
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	dc0a      	bgt.n	8004d66 <_printf_float+0x276>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	079b      	lsls	r3, r3, #30
 8004d54:	d500      	bpl.n	8004d58 <_printf_float+0x268>
 8004d56:	e106      	b.n	8004f66 <_printf_float+0x476>
 8004d58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004d5a:	68e8      	ldr	r0, [r5, #12]
 8004d5c:	4298      	cmp	r0, r3
 8004d5e:	db00      	blt.n	8004d62 <_printf_float+0x272>
 8004d60:	e724      	b.n	8004bac <_printf_float+0xbc>
 8004d62:	0018      	movs	r0, r3
 8004d64:	e722      	b.n	8004bac <_printf_float+0xbc>
 8004d66:	002a      	movs	r2, r5
 8004d68:	2301      	movs	r3, #1
 8004d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d6e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004d70:	321a      	adds	r2, #26
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d100      	bne.n	8004d7a <_printf_float+0x28a>
 8004d78:	e716      	b.n	8004ba8 <_printf_float+0xb8>
 8004d7a:	3401      	adds	r4, #1
 8004d7c:	e7e5      	b.n	8004d4a <_printf_float+0x25a>
 8004d7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dc3b      	bgt.n	8004dfc <_printf_float+0x30c>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4a1c      	ldr	r2, [pc, #112]	@ (8004df8 <_printf_float+0x308>)
 8004d88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004d8e:	47a0      	blx	r4
 8004d90:	3001      	adds	r0, #1
 8004d92:	d100      	bne.n	8004d96 <_printf_float+0x2a6>
 8004d94:	e708      	b.n	8004ba8 <_printf_float+0xb8>
 8004d96:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8004d98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d9a:	4333      	orrs	r3, r6
 8004d9c:	d102      	bne.n	8004da4 <_printf_float+0x2b4>
 8004d9e:	682b      	ldr	r3, [r5, #0]
 8004da0:	07db      	lsls	r3, r3, #31
 8004da2:	d5d5      	bpl.n	8004d50 <_printf_float+0x260>
 8004da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004da6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004da8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004dae:	47a0      	blx	r4
 8004db0:	2300      	movs	r3, #0
 8004db2:	3001      	adds	r0, #1
 8004db4:	d100      	bne.n	8004db8 <_printf_float+0x2c8>
 8004db6:	e6f7      	b.n	8004ba8 <_printf_float+0xb8>
 8004db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8004dba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004dbc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004dbe:	425b      	negs	r3, r3
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	dc01      	bgt.n	8004dc8 <_printf_float+0x2d8>
 8004dc4:	0033      	movs	r3, r6
 8004dc6:	e792      	b.n	8004cee <_printf_float+0x1fe>
 8004dc8:	002a      	movs	r2, r5
 8004dca:	2301      	movs	r3, #1
 8004dcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004dd2:	321a      	adds	r2, #26
 8004dd4:	47a0      	blx	r4
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d100      	bne.n	8004ddc <_printf_float+0x2ec>
 8004dda:	e6e5      	b.n	8004ba8 <_printf_float+0xb8>
 8004ddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004dde:	3301      	adds	r3, #1
 8004de0:	e7ea      	b.n	8004db8 <_printf_float+0x2c8>
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	7fefffff 	.word	0x7fefffff
 8004de8:	080075dc 	.word	0x080075dc
 8004dec:	080075d8 	.word	0x080075d8
 8004df0:	080075e4 	.word	0x080075e4
 8004df4:	080075e0 	.word	0x080075e0
 8004df8:	080075e8 	.word	0x080075e8
 8004dfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004dfe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8004e00:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e02:	429e      	cmp	r6, r3
 8004e04:	dd00      	ble.n	8004e08 <_printf_float+0x318>
 8004e06:	001e      	movs	r6, r3
 8004e08:	2e00      	cmp	r6, #0
 8004e0a:	dc31      	bgt.n	8004e70 <_printf_float+0x380>
 8004e0c:	43f3      	mvns	r3, r6
 8004e0e:	2400      	movs	r4, #0
 8004e10:	17db      	asrs	r3, r3, #31
 8004e12:	4033      	ands	r3, r6
 8004e14:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e16:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8004e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e1a:	1af3      	subs	r3, r6, r3
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	dc30      	bgt.n	8004e82 <_printf_float+0x392>
 8004e20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e24:	429a      	cmp	r2, r3
 8004e26:	dc38      	bgt.n	8004e9a <_printf_float+0x3aa>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	07db      	lsls	r3, r3, #31
 8004e2c:	d435      	bmi.n	8004e9a <_printf_float+0x3aa>
 8004e2e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8004e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004e32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e34:	1b9b      	subs	r3, r3, r6
 8004e36:	1b14      	subs	r4, r2, r4
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	dd00      	ble.n	8004e3e <_printf_float+0x34e>
 8004e3c:	001c      	movs	r4, r3
 8004e3e:	2c00      	cmp	r4, #0
 8004e40:	dc34      	bgt.n	8004eac <_printf_float+0x3bc>
 8004e42:	43e3      	mvns	r3, r4
 8004e44:	2600      	movs	r6, #0
 8004e46:	17db      	asrs	r3, r3, #31
 8004e48:	401c      	ands	r4, r3
 8004e4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	1b1b      	subs	r3, r3, r4
 8004e52:	42b3      	cmp	r3, r6
 8004e54:	dc00      	bgt.n	8004e58 <_printf_float+0x368>
 8004e56:	e77b      	b.n	8004d50 <_printf_float+0x260>
 8004e58:	002a      	movs	r2, r5
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004e62:	321a      	adds	r2, #26
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	d100      	bne.n	8004e6c <_printf_float+0x37c>
 8004e6a:	e69d      	b.n	8004ba8 <_printf_float+0xb8>
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7ec      	b.n	8004e4a <_printf_float+0x35a>
 8004e70:	0033      	movs	r3, r6
 8004e72:	003a      	movs	r2, r7
 8004e74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004e7a:	47a0      	blx	r4
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d1c5      	bne.n	8004e0c <_printf_float+0x31c>
 8004e80:	e692      	b.n	8004ba8 <_printf_float+0xb8>
 8004e82:	002a      	movs	r2, r5
 8004e84:	2301      	movs	r3, #1
 8004e86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e8a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004e8c:	321a      	adds	r2, #26
 8004e8e:	47b0      	blx	r6
 8004e90:	3001      	adds	r0, #1
 8004e92:	d100      	bne.n	8004e96 <_printf_float+0x3a6>
 8004e94:	e688      	b.n	8004ba8 <_printf_float+0xb8>
 8004e96:	3401      	adds	r4, #1
 8004e98:	e7bd      	b.n	8004e16 <_printf_float+0x326>
 8004e9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004e9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ea0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ea2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004ea4:	47a0      	blx	r4
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d1c1      	bne.n	8004e2e <_printf_float+0x33e>
 8004eaa:	e67d      	b.n	8004ba8 <_printf_float+0xb8>
 8004eac:	19ba      	adds	r2, r7, r6
 8004eae:	0023      	movs	r3, r4
 8004eb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eb4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004eb6:	47b0      	blx	r6
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d1c2      	bne.n	8004e42 <_printf_float+0x352>
 8004ebc:	e674      	b.n	8004ba8 <_printf_float+0xb8>
 8004ebe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ec0:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	dc02      	bgt.n	8004ecc <_printf_float+0x3dc>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	421a      	tst	r2, r3
 8004eca:	d039      	beq.n	8004f40 <_printf_float+0x450>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	003a      	movs	r2, r7
 8004ed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ed4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004ed6:	47b0      	blx	r6
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d100      	bne.n	8004ede <_printf_float+0x3ee>
 8004edc:	e664      	b.n	8004ba8 <_printf_float+0xb8>
 8004ede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ee0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004ee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ee4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ee6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004ee8:	47b0      	blx	r6
 8004eea:	3001      	adds	r0, #1
 8004eec:	d100      	bne.n	8004ef0 <_printf_float+0x400>
 8004eee:	e65b      	b.n	8004ba8 <_printf_float+0xb8>
 8004ef0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8004ef2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004ef4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	930c      	str	r3, [sp, #48]	@ 0x30
 8004efc:	2300      	movs	r3, #0
 8004efe:	f7fb faa3 	bl	8000448 <__aeabi_dcmpeq>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d11a      	bne.n	8004f3c <_printf_float+0x44c>
 8004f06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f08:	1c7a      	adds	r2, r7, #1
 8004f0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f0e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004f10:	47b0      	blx	r6
 8004f12:	3001      	adds	r0, #1
 8004f14:	d10e      	bne.n	8004f34 <_printf_float+0x444>
 8004f16:	e647      	b.n	8004ba8 <_printf_float+0xb8>
 8004f18:	002a      	movs	r2, r5
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004f22:	321a      	adds	r2, #26
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	d100      	bne.n	8004f2c <_printf_float+0x43c>
 8004f2a:	e63d      	b.n	8004ba8 <_printf_float+0xb8>
 8004f2c:	3601      	adds	r6, #1
 8004f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f30:	429e      	cmp	r6, r3
 8004f32:	dbf1      	blt.n	8004f18 <_printf_float+0x428>
 8004f34:	002a      	movs	r2, r5
 8004f36:	0023      	movs	r3, r4
 8004f38:	3250      	adds	r2, #80	@ 0x50
 8004f3a:	e6d9      	b.n	8004cf0 <_printf_float+0x200>
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	e7f6      	b.n	8004f2e <_printf_float+0x43e>
 8004f40:	003a      	movs	r2, r7
 8004f42:	e7e2      	b.n	8004f0a <_printf_float+0x41a>
 8004f44:	002a      	movs	r2, r5
 8004f46:	2301      	movs	r3, #1
 8004f48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004f4e:	3219      	adds	r2, #25
 8004f50:	47b0      	blx	r6
 8004f52:	3001      	adds	r0, #1
 8004f54:	d100      	bne.n	8004f58 <_printf_float+0x468>
 8004f56:	e627      	b.n	8004ba8 <_printf_float+0xb8>
 8004f58:	3401      	adds	r4, #1
 8004f5a:	68eb      	ldr	r3, [r5, #12]
 8004f5c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	dcef      	bgt.n	8004f44 <_printf_float+0x454>
 8004f64:	e6f8      	b.n	8004d58 <_printf_float+0x268>
 8004f66:	2400      	movs	r4, #0
 8004f68:	e7f7      	b.n	8004f5a <_printf_float+0x46a>
 8004f6a:	46c0      	nop			@ (mov r8, r8)

08004f6c <_printf_common>:
 8004f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6e:	0016      	movs	r6, r2
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	688a      	ldr	r2, [r1, #8]
 8004f74:	690b      	ldr	r3, [r1, #16]
 8004f76:	000c      	movs	r4, r1
 8004f78:	9000      	str	r0, [sp, #0]
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	da00      	bge.n	8004f80 <_printf_common+0x14>
 8004f7e:	0013      	movs	r3, r2
 8004f80:	0022      	movs	r2, r4
 8004f82:	6033      	str	r3, [r6, #0]
 8004f84:	3243      	adds	r2, #67	@ 0x43
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	d001      	beq.n	8004f90 <_printf_common+0x24>
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	6033      	str	r3, [r6, #0]
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	069b      	lsls	r3, r3, #26
 8004f94:	d502      	bpl.n	8004f9c <_printf_common+0x30>
 8004f96:	6833      	ldr	r3, [r6, #0]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	2306      	movs	r3, #6
 8004fa0:	0015      	movs	r5, r2
 8004fa2:	401d      	ands	r5, r3
 8004fa4:	421a      	tst	r2, r3
 8004fa6:	d027      	beq.n	8004ff8 <_printf_common+0x8c>
 8004fa8:	0023      	movs	r3, r4
 8004faa:	3343      	adds	r3, #67	@ 0x43
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	4193      	sbcs	r3, r2
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	0692      	lsls	r2, r2, #26
 8004fb6:	d430      	bmi.n	800501a <_printf_common+0xae>
 8004fb8:	0022      	movs	r2, r4
 8004fba:	9901      	ldr	r1, [sp, #4]
 8004fbc:	9800      	ldr	r0, [sp, #0]
 8004fbe:	9d08      	ldr	r5, [sp, #32]
 8004fc0:	3243      	adds	r2, #67	@ 0x43
 8004fc2:	47a8      	blx	r5
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d025      	beq.n	8005014 <_printf_common+0xa8>
 8004fc8:	2206      	movs	r2, #6
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	2500      	movs	r5, #0
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d105      	bne.n	8004fe0 <_printf_common+0x74>
 8004fd4:	6833      	ldr	r3, [r6, #0]
 8004fd6:	68e5      	ldr	r5, [r4, #12]
 8004fd8:	1aed      	subs	r5, r5, r3
 8004fda:	43eb      	mvns	r3, r5
 8004fdc:	17db      	asrs	r3, r3, #31
 8004fde:	401d      	ands	r5, r3
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	6922      	ldr	r2, [r4, #16]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	dd01      	ble.n	8004fec <_printf_common+0x80>
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	18ed      	adds	r5, r5, r3
 8004fec:	2600      	movs	r6, #0
 8004fee:	42b5      	cmp	r5, r6
 8004ff0:	d120      	bne.n	8005034 <_printf_common+0xc8>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e010      	b.n	8005018 <_printf_common+0xac>
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	68e3      	ldr	r3, [r4, #12]
 8004ffa:	6832      	ldr	r2, [r6, #0]
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	42ab      	cmp	r3, r5
 8005000:	ddd2      	ble.n	8004fa8 <_printf_common+0x3c>
 8005002:	0022      	movs	r2, r4
 8005004:	2301      	movs	r3, #1
 8005006:	9901      	ldr	r1, [sp, #4]
 8005008:	9800      	ldr	r0, [sp, #0]
 800500a:	9f08      	ldr	r7, [sp, #32]
 800500c:	3219      	adds	r2, #25
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	d1f0      	bne.n	8004ff6 <_printf_common+0x8a>
 8005014:	2001      	movs	r0, #1
 8005016:	4240      	negs	r0, r0
 8005018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800501a:	2030      	movs	r0, #48	@ 0x30
 800501c:	18e1      	adds	r1, r4, r3
 800501e:	3143      	adds	r1, #67	@ 0x43
 8005020:	7008      	strb	r0, [r1, #0]
 8005022:	0021      	movs	r1, r4
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	3145      	adds	r1, #69	@ 0x45
 8005028:	7809      	ldrb	r1, [r1, #0]
 800502a:	18a2      	adds	r2, r4, r2
 800502c:	3243      	adds	r2, #67	@ 0x43
 800502e:	3302      	adds	r3, #2
 8005030:	7011      	strb	r1, [r2, #0]
 8005032:	e7c1      	b.n	8004fb8 <_printf_common+0x4c>
 8005034:	0022      	movs	r2, r4
 8005036:	2301      	movs	r3, #1
 8005038:	9901      	ldr	r1, [sp, #4]
 800503a:	9800      	ldr	r0, [sp, #0]
 800503c:	9f08      	ldr	r7, [sp, #32]
 800503e:	321a      	adds	r2, #26
 8005040:	47b8      	blx	r7
 8005042:	3001      	adds	r0, #1
 8005044:	d0e6      	beq.n	8005014 <_printf_common+0xa8>
 8005046:	3601      	adds	r6, #1
 8005048:	e7d1      	b.n	8004fee <_printf_common+0x82>
	...

0800504c <_printf_i>:
 800504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504e:	b08b      	sub	sp, #44	@ 0x2c
 8005050:	9206      	str	r2, [sp, #24]
 8005052:	000a      	movs	r2, r1
 8005054:	3243      	adds	r2, #67	@ 0x43
 8005056:	9307      	str	r3, [sp, #28]
 8005058:	9005      	str	r0, [sp, #20]
 800505a:	9203      	str	r2, [sp, #12]
 800505c:	7e0a      	ldrb	r2, [r1, #24]
 800505e:	000c      	movs	r4, r1
 8005060:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005062:	2a78      	cmp	r2, #120	@ 0x78
 8005064:	d809      	bhi.n	800507a <_printf_i+0x2e>
 8005066:	2a62      	cmp	r2, #98	@ 0x62
 8005068:	d80b      	bhi.n	8005082 <_printf_i+0x36>
 800506a:	2a00      	cmp	r2, #0
 800506c:	d100      	bne.n	8005070 <_printf_i+0x24>
 800506e:	e0ba      	b.n	80051e6 <_printf_i+0x19a>
 8005070:	497a      	ldr	r1, [pc, #488]	@ (800525c <_printf_i+0x210>)
 8005072:	9104      	str	r1, [sp, #16]
 8005074:	2a58      	cmp	r2, #88	@ 0x58
 8005076:	d100      	bne.n	800507a <_printf_i+0x2e>
 8005078:	e08e      	b.n	8005198 <_printf_i+0x14c>
 800507a:	0025      	movs	r5, r4
 800507c:	3542      	adds	r5, #66	@ 0x42
 800507e:	702a      	strb	r2, [r5, #0]
 8005080:	e022      	b.n	80050c8 <_printf_i+0x7c>
 8005082:	0010      	movs	r0, r2
 8005084:	3863      	subs	r0, #99	@ 0x63
 8005086:	2815      	cmp	r0, #21
 8005088:	d8f7      	bhi.n	800507a <_printf_i+0x2e>
 800508a:	f7fb f84d 	bl	8000128 <__gnu_thumb1_case_shi>
 800508e:	0016      	.short	0x0016
 8005090:	fff6001f 	.word	0xfff6001f
 8005094:	fff6fff6 	.word	0xfff6fff6
 8005098:	001ffff6 	.word	0x001ffff6
 800509c:	fff6fff6 	.word	0xfff6fff6
 80050a0:	fff6fff6 	.word	0xfff6fff6
 80050a4:	0036009f 	.word	0x0036009f
 80050a8:	fff6007e 	.word	0xfff6007e
 80050ac:	00b0fff6 	.word	0x00b0fff6
 80050b0:	0036fff6 	.word	0x0036fff6
 80050b4:	fff6fff6 	.word	0xfff6fff6
 80050b8:	0082      	.short	0x0082
 80050ba:	0025      	movs	r5, r4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	3542      	adds	r5, #66	@ 0x42
 80050c0:	1d11      	adds	r1, r2, #4
 80050c2:	6019      	str	r1, [r3, #0]
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	702b      	strb	r3, [r5, #0]
 80050c8:	2301      	movs	r3, #1
 80050ca:	e09e      	b.n	800520a <_printf_i+0x1be>
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	6809      	ldr	r1, [r1, #0]
 80050d0:	1d02      	adds	r2, r0, #4
 80050d2:	060d      	lsls	r5, r1, #24
 80050d4:	d50b      	bpl.n	80050ee <_printf_i+0xa2>
 80050d6:	6806      	ldr	r6, [r0, #0]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	2e00      	cmp	r6, #0
 80050dc:	da03      	bge.n	80050e6 <_printf_i+0x9a>
 80050de:	232d      	movs	r3, #45	@ 0x2d
 80050e0:	9a03      	ldr	r2, [sp, #12]
 80050e2:	4276      	negs	r6, r6
 80050e4:	7013      	strb	r3, [r2, #0]
 80050e6:	4b5d      	ldr	r3, [pc, #372]	@ (800525c <_printf_i+0x210>)
 80050e8:	270a      	movs	r7, #10
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	e018      	b.n	8005120 <_printf_i+0xd4>
 80050ee:	6806      	ldr	r6, [r0, #0]
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	0649      	lsls	r1, r1, #25
 80050f4:	d5f1      	bpl.n	80050da <_printf_i+0x8e>
 80050f6:	b236      	sxth	r6, r6
 80050f8:	e7ef      	b.n	80050da <_printf_i+0x8e>
 80050fa:	6808      	ldr	r0, [r1, #0]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	c940      	ldmia	r1!, {r6}
 8005100:	0605      	lsls	r5, r0, #24
 8005102:	d402      	bmi.n	800510a <_printf_i+0xbe>
 8005104:	0640      	lsls	r0, r0, #25
 8005106:	d500      	bpl.n	800510a <_printf_i+0xbe>
 8005108:	b2b6      	uxth	r6, r6
 800510a:	6019      	str	r1, [r3, #0]
 800510c:	4b53      	ldr	r3, [pc, #332]	@ (800525c <_printf_i+0x210>)
 800510e:	270a      	movs	r7, #10
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	2a6f      	cmp	r2, #111	@ 0x6f
 8005114:	d100      	bne.n	8005118 <_printf_i+0xcc>
 8005116:	3f02      	subs	r7, #2
 8005118:	0023      	movs	r3, r4
 800511a:	2200      	movs	r2, #0
 800511c:	3343      	adds	r3, #67	@ 0x43
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	6863      	ldr	r3, [r4, #4]
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	db06      	blt.n	8005136 <_printf_i+0xea>
 8005128:	2104      	movs	r1, #4
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	9d03      	ldr	r5, [sp, #12]
 800512e:	438a      	bics	r2, r1
 8005130:	6022      	str	r2, [r4, #0]
 8005132:	4333      	orrs	r3, r6
 8005134:	d00c      	beq.n	8005150 <_printf_i+0x104>
 8005136:	9d03      	ldr	r5, [sp, #12]
 8005138:	0030      	movs	r0, r6
 800513a:	0039      	movs	r1, r7
 800513c:	f7fb f884 	bl	8000248 <__aeabi_uidivmod>
 8005140:	9b04      	ldr	r3, [sp, #16]
 8005142:	3d01      	subs	r5, #1
 8005144:	5c5b      	ldrb	r3, [r3, r1]
 8005146:	702b      	strb	r3, [r5, #0]
 8005148:	0033      	movs	r3, r6
 800514a:	0006      	movs	r6, r0
 800514c:	429f      	cmp	r7, r3
 800514e:	d9f3      	bls.n	8005138 <_printf_i+0xec>
 8005150:	2f08      	cmp	r7, #8
 8005152:	d109      	bne.n	8005168 <_printf_i+0x11c>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	07db      	lsls	r3, r3, #31
 8005158:	d506      	bpl.n	8005168 <_printf_i+0x11c>
 800515a:	6862      	ldr	r2, [r4, #4]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	dc02      	bgt.n	8005168 <_printf_i+0x11c>
 8005162:	2330      	movs	r3, #48	@ 0x30
 8005164:	3d01      	subs	r5, #1
 8005166:	702b      	strb	r3, [r5, #0]
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	1b5b      	subs	r3, r3, r5
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	9b07      	ldr	r3, [sp, #28]
 8005170:	0021      	movs	r1, r4
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	9805      	ldr	r0, [sp, #20]
 8005176:	9b06      	ldr	r3, [sp, #24]
 8005178:	aa09      	add	r2, sp, #36	@ 0x24
 800517a:	f7ff fef7 	bl	8004f6c <_printf_common>
 800517e:	3001      	adds	r0, #1
 8005180:	d148      	bne.n	8005214 <_printf_i+0x1c8>
 8005182:	2001      	movs	r0, #1
 8005184:	4240      	negs	r0, r0
 8005186:	b00b      	add	sp, #44	@ 0x2c
 8005188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518a:	2220      	movs	r2, #32
 800518c:	6809      	ldr	r1, [r1, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	6022      	str	r2, [r4, #0]
 8005192:	2278      	movs	r2, #120	@ 0x78
 8005194:	4932      	ldr	r1, [pc, #200]	@ (8005260 <_printf_i+0x214>)
 8005196:	9104      	str	r1, [sp, #16]
 8005198:	0021      	movs	r1, r4
 800519a:	3145      	adds	r1, #69	@ 0x45
 800519c:	700a      	strb	r2, [r1, #0]
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	c940      	ldmia	r1!, {r6}
 80051a4:	0610      	lsls	r0, r2, #24
 80051a6:	d402      	bmi.n	80051ae <_printf_i+0x162>
 80051a8:	0650      	lsls	r0, r2, #25
 80051aa:	d500      	bpl.n	80051ae <_printf_i+0x162>
 80051ac:	b2b6      	uxth	r6, r6
 80051ae:	6019      	str	r1, [r3, #0]
 80051b0:	07d3      	lsls	r3, r2, #31
 80051b2:	d502      	bpl.n	80051ba <_printf_i+0x16e>
 80051b4:	2320      	movs	r3, #32
 80051b6:	4313      	orrs	r3, r2
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d001      	beq.n	80051c2 <_printf_i+0x176>
 80051be:	2710      	movs	r7, #16
 80051c0:	e7aa      	b.n	8005118 <_printf_i+0xcc>
 80051c2:	2220      	movs	r2, #32
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	4393      	bics	r3, r2
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	e7f8      	b.n	80051be <_printf_i+0x172>
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	680d      	ldr	r5, [r1, #0]
 80051d0:	1d10      	adds	r0, r2, #4
 80051d2:	6949      	ldr	r1, [r1, #20]
 80051d4:	6018      	str	r0, [r3, #0]
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	062e      	lsls	r6, r5, #24
 80051da:	d501      	bpl.n	80051e0 <_printf_i+0x194>
 80051dc:	6019      	str	r1, [r3, #0]
 80051de:	e002      	b.n	80051e6 <_printf_i+0x19a>
 80051e0:	066d      	lsls	r5, r5, #25
 80051e2:	d5fb      	bpl.n	80051dc <_printf_i+0x190>
 80051e4:	8019      	strh	r1, [r3, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9d03      	ldr	r5, [sp, #12]
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	e7bf      	b.n	800516e <_printf_i+0x122>
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	1d11      	adds	r1, r2, #4
 80051f2:	6019      	str	r1, [r3, #0]
 80051f4:	6815      	ldr	r5, [r2, #0]
 80051f6:	2100      	movs	r1, #0
 80051f8:	0028      	movs	r0, r5
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	f000 fad9 	bl	80057b2 <memchr>
 8005200:	2800      	cmp	r0, #0
 8005202:	d001      	beq.n	8005208 <_printf_i+0x1bc>
 8005204:	1b40      	subs	r0, r0, r5
 8005206:	6060      	str	r0, [r4, #4]
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	2300      	movs	r3, #0
 800520e:	9a03      	ldr	r2, [sp, #12]
 8005210:	7013      	strb	r3, [r2, #0]
 8005212:	e7ac      	b.n	800516e <_printf_i+0x122>
 8005214:	002a      	movs	r2, r5
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	9906      	ldr	r1, [sp, #24]
 800521a:	9805      	ldr	r0, [sp, #20]
 800521c:	9d07      	ldr	r5, [sp, #28]
 800521e:	47a8      	blx	r5
 8005220:	3001      	adds	r0, #1
 8005222:	d0ae      	beq.n	8005182 <_printf_i+0x136>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	079b      	lsls	r3, r3, #30
 8005228:	d415      	bmi.n	8005256 <_printf_i+0x20a>
 800522a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800522c:	68e0      	ldr	r0, [r4, #12]
 800522e:	4298      	cmp	r0, r3
 8005230:	daa9      	bge.n	8005186 <_printf_i+0x13a>
 8005232:	0018      	movs	r0, r3
 8005234:	e7a7      	b.n	8005186 <_printf_i+0x13a>
 8005236:	0022      	movs	r2, r4
 8005238:	2301      	movs	r3, #1
 800523a:	9906      	ldr	r1, [sp, #24]
 800523c:	9805      	ldr	r0, [sp, #20]
 800523e:	9e07      	ldr	r6, [sp, #28]
 8005240:	3219      	adds	r2, #25
 8005242:	47b0      	blx	r6
 8005244:	3001      	adds	r0, #1
 8005246:	d09c      	beq.n	8005182 <_printf_i+0x136>
 8005248:	3501      	adds	r5, #1
 800524a:	68e3      	ldr	r3, [r4, #12]
 800524c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	42ab      	cmp	r3, r5
 8005252:	dcf0      	bgt.n	8005236 <_printf_i+0x1ea>
 8005254:	e7e9      	b.n	800522a <_printf_i+0x1de>
 8005256:	2500      	movs	r5, #0
 8005258:	e7f7      	b.n	800524a <_printf_i+0x1fe>
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	080075ea 	.word	0x080075ea
 8005260:	080075fb 	.word	0x080075fb

08005264 <std>:
 8005264:	2300      	movs	r3, #0
 8005266:	b510      	push	{r4, lr}
 8005268:	0004      	movs	r4, r0
 800526a:	6003      	str	r3, [r0, #0]
 800526c:	6043      	str	r3, [r0, #4]
 800526e:	6083      	str	r3, [r0, #8]
 8005270:	8181      	strh	r1, [r0, #12]
 8005272:	6643      	str	r3, [r0, #100]	@ 0x64
 8005274:	81c2      	strh	r2, [r0, #14]
 8005276:	6103      	str	r3, [r0, #16]
 8005278:	6143      	str	r3, [r0, #20]
 800527a:	6183      	str	r3, [r0, #24]
 800527c:	0019      	movs	r1, r3
 800527e:	2208      	movs	r2, #8
 8005280:	305c      	adds	r0, #92	@ 0x5c
 8005282:	f000 fa0f 	bl	80056a4 <memset>
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <std+0x50>)
 8005288:	6224      	str	r4, [r4, #32]
 800528a:	6263      	str	r3, [r4, #36]	@ 0x24
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <std+0x54>)
 800528e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005290:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <std+0x58>)
 8005292:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005294:	4b0a      	ldr	r3, [pc, #40]	@ (80052c0 <std+0x5c>)
 8005296:	6323      	str	r3, [r4, #48]	@ 0x30
 8005298:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <std+0x60>)
 800529a:	429c      	cmp	r4, r3
 800529c:	d005      	beq.n	80052aa <std+0x46>
 800529e:	4b0a      	ldr	r3, [pc, #40]	@ (80052c8 <std+0x64>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d002      	beq.n	80052aa <std+0x46>
 80052a4:	4b09      	ldr	r3, [pc, #36]	@ (80052cc <std+0x68>)
 80052a6:	429c      	cmp	r4, r3
 80052a8:	d103      	bne.n	80052b2 <std+0x4e>
 80052aa:	0020      	movs	r0, r4
 80052ac:	3058      	adds	r0, #88	@ 0x58
 80052ae:	f000 fa7d 	bl	80057ac <__retarget_lock_init_recursive>
 80052b2:	bd10      	pop	{r4, pc}
 80052b4:	080054cd 	.word	0x080054cd
 80052b8:	080054f5 	.word	0x080054f5
 80052bc:	0800552d 	.word	0x0800552d
 80052c0:	08005559 	.word	0x08005559
 80052c4:	2000031c 	.word	0x2000031c
 80052c8:	20000384 	.word	0x20000384
 80052cc:	200003ec 	.word	0x200003ec

080052d0 <stdio_exit_handler>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	4a03      	ldr	r2, [pc, #12]	@ (80052e0 <stdio_exit_handler+0x10>)
 80052d4:	4903      	ldr	r1, [pc, #12]	@ (80052e4 <stdio_exit_handler+0x14>)
 80052d6:	4804      	ldr	r0, [pc, #16]	@ (80052e8 <stdio_exit_handler+0x18>)
 80052d8:	f000 f86c 	bl	80053b4 <_fwalk_sglue>
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	2000000c 	.word	0x2000000c
 80052e4:	0800718d 	.word	0x0800718d
 80052e8:	2000001c 	.word	0x2000001c

080052ec <cleanup_stdio>:
 80052ec:	6841      	ldr	r1, [r0, #4]
 80052ee:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <cleanup_stdio+0x30>)
 80052f0:	b510      	push	{r4, lr}
 80052f2:	0004      	movs	r4, r0
 80052f4:	4299      	cmp	r1, r3
 80052f6:	d001      	beq.n	80052fc <cleanup_stdio+0x10>
 80052f8:	f001 ff48 	bl	800718c <_fflush_r>
 80052fc:	68a1      	ldr	r1, [r4, #8]
 80052fe:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <cleanup_stdio+0x34>)
 8005300:	4299      	cmp	r1, r3
 8005302:	d002      	beq.n	800530a <cleanup_stdio+0x1e>
 8005304:	0020      	movs	r0, r4
 8005306:	f001 ff41 	bl	800718c <_fflush_r>
 800530a:	68e1      	ldr	r1, [r4, #12]
 800530c:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <cleanup_stdio+0x38>)
 800530e:	4299      	cmp	r1, r3
 8005310:	d002      	beq.n	8005318 <cleanup_stdio+0x2c>
 8005312:	0020      	movs	r0, r4
 8005314:	f001 ff3a 	bl	800718c <_fflush_r>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	2000031c 	.word	0x2000031c
 8005320:	20000384 	.word	0x20000384
 8005324:	200003ec 	.word	0x200003ec

08005328 <global_stdio_init.part.0>:
 8005328:	b510      	push	{r4, lr}
 800532a:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <global_stdio_init.part.0+0x28>)
 800532c:	4a09      	ldr	r2, [pc, #36]	@ (8005354 <global_stdio_init.part.0+0x2c>)
 800532e:	2104      	movs	r1, #4
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	4809      	ldr	r0, [pc, #36]	@ (8005358 <global_stdio_init.part.0+0x30>)
 8005334:	2200      	movs	r2, #0
 8005336:	f7ff ff95 	bl	8005264 <std>
 800533a:	2201      	movs	r2, #1
 800533c:	2109      	movs	r1, #9
 800533e:	4807      	ldr	r0, [pc, #28]	@ (800535c <global_stdio_init.part.0+0x34>)
 8005340:	f7ff ff90 	bl	8005264 <std>
 8005344:	2202      	movs	r2, #2
 8005346:	2112      	movs	r1, #18
 8005348:	4805      	ldr	r0, [pc, #20]	@ (8005360 <global_stdio_init.part.0+0x38>)
 800534a:	f7ff ff8b 	bl	8005264 <std>
 800534e:	bd10      	pop	{r4, pc}
 8005350:	20000454 	.word	0x20000454
 8005354:	080052d1 	.word	0x080052d1
 8005358:	2000031c 	.word	0x2000031c
 800535c:	20000384 	.word	0x20000384
 8005360:	200003ec 	.word	0x200003ec

08005364 <__sfp_lock_acquire>:
 8005364:	b510      	push	{r4, lr}
 8005366:	4802      	ldr	r0, [pc, #8]	@ (8005370 <__sfp_lock_acquire+0xc>)
 8005368:	f000 fa21 	bl	80057ae <__retarget_lock_acquire_recursive>
 800536c:	bd10      	pop	{r4, pc}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	2000045d 	.word	0x2000045d

08005374 <__sfp_lock_release>:
 8005374:	b510      	push	{r4, lr}
 8005376:	4802      	ldr	r0, [pc, #8]	@ (8005380 <__sfp_lock_release+0xc>)
 8005378:	f000 fa1a 	bl	80057b0 <__retarget_lock_release_recursive>
 800537c:	bd10      	pop	{r4, pc}
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	2000045d 	.word	0x2000045d

08005384 <__sinit>:
 8005384:	b510      	push	{r4, lr}
 8005386:	0004      	movs	r4, r0
 8005388:	f7ff ffec 	bl	8005364 <__sfp_lock_acquire>
 800538c:	6a23      	ldr	r3, [r4, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <__sinit+0x14>
 8005392:	f7ff ffef 	bl	8005374 <__sfp_lock_release>
 8005396:	bd10      	pop	{r4, pc}
 8005398:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <__sinit+0x28>)
 800539a:	6223      	str	r3, [r4, #32]
 800539c:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <__sinit+0x2c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f6      	bne.n	8005392 <__sinit+0xe>
 80053a4:	f7ff ffc0 	bl	8005328 <global_stdio_init.part.0>
 80053a8:	e7f3      	b.n	8005392 <__sinit+0xe>
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	080052ed 	.word	0x080052ed
 80053b0:	20000454 	.word	0x20000454

080053b4 <_fwalk_sglue>:
 80053b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053b6:	0014      	movs	r4, r2
 80053b8:	2600      	movs	r6, #0
 80053ba:	9000      	str	r0, [sp, #0]
 80053bc:	9101      	str	r1, [sp, #4]
 80053be:	68a5      	ldr	r5, [r4, #8]
 80053c0:	6867      	ldr	r7, [r4, #4]
 80053c2:	3f01      	subs	r7, #1
 80053c4:	d504      	bpl.n	80053d0 <_fwalk_sglue+0x1c>
 80053c6:	6824      	ldr	r4, [r4, #0]
 80053c8:	2c00      	cmp	r4, #0
 80053ca:	d1f8      	bne.n	80053be <_fwalk_sglue+0xa>
 80053cc:	0030      	movs	r0, r6
 80053ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053d0:	89ab      	ldrh	r3, [r5, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d908      	bls.n	80053e8 <_fwalk_sglue+0x34>
 80053d6:	220e      	movs	r2, #14
 80053d8:	5eab      	ldrsh	r3, [r5, r2]
 80053da:	3301      	adds	r3, #1
 80053dc:	d004      	beq.n	80053e8 <_fwalk_sglue+0x34>
 80053de:	0029      	movs	r1, r5
 80053e0:	9800      	ldr	r0, [sp, #0]
 80053e2:	9b01      	ldr	r3, [sp, #4]
 80053e4:	4798      	blx	r3
 80053e6:	4306      	orrs	r6, r0
 80053e8:	3568      	adds	r5, #104	@ 0x68
 80053ea:	e7ea      	b.n	80053c2 <_fwalk_sglue+0xe>

080053ec <iprintf>:
 80053ec:	b40f      	push	{r0, r1, r2, r3}
 80053ee:	b507      	push	{r0, r1, r2, lr}
 80053f0:	4905      	ldr	r1, [pc, #20]	@ (8005408 <iprintf+0x1c>)
 80053f2:	ab04      	add	r3, sp, #16
 80053f4:	6808      	ldr	r0, [r1, #0]
 80053f6:	cb04      	ldmia	r3!, {r2}
 80053f8:	6881      	ldr	r1, [r0, #8]
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	f001 fd24 	bl	8006e48 <_vfiprintf_r>
 8005400:	b003      	add	sp, #12
 8005402:	bc08      	pop	{r3}
 8005404:	b004      	add	sp, #16
 8005406:	4718      	bx	r3
 8005408:	20000018 	.word	0x20000018

0800540c <_puts_r>:
 800540c:	6a03      	ldr	r3, [r0, #32]
 800540e:	b570      	push	{r4, r5, r6, lr}
 8005410:	0005      	movs	r5, r0
 8005412:	000e      	movs	r6, r1
 8005414:	6884      	ldr	r4, [r0, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <_puts_r+0x12>
 800541a:	f7ff ffb3 	bl	8005384 <__sinit>
 800541e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005420:	07db      	lsls	r3, r3, #31
 8005422:	d405      	bmi.n	8005430 <_puts_r+0x24>
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	059b      	lsls	r3, r3, #22
 8005428:	d402      	bmi.n	8005430 <_puts_r+0x24>
 800542a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800542c:	f000 f9bf 	bl	80057ae <__retarget_lock_acquire_recursive>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	071b      	lsls	r3, r3, #28
 8005434:	d502      	bpl.n	800543c <_puts_r+0x30>
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d11f      	bne.n	800547c <_puts_r+0x70>
 800543c:	0021      	movs	r1, r4
 800543e:	0028      	movs	r0, r5
 8005440:	f000 f8d2 	bl	80055e8 <__swsetup_r>
 8005444:	2800      	cmp	r0, #0
 8005446:	d019      	beq.n	800547c <_puts_r+0x70>
 8005448:	2501      	movs	r5, #1
 800544a:	426d      	negs	r5, r5
 800544c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800544e:	07db      	lsls	r3, r3, #31
 8005450:	d405      	bmi.n	800545e <_puts_r+0x52>
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	059b      	lsls	r3, r3, #22
 8005456:	d402      	bmi.n	800545e <_puts_r+0x52>
 8005458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800545a:	f000 f9a9 	bl	80057b0 <__retarget_lock_release_recursive>
 800545e:	0028      	movs	r0, r5
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	3601      	adds	r6, #1
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	da04      	bge.n	8005474 <_puts_r+0x68>
 800546a:	69a2      	ldr	r2, [r4, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	dc16      	bgt.n	800549e <_puts_r+0x92>
 8005470:	290a      	cmp	r1, #10
 8005472:	d014      	beq.n	800549e <_puts_r+0x92>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	7019      	strb	r1, [r3, #0]
 800547c:	68a3      	ldr	r3, [r4, #8]
 800547e:	7831      	ldrb	r1, [r6, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	2900      	cmp	r1, #0
 8005484:	d1ed      	bne.n	8005462 <_puts_r+0x56>
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	da0f      	bge.n	80054ac <_puts_r+0xa0>
 800548c:	0022      	movs	r2, r4
 800548e:	0028      	movs	r0, r5
 8005490:	310a      	adds	r1, #10
 8005492:	f000 f867 	bl	8005564 <__swbuf_r>
 8005496:	3001      	adds	r0, #1
 8005498:	d0d6      	beq.n	8005448 <_puts_r+0x3c>
 800549a:	250a      	movs	r5, #10
 800549c:	e7d6      	b.n	800544c <_puts_r+0x40>
 800549e:	0022      	movs	r2, r4
 80054a0:	0028      	movs	r0, r5
 80054a2:	f000 f85f 	bl	8005564 <__swbuf_r>
 80054a6:	3001      	adds	r0, #1
 80054a8:	d1e8      	bne.n	800547c <_puts_r+0x70>
 80054aa:	e7cd      	b.n	8005448 <_puts_r+0x3c>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	6022      	str	r2, [r4, #0]
 80054b2:	220a      	movs	r2, #10
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e7f0      	b.n	800549a <_puts_r+0x8e>

080054b8 <puts>:
 80054b8:	b510      	push	{r4, lr}
 80054ba:	4b03      	ldr	r3, [pc, #12]	@ (80054c8 <puts+0x10>)
 80054bc:	0001      	movs	r1, r0
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	f7ff ffa4 	bl	800540c <_puts_r>
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	20000018 	.word	0x20000018

080054cc <__sread>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	000c      	movs	r4, r1
 80054d0:	250e      	movs	r5, #14
 80054d2:	5f49      	ldrsh	r1, [r1, r5]
 80054d4:	f000 f918 	bl	8005708 <_read_r>
 80054d8:	2800      	cmp	r0, #0
 80054da:	db03      	blt.n	80054e4 <__sread+0x18>
 80054dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80054de:	181b      	adds	r3, r3, r0
 80054e0:	6563      	str	r3, [r4, #84]	@ 0x54
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	4a02      	ldr	r2, [pc, #8]	@ (80054f0 <__sread+0x24>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	e7f9      	b.n	80054e2 <__sread+0x16>
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	ffffefff 	.word	0xffffefff

080054f4 <__swrite>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	001f      	movs	r7, r3
 80054f8:	898b      	ldrh	r3, [r1, #12]
 80054fa:	0005      	movs	r5, r0
 80054fc:	000c      	movs	r4, r1
 80054fe:	0016      	movs	r6, r2
 8005500:	05db      	lsls	r3, r3, #23
 8005502:	d505      	bpl.n	8005510 <__swrite+0x1c>
 8005504:	230e      	movs	r3, #14
 8005506:	5ec9      	ldrsh	r1, [r1, r3]
 8005508:	2200      	movs	r2, #0
 800550a:	2302      	movs	r3, #2
 800550c:	f000 f8e8 	bl	80056e0 <_lseek_r>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	4a05      	ldr	r2, [pc, #20]	@ (8005528 <__swrite+0x34>)
 8005514:	0028      	movs	r0, r5
 8005516:	4013      	ands	r3, r2
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	0032      	movs	r2, r6
 800551c:	230e      	movs	r3, #14
 800551e:	5ee1      	ldrsh	r1, [r4, r3]
 8005520:	003b      	movs	r3, r7
 8005522:	f000 f905 	bl	8005730 <_write_r>
 8005526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005528:	ffffefff 	.word	0xffffefff

0800552c <__sseek>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	000c      	movs	r4, r1
 8005530:	250e      	movs	r5, #14
 8005532:	5f49      	ldrsh	r1, [r1, r5]
 8005534:	f000 f8d4 	bl	80056e0 <_lseek_r>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	1c42      	adds	r2, r0, #1
 800553c:	d103      	bne.n	8005546 <__sseek+0x1a>
 800553e:	4a05      	ldr	r2, [pc, #20]	@ (8005554 <__sseek+0x28>)
 8005540:	4013      	ands	r3, r2
 8005542:	81a3      	strh	r3, [r4, #12]
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	2280      	movs	r2, #128	@ 0x80
 8005548:	0152      	lsls	r2, r2, #5
 800554a:	4313      	orrs	r3, r2
 800554c:	81a3      	strh	r3, [r4, #12]
 800554e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005550:	e7f8      	b.n	8005544 <__sseek+0x18>
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	ffffefff 	.word	0xffffefff

08005558 <__sclose>:
 8005558:	b510      	push	{r4, lr}
 800555a:	230e      	movs	r3, #14
 800555c:	5ec9      	ldrsh	r1, [r1, r3]
 800555e:	f000 f8ad 	bl	80056bc <_close_r>
 8005562:	bd10      	pop	{r4, pc}

08005564 <__swbuf_r>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	0006      	movs	r6, r0
 8005568:	000d      	movs	r5, r1
 800556a:	0014      	movs	r4, r2
 800556c:	2800      	cmp	r0, #0
 800556e:	d004      	beq.n	800557a <__swbuf_r+0x16>
 8005570:	6a03      	ldr	r3, [r0, #32]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <__swbuf_r+0x16>
 8005576:	f7ff ff05 	bl	8005384 <__sinit>
 800557a:	69a3      	ldr	r3, [r4, #24]
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	071b      	lsls	r3, r3, #28
 8005582:	d502      	bpl.n	800558a <__swbuf_r+0x26>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <__swbuf_r+0x3a>
 800558a:	0021      	movs	r1, r4
 800558c:	0030      	movs	r0, r6
 800558e:	f000 f82b 	bl	80055e8 <__swsetup_r>
 8005592:	2800      	cmp	r0, #0
 8005594:	d003      	beq.n	800559e <__swbuf_r+0x3a>
 8005596:	2501      	movs	r5, #1
 8005598:	426d      	negs	r5, r5
 800559a:	0028      	movs	r0, r5
 800559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	b2ef      	uxtb	r7, r5
 80055a4:	1ac0      	subs	r0, r0, r3
 80055a6:	6963      	ldr	r3, [r4, #20]
 80055a8:	b2ed      	uxtb	r5, r5
 80055aa:	4283      	cmp	r3, r0
 80055ac:	dc05      	bgt.n	80055ba <__swbuf_r+0x56>
 80055ae:	0021      	movs	r1, r4
 80055b0:	0030      	movs	r0, r6
 80055b2:	f001 fdeb 	bl	800718c <_fflush_r>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d1ed      	bne.n	8005596 <__swbuf_r+0x32>
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	3001      	adds	r0, #1
 80055be:	3b01      	subs	r3, #1
 80055c0:	60a3      	str	r3, [r4, #8]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	6022      	str	r2, [r4, #0]
 80055c8:	701f      	strb	r7, [r3, #0]
 80055ca:	6963      	ldr	r3, [r4, #20]
 80055cc:	4283      	cmp	r3, r0
 80055ce:	d004      	beq.n	80055da <__swbuf_r+0x76>
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	07db      	lsls	r3, r3, #31
 80055d4:	d5e1      	bpl.n	800559a <__swbuf_r+0x36>
 80055d6:	2d0a      	cmp	r5, #10
 80055d8:	d1df      	bne.n	800559a <__swbuf_r+0x36>
 80055da:	0021      	movs	r1, r4
 80055dc:	0030      	movs	r0, r6
 80055de:	f001 fdd5 	bl	800718c <_fflush_r>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d0d9      	beq.n	800559a <__swbuf_r+0x36>
 80055e6:	e7d6      	b.n	8005596 <__swbuf_r+0x32>

080055e8 <__swsetup_r>:
 80055e8:	4b2d      	ldr	r3, [pc, #180]	@ (80056a0 <__swsetup_r+0xb8>)
 80055ea:	b570      	push	{r4, r5, r6, lr}
 80055ec:	0005      	movs	r5, r0
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	000c      	movs	r4, r1
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d004      	beq.n	8005600 <__swsetup_r+0x18>
 80055f6:	6a03      	ldr	r3, [r0, #32]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <__swsetup_r+0x18>
 80055fc:	f7ff fec2 	bl	8005384 <__sinit>
 8005600:	220c      	movs	r2, #12
 8005602:	5ea3      	ldrsh	r3, [r4, r2]
 8005604:	071a      	lsls	r2, r3, #28
 8005606:	d423      	bmi.n	8005650 <__swsetup_r+0x68>
 8005608:	06da      	lsls	r2, r3, #27
 800560a:	d407      	bmi.n	800561c <__swsetup_r+0x34>
 800560c:	2209      	movs	r2, #9
 800560e:	602a      	str	r2, [r5, #0]
 8005610:	2240      	movs	r2, #64	@ 0x40
 8005612:	2001      	movs	r0, #1
 8005614:	4313      	orrs	r3, r2
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	4240      	negs	r0, r0
 800561a:	e03a      	b.n	8005692 <__swsetup_r+0xaa>
 800561c:	075b      	lsls	r3, r3, #29
 800561e:	d513      	bpl.n	8005648 <__swsetup_r+0x60>
 8005620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005622:	2900      	cmp	r1, #0
 8005624:	d008      	beq.n	8005638 <__swsetup_r+0x50>
 8005626:	0023      	movs	r3, r4
 8005628:	3344      	adds	r3, #68	@ 0x44
 800562a:	4299      	cmp	r1, r3
 800562c:	d002      	beq.n	8005634 <__swsetup_r+0x4c>
 800562e:	0028      	movs	r0, r5
 8005630:	f000 ff40 	bl	80064b4 <_free_r>
 8005634:	2300      	movs	r3, #0
 8005636:	6363      	str	r3, [r4, #52]	@ 0x34
 8005638:	2224      	movs	r2, #36	@ 0x24
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	4393      	bics	r3, r2
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	2300      	movs	r3, #0
 8005642:	6063      	str	r3, [r4, #4]
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	2308      	movs	r3, #8
 800564a:	89a2      	ldrh	r2, [r4, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <__swsetup_r+0x86>
 8005656:	21a0      	movs	r1, #160	@ 0xa0
 8005658:	2280      	movs	r2, #128	@ 0x80
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	0089      	lsls	r1, r1, #2
 800565e:	0092      	lsls	r2, r2, #2
 8005660:	400b      	ands	r3, r1
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <__swsetup_r+0x86>
 8005666:	0021      	movs	r1, r4
 8005668:	0028      	movs	r0, r5
 800566a:	f001 fde5 	bl	8007238 <__smakebuf_r>
 800566e:	220c      	movs	r2, #12
 8005670:	5ea3      	ldrsh	r3, [r4, r2]
 8005672:	2101      	movs	r1, #1
 8005674:	001a      	movs	r2, r3
 8005676:	400a      	ands	r2, r1
 8005678:	420b      	tst	r3, r1
 800567a:	d00b      	beq.n	8005694 <__swsetup_r+0xac>
 800567c:	2200      	movs	r2, #0
 800567e:	60a2      	str	r2, [r4, #8]
 8005680:	6962      	ldr	r2, [r4, #20]
 8005682:	4252      	negs	r2, r2
 8005684:	61a2      	str	r2, [r4, #24]
 8005686:	2000      	movs	r0, #0
 8005688:	6922      	ldr	r2, [r4, #16]
 800568a:	4282      	cmp	r2, r0
 800568c:	d101      	bne.n	8005692 <__swsetup_r+0xaa>
 800568e:	061a      	lsls	r2, r3, #24
 8005690:	d4be      	bmi.n	8005610 <__swsetup_r+0x28>
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	0799      	lsls	r1, r3, #30
 8005696:	d400      	bmi.n	800569a <__swsetup_r+0xb2>
 8005698:	6962      	ldr	r2, [r4, #20]
 800569a:	60a2      	str	r2, [r4, #8]
 800569c:	e7f3      	b.n	8005686 <__swsetup_r+0x9e>
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	20000018 	.word	0x20000018

080056a4 <memset>:
 80056a4:	0003      	movs	r3, r0
 80056a6:	1882      	adds	r2, r0, r2
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d100      	bne.n	80056ae <memset+0xa>
 80056ac:	4770      	bx	lr
 80056ae:	7019      	strb	r1, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	e7f9      	b.n	80056a8 <memset+0x4>

080056b4 <_localeconv_r>:
 80056b4:	4800      	ldr	r0, [pc, #0]	@ (80056b8 <_localeconv_r+0x4>)
 80056b6:	4770      	bx	lr
 80056b8:	20000158 	.word	0x20000158

080056bc <_close_r>:
 80056bc:	2300      	movs	r3, #0
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	4d06      	ldr	r5, [pc, #24]	@ (80056dc <_close_r+0x20>)
 80056c2:	0004      	movs	r4, r0
 80056c4:	0008      	movs	r0, r1
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	f7fd fa5f 	bl	8002b8a <_close>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d103      	bne.n	80056d8 <_close_r+0x1c>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d000      	beq.n	80056d8 <_close_r+0x1c>
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	20000458 	.word	0x20000458

080056e0 <_lseek_r>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	0004      	movs	r4, r0
 80056e4:	0008      	movs	r0, r1
 80056e6:	0011      	movs	r1, r2
 80056e8:	001a      	movs	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	4d05      	ldr	r5, [pc, #20]	@ (8005704 <_lseek_r+0x24>)
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fd fa6c 	bl	8002bcc <_lseek>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d103      	bne.n	8005700 <_lseek_r+0x20>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d000      	beq.n	8005700 <_lseek_r+0x20>
 80056fe:	6023      	str	r3, [r4, #0]
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	20000458 	.word	0x20000458

08005708 <_read_r>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	0004      	movs	r4, r0
 800570c:	0008      	movs	r0, r1
 800570e:	0011      	movs	r1, r2
 8005710:	001a      	movs	r2, r3
 8005712:	2300      	movs	r3, #0
 8005714:	4d05      	ldr	r5, [pc, #20]	@ (800572c <_read_r+0x24>)
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fd f9fe 	bl	8002b18 <_read>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d103      	bne.n	8005728 <_read_r+0x20>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d000      	beq.n	8005728 <_read_r+0x20>
 8005726:	6023      	str	r3, [r4, #0]
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	20000458 	.word	0x20000458

08005730 <_write_r>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	0004      	movs	r4, r0
 8005734:	0008      	movs	r0, r1
 8005736:	0011      	movs	r1, r2
 8005738:	001a      	movs	r2, r3
 800573a:	2300      	movs	r3, #0
 800573c:	4d05      	ldr	r5, [pc, #20]	@ (8005754 <_write_r+0x24>)
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fd fa07 	bl	8002b52 <_write>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d103      	bne.n	8005750 <_write_r+0x20>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d000      	beq.n	8005750 <_write_r+0x20>
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	46c0      	nop			@ (mov r8, r8)
 8005754:	20000458 	.word	0x20000458

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	@ (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	20000018 	.word	0x20000018

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	2600      	movs	r6, #0
 8005768:	4c0c      	ldr	r4, [pc, #48]	@ (800579c <__libc_init_array+0x38>)
 800576a:	4d0d      	ldr	r5, [pc, #52]	@ (80057a0 <__libc_init_array+0x3c>)
 800576c:	1b64      	subs	r4, r4, r5
 800576e:	10a4      	asrs	r4, r4, #2
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	2600      	movs	r6, #0
 8005776:	f001 feab 	bl	80074d0 <_init>
 800577a:	4c0a      	ldr	r4, [pc, #40]	@ (80057a4 <__libc_init_array+0x40>)
 800577c:	4d0a      	ldr	r5, [pc, #40]	@ (80057a8 <__libc_init_array+0x44>)
 800577e:	1b64      	subs	r4, r4, r5
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	00b3      	lsls	r3, r6, #2
 800578a:	58eb      	ldr	r3, [r5, r3]
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	00b3      	lsls	r3, r6, #2
 8005794:	58eb      	ldr	r3, [r5, r3]
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	0800794c 	.word	0x0800794c
 80057a0:	0800794c 	.word	0x0800794c
 80057a4:	08007950 	.word	0x08007950
 80057a8:	0800794c 	.word	0x0800794c

080057ac <__retarget_lock_init_recursive>:
 80057ac:	4770      	bx	lr

080057ae <__retarget_lock_acquire_recursive>:
 80057ae:	4770      	bx	lr

080057b0 <__retarget_lock_release_recursive>:
 80057b0:	4770      	bx	lr

080057b2 <memchr>:
 80057b2:	b2c9      	uxtb	r1, r1
 80057b4:	1882      	adds	r2, r0, r2
 80057b6:	4290      	cmp	r0, r2
 80057b8:	d101      	bne.n	80057be <memchr+0xc>
 80057ba:	2000      	movs	r0, #0
 80057bc:	4770      	bx	lr
 80057be:	7803      	ldrb	r3, [r0, #0]
 80057c0:	428b      	cmp	r3, r1
 80057c2:	d0fb      	beq.n	80057bc <memchr+0xa>
 80057c4:	3001      	adds	r0, #1
 80057c6:	e7f6      	b.n	80057b6 <memchr+0x4>

080057c8 <quorem>:
 80057c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ca:	6903      	ldr	r3, [r0, #16]
 80057cc:	690c      	ldr	r4, [r1, #16]
 80057ce:	b089      	sub	sp, #36	@ 0x24
 80057d0:	9003      	str	r0, [sp, #12]
 80057d2:	9106      	str	r1, [sp, #24]
 80057d4:	2000      	movs	r0, #0
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	db63      	blt.n	80058a2 <quorem+0xda>
 80057da:	000b      	movs	r3, r1
 80057dc:	3c01      	subs	r4, #1
 80057de:	3314      	adds	r3, #20
 80057e0:	00a5      	lsls	r5, r4, #2
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	195b      	adds	r3, r3, r5
 80057e6:	9305      	str	r3, [sp, #20]
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	3314      	adds	r3, #20
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	195d      	adds	r5, r3, r5
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	682f      	ldr	r7, [r5, #0]
 80057f4:	681e      	ldr	r6, [r3, #0]
 80057f6:	0038      	movs	r0, r7
 80057f8:	3601      	adds	r6, #1
 80057fa:	0031      	movs	r1, r6
 80057fc:	f7fa fc9e 	bl	800013c <__udivsi3>
 8005800:	9002      	str	r0, [sp, #8]
 8005802:	42b7      	cmp	r7, r6
 8005804:	d327      	bcc.n	8005856 <quorem+0x8e>
 8005806:	9b04      	ldr	r3, [sp, #16]
 8005808:	2700      	movs	r7, #0
 800580a:	469c      	mov	ip, r3
 800580c:	9e01      	ldr	r6, [sp, #4]
 800580e:	9707      	str	r7, [sp, #28]
 8005810:	4662      	mov	r2, ip
 8005812:	ca08      	ldmia	r2!, {r3}
 8005814:	6830      	ldr	r0, [r6, #0]
 8005816:	4694      	mov	ip, r2
 8005818:	9a02      	ldr	r2, [sp, #8]
 800581a:	b299      	uxth	r1, r3
 800581c:	4351      	muls	r1, r2
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	4353      	muls	r3, r2
 8005822:	19c9      	adds	r1, r1, r7
 8005824:	0c0a      	lsrs	r2, r1, #16
 8005826:	189b      	adds	r3, r3, r2
 8005828:	b289      	uxth	r1, r1
 800582a:	b282      	uxth	r2, r0
 800582c:	1a52      	subs	r2, r2, r1
 800582e:	9907      	ldr	r1, [sp, #28]
 8005830:	0c1f      	lsrs	r7, r3, #16
 8005832:	1852      	adds	r2, r2, r1
 8005834:	0c00      	lsrs	r0, r0, #16
 8005836:	b29b      	uxth	r3, r3
 8005838:	1411      	asrs	r1, r2, #16
 800583a:	1ac3      	subs	r3, r0, r3
 800583c:	185b      	adds	r3, r3, r1
 800583e:	1419      	asrs	r1, r3, #16
 8005840:	b292      	uxth	r2, r2
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	431a      	orrs	r2, r3
 8005846:	9b05      	ldr	r3, [sp, #20]
 8005848:	9107      	str	r1, [sp, #28]
 800584a:	c604      	stmia	r6!, {r2}
 800584c:	4563      	cmp	r3, ip
 800584e:	d2df      	bcs.n	8005810 <quorem+0x48>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02b      	beq.n	80058ae <quorem+0xe6>
 8005856:	9906      	ldr	r1, [sp, #24]
 8005858:	9803      	ldr	r0, [sp, #12]
 800585a:	f001 f9b7 	bl	8006bcc <__mcmp>
 800585e:	2800      	cmp	r0, #0
 8005860:	db1e      	blt.n	80058a0 <quorem+0xd8>
 8005862:	2600      	movs	r6, #0
 8005864:	9d01      	ldr	r5, [sp, #4]
 8005866:	9904      	ldr	r1, [sp, #16]
 8005868:	c901      	ldmia	r1!, {r0}
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b287      	uxth	r7, r0
 800586e:	b29a      	uxth	r2, r3
 8005870:	1bd2      	subs	r2, r2, r7
 8005872:	1992      	adds	r2, r2, r6
 8005874:	0c00      	lsrs	r0, r0, #16
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	1a1b      	subs	r3, r3, r0
 800587a:	1410      	asrs	r0, r2, #16
 800587c:	181b      	adds	r3, r3, r0
 800587e:	141e      	asrs	r6, r3, #16
 8005880:	b292      	uxth	r2, r2
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	431a      	orrs	r2, r3
 8005886:	9b05      	ldr	r3, [sp, #20]
 8005888:	c504      	stmia	r5!, {r2}
 800588a:	428b      	cmp	r3, r1
 800588c:	d2ec      	bcs.n	8005868 <quorem+0xa0>
 800588e:	9a01      	ldr	r2, [sp, #4]
 8005890:	00a3      	lsls	r3, r4, #2
 8005892:	18d3      	adds	r3, r2, r3
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	2a00      	cmp	r2, #0
 8005898:	d014      	beq.n	80058c4 <quorem+0xfc>
 800589a:	9b02      	ldr	r3, [sp, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	9302      	str	r3, [sp, #8]
 80058a0:	9802      	ldr	r0, [sp, #8]
 80058a2:	b009      	add	sp, #36	@ 0x24
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a6:	682b      	ldr	r3, [r5, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <quorem+0xee>
 80058ac:	3c01      	subs	r4, #1
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	3d04      	subs	r5, #4
 80058b2:	42ab      	cmp	r3, r5
 80058b4:	d3f7      	bcc.n	80058a6 <quorem+0xde>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	611c      	str	r4, [r3, #16]
 80058ba:	e7cc      	b.n	8005856 <quorem+0x8e>
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d104      	bne.n	80058cc <quorem+0x104>
 80058c2:	3c01      	subs	r4, #1
 80058c4:	9a01      	ldr	r2, [sp, #4]
 80058c6:	3b04      	subs	r3, #4
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d3f7      	bcc.n	80058bc <quorem+0xf4>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	611c      	str	r4, [r3, #16]
 80058d0:	e7e3      	b.n	800589a <quorem+0xd2>
	...

080058d4 <_dtoa_r>:
 80058d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d6:	0014      	movs	r4, r2
 80058d8:	001d      	movs	r5, r3
 80058da:	69c6      	ldr	r6, [r0, #28]
 80058dc:	b09d      	sub	sp, #116	@ 0x74
 80058de:	940a      	str	r4, [sp, #40]	@ 0x28
 80058e0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80058e2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80058e4:	9003      	str	r0, [sp, #12]
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	d10f      	bne.n	800590a <_dtoa_r+0x36>
 80058ea:	2010      	movs	r0, #16
 80058ec:	f000 fe2c 	bl	8006548 <malloc>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	1e02      	subs	r2, r0, #0
 80058f4:	61d8      	str	r0, [r3, #28]
 80058f6:	d104      	bne.n	8005902 <_dtoa_r+0x2e>
 80058f8:	21ef      	movs	r1, #239	@ 0xef
 80058fa:	4bc7      	ldr	r3, [pc, #796]	@ (8005c18 <_dtoa_r+0x344>)
 80058fc:	48c7      	ldr	r0, [pc, #796]	@ (8005c1c <_dtoa_r+0x348>)
 80058fe:	f001 fd1d 	bl	800733c <__assert_func>
 8005902:	6046      	str	r6, [r0, #4]
 8005904:	6086      	str	r6, [r0, #8]
 8005906:	6006      	str	r6, [r0, #0]
 8005908:	60c6      	str	r6, [r0, #12]
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	2900      	cmp	r1, #0
 8005912:	d00b      	beq.n	800592c <_dtoa_r+0x58>
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	2301      	movs	r3, #1
 8005918:	4093      	lsls	r3, r2
 800591a:	604a      	str	r2, [r1, #4]
 800591c:	608b      	str	r3, [r1, #8]
 800591e:	9803      	ldr	r0, [sp, #12]
 8005920:	f000 ff12 	bl	8006748 <_Bfree>
 8005924:	2200      	movs	r2, #0
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	2d00      	cmp	r5, #0
 800592e:	da1e      	bge.n	800596e <_dtoa_r+0x9a>
 8005930:	2301      	movs	r3, #1
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	006b      	lsls	r3, r5, #1
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800593a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800593c:	4bb8      	ldr	r3, [pc, #736]	@ (8005c20 <_dtoa_r+0x34c>)
 800593e:	4ab8      	ldr	r2, [pc, #736]	@ (8005c20 <_dtoa_r+0x34c>)
 8005940:	403b      	ands	r3, r7
 8005942:	4293      	cmp	r3, r2
 8005944:	d116      	bne.n	8005974 <_dtoa_r+0xa0>
 8005946:	4bb7      	ldr	r3, [pc, #732]	@ (8005c24 <_dtoa_r+0x350>)
 8005948:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	033b      	lsls	r3, r7, #12
 800594e:	0b1b      	lsrs	r3, r3, #12
 8005950:	4323      	orrs	r3, r4
 8005952:	d101      	bne.n	8005958 <_dtoa_r+0x84>
 8005954:	f000 fd80 	bl	8006458 <_dtoa_r+0xb84>
 8005958:	4bb3      	ldr	r3, [pc, #716]	@ (8005c28 <_dtoa_r+0x354>)
 800595a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800595c:	9308      	str	r3, [sp, #32]
 800595e:	2a00      	cmp	r2, #0
 8005960:	d002      	beq.n	8005968 <_dtoa_r+0x94>
 8005962:	4bb2      	ldr	r3, [pc, #712]	@ (8005c2c <_dtoa_r+0x358>)
 8005964:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	9808      	ldr	r0, [sp, #32]
 800596a:	b01d      	add	sp, #116	@ 0x74
 800596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596e:	2300      	movs	r3, #0
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	e7e2      	b.n	800593a <_dtoa_r+0x66>
 8005974:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005978:	9212      	str	r2, [sp, #72]	@ 0x48
 800597a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800597c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800597e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	f7fa fd60 	bl	8000448 <__aeabi_dcmpeq>
 8005988:	1e06      	subs	r6, r0, #0
 800598a:	d00b      	beq.n	80059a4 <_dtoa_r+0xd0>
 800598c:	2301      	movs	r3, #1
 800598e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <_dtoa_r+0xca>
 8005998:	4ba5      	ldr	r3, [pc, #660]	@ (8005c30 <_dtoa_r+0x35c>)
 800599a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4ba5      	ldr	r3, [pc, #660]	@ (8005c34 <_dtoa_r+0x360>)
 80059a0:	9308      	str	r3, [sp, #32]
 80059a2:	e7e1      	b.n	8005968 <_dtoa_r+0x94>
 80059a4:	ab1a      	add	r3, sp, #104	@ 0x68
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	9803      	ldr	r0, [sp, #12]
 80059ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80059b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059b2:	f001 f9c1 	bl	8006d38 <__d2b>
 80059b6:	007a      	lsls	r2, r7, #1
 80059b8:	9005      	str	r0, [sp, #20]
 80059ba:	0d52      	lsrs	r2, r2, #21
 80059bc:	d100      	bne.n	80059c0 <_dtoa_r+0xec>
 80059be:	e07b      	b.n	8005ab8 <_dtoa_r+0x1e4>
 80059c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059c2:	9618      	str	r6, [sp, #96]	@ 0x60
 80059c4:	0319      	lsls	r1, r3, #12
 80059c6:	4b9c      	ldr	r3, [pc, #624]	@ (8005c38 <_dtoa_r+0x364>)
 80059c8:	0b09      	lsrs	r1, r1, #12
 80059ca:	430b      	orrs	r3, r1
 80059cc:	499b      	ldr	r1, [pc, #620]	@ (8005c3c <_dtoa_r+0x368>)
 80059ce:	1857      	adds	r7, r2, r1
 80059d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80059d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80059d4:	0019      	movs	r1, r3
 80059d6:	2200      	movs	r2, #0
 80059d8:	4b99      	ldr	r3, [pc, #612]	@ (8005c40 <_dtoa_r+0x36c>)
 80059da:	f7fc f849 	bl	8001a70 <__aeabi_dsub>
 80059de:	4a99      	ldr	r2, [pc, #612]	@ (8005c44 <_dtoa_r+0x370>)
 80059e0:	4b99      	ldr	r3, [pc, #612]	@ (8005c48 <_dtoa_r+0x374>)
 80059e2:	f7fb fd5f 	bl	80014a4 <__aeabi_dmul>
 80059e6:	4a99      	ldr	r2, [pc, #612]	@ (8005c4c <_dtoa_r+0x378>)
 80059e8:	4b99      	ldr	r3, [pc, #612]	@ (8005c50 <_dtoa_r+0x37c>)
 80059ea:	f7fa fd5b 	bl	80004a4 <__aeabi_dadd>
 80059ee:	0004      	movs	r4, r0
 80059f0:	0038      	movs	r0, r7
 80059f2:	000d      	movs	r5, r1
 80059f4:	f7fc fca4 	bl	8002340 <__aeabi_i2d>
 80059f8:	4a96      	ldr	r2, [pc, #600]	@ (8005c54 <_dtoa_r+0x380>)
 80059fa:	4b97      	ldr	r3, [pc, #604]	@ (8005c58 <_dtoa_r+0x384>)
 80059fc:	f7fb fd52 	bl	80014a4 <__aeabi_dmul>
 8005a00:	0002      	movs	r2, r0
 8005a02:	000b      	movs	r3, r1
 8005a04:	0020      	movs	r0, r4
 8005a06:	0029      	movs	r1, r5
 8005a08:	f7fa fd4c 	bl	80004a4 <__aeabi_dadd>
 8005a0c:	0004      	movs	r4, r0
 8005a0e:	000d      	movs	r5, r1
 8005a10:	f7fc fc5a 	bl	80022c8 <__aeabi_d2iz>
 8005a14:	2200      	movs	r2, #0
 8005a16:	9004      	str	r0, [sp, #16]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	0020      	movs	r0, r4
 8005a1c:	0029      	movs	r1, r5
 8005a1e:	f7fa fd19 	bl	8000454 <__aeabi_dcmplt>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d00b      	beq.n	8005a3e <_dtoa_r+0x16a>
 8005a26:	9804      	ldr	r0, [sp, #16]
 8005a28:	f7fc fc8a 	bl	8002340 <__aeabi_i2d>
 8005a2c:	002b      	movs	r3, r5
 8005a2e:	0022      	movs	r2, r4
 8005a30:	f7fa fd0a 	bl	8000448 <__aeabi_dcmpeq>
 8005a34:	4243      	negs	r3, r0
 8005a36:	4158      	adcs	r0, r3
 8005a38:	9b04      	ldr	r3, [sp, #16]
 8005a3a:	1a1b      	subs	r3, r3, r0
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a42:	9b04      	ldr	r3, [sp, #16]
 8005a44:	2b16      	cmp	r3, #22
 8005a46:	d810      	bhi.n	8005a6a <_dtoa_r+0x196>
 8005a48:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005a4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005a4c:	9a04      	ldr	r2, [sp, #16]
 8005a4e:	4b83      	ldr	r3, [pc, #524]	@ (8005c5c <_dtoa_r+0x388>)
 8005a50:	00d2      	lsls	r2, r2, #3
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f7fa fcfc 	bl	8000454 <__aeabi_dcmplt>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d047      	beq.n	8005af0 <_dtoa_r+0x21c>
 8005a60:	9b04      	ldr	r3, [sp, #16]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005a6e:	9206      	str	r2, [sp, #24]
 8005a70:	1bdb      	subs	r3, r3, r7
 8005a72:	1e5a      	subs	r2, r3, #1
 8005a74:	d53e      	bpl.n	8005af4 <_dtoa_r+0x220>
 8005a76:	2201      	movs	r2, #1
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	9306      	str	r3, [sp, #24]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	db38      	blt.n	8005af8 <_dtoa_r+0x224>
 8005a86:	9a04      	ldr	r2, [sp, #16]
 8005a88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a8a:	4694      	mov	ip, r2
 8005a8c:	4463      	add	r3, ip
 8005a8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005a90:	2300      	movs	r3, #0
 8005a92:	9214      	str	r2, [sp, #80]	@ 0x50
 8005a94:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a96:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005a98:	2401      	movs	r4, #1
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d862      	bhi.n	8005b64 <_dtoa_r+0x290>
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	dd02      	ble.n	8005aa8 <_dtoa_r+0x1d4>
 8005aa2:	2400      	movs	r4, #0
 8005aa4:	3b04      	subs	r3, #4
 8005aa6:	9322      	str	r3, [sp, #136]	@ 0x88
 8005aa8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005aaa:	1e98      	subs	r0, r3, #2
 8005aac:	2803      	cmp	r0, #3
 8005aae:	d863      	bhi.n	8005b78 <_dtoa_r+0x2a4>
 8005ab0:	f7fa fb30 	bl	8000114 <__gnu_thumb1_case_uqi>
 8005ab4:	2b385654 	.word	0x2b385654
 8005ab8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005aba:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8005abc:	18f6      	adds	r6, r6, r3
 8005abe:	4b68      	ldr	r3, [pc, #416]	@ (8005c60 <_dtoa_r+0x38c>)
 8005ac0:	18f2      	adds	r2, r6, r3
 8005ac2:	2a20      	cmp	r2, #32
 8005ac4:	dd0f      	ble.n	8005ae6 <_dtoa_r+0x212>
 8005ac6:	2340      	movs	r3, #64	@ 0x40
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	409f      	lsls	r7, r3
 8005acc:	4b65      	ldr	r3, [pc, #404]	@ (8005c64 <_dtoa_r+0x390>)
 8005ace:	0038      	movs	r0, r7
 8005ad0:	18f3      	adds	r3, r6, r3
 8005ad2:	40dc      	lsrs	r4, r3
 8005ad4:	4320      	orrs	r0, r4
 8005ad6:	f7fc fc61 	bl	800239c <__aeabi_ui2d>
 8005ada:	2201      	movs	r2, #1
 8005adc:	4b62      	ldr	r3, [pc, #392]	@ (8005c68 <_dtoa_r+0x394>)
 8005ade:	1e77      	subs	r7, r6, #1
 8005ae0:	18cb      	adds	r3, r1, r3
 8005ae2:	9218      	str	r2, [sp, #96]	@ 0x60
 8005ae4:	e776      	b.n	80059d4 <_dtoa_r+0x100>
 8005ae6:	2320      	movs	r3, #32
 8005ae8:	0020      	movs	r0, r4
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	4098      	lsls	r0, r3
 8005aee:	e7f2      	b.n	8005ad6 <_dtoa_r+0x202>
 8005af0:	9015      	str	r0, [sp, #84]	@ 0x54
 8005af2:	e7ba      	b.n	8005a6a <_dtoa_r+0x196>
 8005af4:	920d      	str	r2, [sp, #52]	@ 0x34
 8005af6:	e7c3      	b.n	8005a80 <_dtoa_r+0x1ac>
 8005af8:	9b06      	ldr	r3, [sp, #24]
 8005afa:	9a04      	ldr	r2, [sp, #16]
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	9306      	str	r3, [sp, #24]
 8005b00:	4253      	negs	r3, r2
 8005b02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b04:	2300      	movs	r3, #0
 8005b06:	9314      	str	r3, [sp, #80]	@ 0x50
 8005b08:	e7c5      	b.n	8005a96 <_dtoa_r+0x1c2>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005b0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b10:	4694      	mov	ip, r2
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	4463      	add	r3, ip
 8005b16:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b18:	3301      	adds	r3, #1
 8005b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dc08      	bgt.n	8005b32 <_dtoa_r+0x25e>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e006      	b.n	8005b32 <_dtoa_r+0x25e>
 8005b24:	2301      	movs	r3, #1
 8005b26:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b28:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	dd28      	ble.n	8005b80 <_dtoa_r+0x2ac>
 8005b2e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b32:	9a03      	ldr	r2, [sp, #12]
 8005b34:	2100      	movs	r1, #0
 8005b36:	69d0      	ldr	r0, [r2, #28]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	0015      	movs	r5, r2
 8005b3c:	3514      	adds	r5, #20
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	d923      	bls.n	8005b8a <_dtoa_r+0x2b6>
 8005b42:	6041      	str	r1, [r0, #4]
 8005b44:	9803      	ldr	r0, [sp, #12]
 8005b46:	f000 fdbb 	bl	80066c0 <_Balloc>
 8005b4a:	9008      	str	r0, [sp, #32]
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d11f      	bne.n	8005b90 <_dtoa_r+0x2bc>
 8005b50:	21b0      	movs	r1, #176	@ 0xb0
 8005b52:	4b46      	ldr	r3, [pc, #280]	@ (8005c6c <_dtoa_r+0x398>)
 8005b54:	4831      	ldr	r0, [pc, #196]	@ (8005c1c <_dtoa_r+0x348>)
 8005b56:	9a08      	ldr	r2, [sp, #32]
 8005b58:	31ff      	adds	r1, #255	@ 0xff
 8005b5a:	e6d0      	b.n	80058fe <_dtoa_r+0x2a>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e7e2      	b.n	8005b26 <_dtoa_r+0x252>
 8005b60:	2300      	movs	r3, #0
 8005b62:	e7d3      	b.n	8005b0c <_dtoa_r+0x238>
 8005b64:	2300      	movs	r3, #0
 8005b66:	9410      	str	r4, [sp, #64]	@ 0x40
 8005b68:	9322      	str	r3, [sp, #136]	@ 0x88
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b72:	3313      	adds	r3, #19
 8005b74:	9223      	str	r2, [sp, #140]	@ 0x8c
 8005b76:	e7dc      	b.n	8005b32 <_dtoa_r+0x25e>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b7c:	3b02      	subs	r3, #2
 8005b7e:	e7f5      	b.n	8005b6c <_dtoa_r+0x298>
 8005b80:	2301      	movs	r3, #1
 8005b82:	001a      	movs	r2, r3
 8005b84:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b88:	e7f4      	b.n	8005b74 <_dtoa_r+0x2a0>
 8005b8a:	3101      	adds	r1, #1
 8005b8c:	0052      	lsls	r2, r2, #1
 8005b8e:	e7d4      	b.n	8005b3a <_dtoa_r+0x266>
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	9a08      	ldr	r2, [sp, #32]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9a:	2b0e      	cmp	r3, #14
 8005b9c:	d900      	bls.n	8005ba0 <_dtoa_r+0x2cc>
 8005b9e:	e0d6      	b.n	8005d4e <_dtoa_r+0x47a>
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d100      	bne.n	8005ba6 <_dtoa_r+0x2d2>
 8005ba4:	e0d3      	b.n	8005d4e <_dtoa_r+0x47a>
 8005ba6:	9b04      	ldr	r3, [sp, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dd63      	ble.n	8005c74 <_dtoa_r+0x3a0>
 8005bac:	210f      	movs	r1, #15
 8005bae:	9a04      	ldr	r2, [sp, #16]
 8005bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c5c <_dtoa_r+0x388>)
 8005bb2:	400a      	ands	r2, r1
 8005bb4:	00d2      	lsls	r2, r2, #3
 8005bb6:	189b      	adds	r3, r3, r2
 8005bb8:	681e      	ldr	r6, [r3, #0]
 8005bba:	685f      	ldr	r7, [r3, #4]
 8005bbc:	9b04      	ldr	r3, [sp, #16]
 8005bbe:	2402      	movs	r4, #2
 8005bc0:	111d      	asrs	r5, r3, #4
 8005bc2:	05db      	lsls	r3, r3, #23
 8005bc4:	d50a      	bpl.n	8005bdc <_dtoa_r+0x308>
 8005bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c70 <_dtoa_r+0x39c>)
 8005bc8:	400d      	ands	r5, r1
 8005bca:	6a1a      	ldr	r2, [r3, #32]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005bd0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005bd2:	f7fb f82d 	bl	8000c30 <__aeabi_ddiv>
 8005bd6:	900a      	str	r0, [sp, #40]	@ 0x28
 8005bd8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005bda:	3401      	adds	r4, #1
 8005bdc:	4b24      	ldr	r3, [pc, #144]	@ (8005c70 <_dtoa_r+0x39c>)
 8005bde:	930c      	str	r3, [sp, #48]	@ 0x30
 8005be0:	2d00      	cmp	r5, #0
 8005be2:	d108      	bne.n	8005bf6 <_dtoa_r+0x322>
 8005be4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005be6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005be8:	0032      	movs	r2, r6
 8005bea:	003b      	movs	r3, r7
 8005bec:	f7fb f820 	bl	8000c30 <__aeabi_ddiv>
 8005bf0:	900a      	str	r0, [sp, #40]	@ 0x28
 8005bf2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005bf4:	e059      	b.n	8005caa <_dtoa_r+0x3d6>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	421d      	tst	r5, r3
 8005bfa:	d009      	beq.n	8005c10 <_dtoa_r+0x33c>
 8005bfc:	18e4      	adds	r4, r4, r3
 8005bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c00:	0030      	movs	r0, r6
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	0039      	movs	r1, r7
 8005c08:	f7fb fc4c 	bl	80014a4 <__aeabi_dmul>
 8005c0c:	0006      	movs	r6, r0
 8005c0e:	000f      	movs	r7, r1
 8005c10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c12:	106d      	asrs	r5, r5, #1
 8005c14:	3308      	adds	r3, #8
 8005c16:	e7e2      	b.n	8005bde <_dtoa_r+0x30a>
 8005c18:	08007619 	.word	0x08007619
 8005c1c:	08007630 	.word	0x08007630
 8005c20:	7ff00000 	.word	0x7ff00000
 8005c24:	0000270f 	.word	0x0000270f
 8005c28:	08007615 	.word	0x08007615
 8005c2c:	08007618 	.word	0x08007618
 8005c30:	080075e9 	.word	0x080075e9
 8005c34:	080075e8 	.word	0x080075e8
 8005c38:	3ff00000 	.word	0x3ff00000
 8005c3c:	fffffc01 	.word	0xfffffc01
 8005c40:	3ff80000 	.word	0x3ff80000
 8005c44:	636f4361 	.word	0x636f4361
 8005c48:	3fd287a7 	.word	0x3fd287a7
 8005c4c:	8b60c8b3 	.word	0x8b60c8b3
 8005c50:	3fc68a28 	.word	0x3fc68a28
 8005c54:	509f79fb 	.word	0x509f79fb
 8005c58:	3fd34413 	.word	0x3fd34413
 8005c5c:	08007780 	.word	0x08007780
 8005c60:	00000432 	.word	0x00000432
 8005c64:	00000412 	.word	0x00000412
 8005c68:	fe100000 	.word	0xfe100000
 8005c6c:	08007688 	.word	0x08007688
 8005c70:	08007758 	.word	0x08007758
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	2402      	movs	r4, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d016      	beq.n	8005caa <_dtoa_r+0x3d6>
 8005c7c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005c7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005c80:	220f      	movs	r2, #15
 8005c82:	425d      	negs	r5, r3
 8005c84:	402a      	ands	r2, r5
 8005c86:	4bd5      	ldr	r3, [pc, #852]	@ (8005fdc <_dtoa_r+0x708>)
 8005c88:	00d2      	lsls	r2, r2, #3
 8005c8a:	189b      	adds	r3, r3, r2
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f7fb fc08 	bl	80014a4 <__aeabi_dmul>
 8005c94:	2701      	movs	r7, #1
 8005c96:	2300      	movs	r3, #0
 8005c98:	900a      	str	r0, [sp, #40]	@ 0x28
 8005c9a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005c9c:	4ed0      	ldr	r6, [pc, #832]	@ (8005fe0 <_dtoa_r+0x70c>)
 8005c9e:	112d      	asrs	r5, r5, #4
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	d000      	beq.n	8005ca6 <_dtoa_r+0x3d2>
 8005ca4:	e095      	b.n	8005dd2 <_dtoa_r+0x4fe>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1a2      	bne.n	8005bf0 <_dtoa_r+0x31c>
 8005caa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005cac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005cae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d100      	bne.n	8005cb6 <_dtoa_r+0x3e2>
 8005cb4:	e098      	b.n	8005de8 <_dtoa_r+0x514>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	0030      	movs	r0, r6
 8005cba:	0039      	movs	r1, r7
 8005cbc:	4bc9      	ldr	r3, [pc, #804]	@ (8005fe4 <_dtoa_r+0x710>)
 8005cbe:	f7fa fbc9 	bl	8000454 <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d100      	bne.n	8005cc8 <_dtoa_r+0x3f4>
 8005cc6:	e08f      	b.n	8005de8 <_dtoa_r+0x514>
 8005cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d100      	bne.n	8005cd0 <_dtoa_r+0x3fc>
 8005cce:	e08b      	b.n	8005de8 <_dtoa_r+0x514>
 8005cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dd37      	ble.n	8005d46 <_dtoa_r+0x472>
 8005cd6:	9b04      	ldr	r3, [sp, #16]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8005cde:	0030      	movs	r0, r6
 8005ce0:	4bc1      	ldr	r3, [pc, #772]	@ (8005fe8 <_dtoa_r+0x714>)
 8005ce2:	0039      	movs	r1, r7
 8005ce4:	f7fb fbde 	bl	80014a4 <__aeabi_dmul>
 8005ce8:	900a      	str	r0, [sp, #40]	@ 0x28
 8005cea:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cee:	3401      	adds	r4, #1
 8005cf0:	0020      	movs	r0, r4
 8005cf2:	9311      	str	r3, [sp, #68]	@ 0x44
 8005cf4:	f7fc fb24 	bl	8002340 <__aeabi_i2d>
 8005cf8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cfc:	f7fb fbd2 	bl	80014a4 <__aeabi_dmul>
 8005d00:	4bba      	ldr	r3, [pc, #744]	@ (8005fec <_dtoa_r+0x718>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	f7fa fbce 	bl	80004a4 <__aeabi_dadd>
 8005d08:	4bb9      	ldr	r3, [pc, #740]	@ (8005ff0 <_dtoa_r+0x71c>)
 8005d0a:	0006      	movs	r6, r0
 8005d0c:	18cf      	adds	r7, r1, r3
 8005d0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d16d      	bne.n	8005df0 <_dtoa_r+0x51c>
 8005d14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4bb6      	ldr	r3, [pc, #728]	@ (8005ff4 <_dtoa_r+0x720>)
 8005d1c:	f7fb fea8 	bl	8001a70 <__aeabi_dsub>
 8005d20:	0032      	movs	r2, r6
 8005d22:	003b      	movs	r3, r7
 8005d24:	0004      	movs	r4, r0
 8005d26:	000d      	movs	r5, r1
 8005d28:	f7fa fba8 	bl	800047c <__aeabi_dcmpgt>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d000      	beq.n	8005d32 <_dtoa_r+0x45e>
 8005d30:	e2b6      	b.n	80062a0 <_dtoa_r+0x9cc>
 8005d32:	2180      	movs	r1, #128	@ 0x80
 8005d34:	0609      	lsls	r1, r1, #24
 8005d36:	187b      	adds	r3, r7, r1
 8005d38:	0032      	movs	r2, r6
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	0029      	movs	r1, r5
 8005d3e:	f7fa fb89 	bl	8000454 <__aeabi_dcmplt>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d128      	bne.n	8005d98 <_dtoa_r+0x4c4>
 8005d46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005d48:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d4c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da00      	bge.n	8005d56 <_dtoa_r+0x482>
 8005d54:	e174      	b.n	8006040 <_dtoa_r+0x76c>
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	2a0e      	cmp	r2, #14
 8005d5a:	dd00      	ble.n	8005d5e <_dtoa_r+0x48a>
 8005d5c:	e170      	b.n	8006040 <_dtoa_r+0x76c>
 8005d5e:	4b9f      	ldr	r3, [pc, #636]	@ (8005fdc <_dtoa_r+0x708>)
 8005d60:	00d2      	lsls	r2, r2, #3
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	685c      	ldr	r4, [r3, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	9306      	str	r3, [sp, #24]
 8005d6a:	9407      	str	r4, [sp, #28]
 8005d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	db00      	blt.n	8005d74 <_dtoa_r+0x4a0>
 8005d72:	e0e7      	b.n	8005f44 <_dtoa_r+0x670>
 8005d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd00      	ble.n	8005d7c <_dtoa_r+0x4a8>
 8005d7a:	e0e3      	b.n	8005f44 <_dtoa_r+0x670>
 8005d7c:	d10c      	bne.n	8005d98 <_dtoa_r+0x4c4>
 8005d7e:	9806      	ldr	r0, [sp, #24]
 8005d80:	9907      	ldr	r1, [sp, #28]
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b9b      	ldr	r3, [pc, #620]	@ (8005ff4 <_dtoa_r+0x720>)
 8005d86:	f7fb fb8d 	bl	80014a4 <__aeabi_dmul>
 8005d8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d8e:	f7fa fb7f 	bl	8000490 <__aeabi_dcmpge>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d100      	bne.n	8005d98 <_dtoa_r+0x4c4>
 8005d96:	e286      	b.n	80062a6 <_dtoa_r+0x9d2>
 8005d98:	2600      	movs	r6, #0
 8005d9a:	0037      	movs	r7, r6
 8005d9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d9e:	9c08      	ldr	r4, [sp, #32]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	930c      	str	r3, [sp, #48]	@ 0x30
 8005da4:	9704      	str	r7, [sp, #16]
 8005da6:	2700      	movs	r7, #0
 8005da8:	0031      	movs	r1, r6
 8005daa:	9803      	ldr	r0, [sp, #12]
 8005dac:	f000 fccc 	bl	8006748 <_Bfree>
 8005db0:	9b04      	ldr	r3, [sp, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d100      	bne.n	8005db8 <_dtoa_r+0x4e4>
 8005db6:	e0bb      	b.n	8005f30 <_dtoa_r+0x65c>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	d005      	beq.n	8005dc8 <_dtoa_r+0x4f4>
 8005dbc:	429f      	cmp	r7, r3
 8005dbe:	d003      	beq.n	8005dc8 <_dtoa_r+0x4f4>
 8005dc0:	0039      	movs	r1, r7
 8005dc2:	9803      	ldr	r0, [sp, #12]
 8005dc4:	f000 fcc0 	bl	8006748 <_Bfree>
 8005dc8:	9904      	ldr	r1, [sp, #16]
 8005dca:	9803      	ldr	r0, [sp, #12]
 8005dcc:	f000 fcbc 	bl	8006748 <_Bfree>
 8005dd0:	e0ae      	b.n	8005f30 <_dtoa_r+0x65c>
 8005dd2:	423d      	tst	r5, r7
 8005dd4:	d005      	beq.n	8005de2 <_dtoa_r+0x50e>
 8005dd6:	6832      	ldr	r2, [r6, #0]
 8005dd8:	6873      	ldr	r3, [r6, #4]
 8005dda:	f7fb fb63 	bl	80014a4 <__aeabi_dmul>
 8005dde:	003b      	movs	r3, r7
 8005de0:	3401      	adds	r4, #1
 8005de2:	106d      	asrs	r5, r5, #1
 8005de4:	3608      	adds	r6, #8
 8005de6:	e75b      	b.n	8005ca0 <_dtoa_r+0x3cc>
 8005de8:	9b04      	ldr	r3, [sp, #16]
 8005dea:	930c      	str	r3, [sp, #48]	@ 0x30
 8005dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dee:	e77f      	b.n	8005cf0 <_dtoa_r+0x41c>
 8005df0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005df2:	4b7a      	ldr	r3, [pc, #488]	@ (8005fdc <_dtoa_r+0x708>)
 8005df4:	3a01      	subs	r2, #1
 8005df6:	00d2      	lsls	r2, r2, #3
 8005df8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005dfa:	189b      	adds	r3, r3, r2
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d04c      	beq.n	8005e9e <_dtoa_r+0x5ca>
 8005e04:	2000      	movs	r0, #0
 8005e06:	497c      	ldr	r1, [pc, #496]	@ (8005ff8 <_dtoa_r+0x724>)
 8005e08:	f7fa ff12 	bl	8000c30 <__aeabi_ddiv>
 8005e0c:	0032      	movs	r2, r6
 8005e0e:	003b      	movs	r3, r7
 8005e10:	f7fb fe2e 	bl	8001a70 <__aeabi_dsub>
 8005e14:	9a08      	ldr	r2, [sp, #32]
 8005e16:	0006      	movs	r6, r0
 8005e18:	4694      	mov	ip, r2
 8005e1a:	000f      	movs	r7, r1
 8005e1c:	9b08      	ldr	r3, [sp, #32]
 8005e1e:	9316      	str	r3, [sp, #88]	@ 0x58
 8005e20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e22:	4463      	add	r3, ip
 8005e24:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e2a:	f7fc fa4d 	bl	80022c8 <__aeabi_d2iz>
 8005e2e:	0005      	movs	r5, r0
 8005e30:	f7fc fa86 	bl	8002340 <__aeabi_i2d>
 8005e34:	0002      	movs	r2, r0
 8005e36:	000b      	movs	r3, r1
 8005e38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e3c:	f7fb fe18 	bl	8001a70 <__aeabi_dsub>
 8005e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005e42:	3530      	adds	r5, #48	@ 0x30
 8005e44:	1c5c      	adds	r4, r3, #1
 8005e46:	701d      	strb	r5, [r3, #0]
 8005e48:	0032      	movs	r2, r6
 8005e4a:	003b      	movs	r3, r7
 8005e4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005e50:	f7fa fb00 	bl	8000454 <__aeabi_dcmplt>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d16b      	bne.n	8005f30 <_dtoa_r+0x65c>
 8005e58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	4961      	ldr	r1, [pc, #388]	@ (8005fe4 <_dtoa_r+0x710>)
 8005e60:	f7fb fe06 	bl	8001a70 <__aeabi_dsub>
 8005e64:	0032      	movs	r2, r6
 8005e66:	003b      	movs	r3, r7
 8005e68:	f7fa faf4 	bl	8000454 <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d000      	beq.n	8005e72 <_dtoa_r+0x59e>
 8005e70:	e0c6      	b.n	8006000 <_dtoa_r+0x72c>
 8005e72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d100      	bne.n	8005e7a <_dtoa_r+0x5a6>
 8005e78:	e765      	b.n	8005d46 <_dtoa_r+0x472>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	0030      	movs	r0, r6
 8005e7e:	0039      	movs	r1, r7
 8005e80:	4b59      	ldr	r3, [pc, #356]	@ (8005fe8 <_dtoa_r+0x714>)
 8005e82:	f7fb fb0f 	bl	80014a4 <__aeabi_dmul>
 8005e86:	2200      	movs	r2, #0
 8005e88:	0006      	movs	r6, r0
 8005e8a:	000f      	movs	r7, r1
 8005e8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e8e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e90:	4b55      	ldr	r3, [pc, #340]	@ (8005fe8 <_dtoa_r+0x714>)
 8005e92:	f7fb fb07 	bl	80014a4 <__aeabi_dmul>
 8005e96:	9416      	str	r4, [sp, #88]	@ 0x58
 8005e98:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e9a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005e9c:	e7c3      	b.n	8005e26 <_dtoa_r+0x552>
 8005e9e:	0030      	movs	r0, r6
 8005ea0:	0039      	movs	r1, r7
 8005ea2:	f7fb faff 	bl	80014a4 <__aeabi_dmul>
 8005ea6:	9d08      	ldr	r5, [sp, #32]
 8005ea8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005eaa:	002b      	movs	r3, r5
 8005eac:	4694      	mov	ip, r2
 8005eae:	9016      	str	r0, [sp, #88]	@ 0x58
 8005eb0:	9117      	str	r1, [sp, #92]	@ 0x5c
 8005eb2:	4463      	add	r3, ip
 8005eb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8005eb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005eb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005eba:	f7fc fa05 	bl	80022c8 <__aeabi_d2iz>
 8005ebe:	0004      	movs	r4, r0
 8005ec0:	f7fc fa3e 	bl	8002340 <__aeabi_i2d>
 8005ec4:	000b      	movs	r3, r1
 8005ec6:	0002      	movs	r2, r0
 8005ec8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005eca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ecc:	f7fb fdd0 	bl	8001a70 <__aeabi_dsub>
 8005ed0:	3430      	adds	r4, #48	@ 0x30
 8005ed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ed4:	702c      	strb	r4, [r5, #0]
 8005ed6:	3501      	adds	r5, #1
 8005ed8:	0006      	movs	r6, r0
 8005eda:	000f      	movs	r7, r1
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	d12a      	bne.n	8005f36 <_dtoa_r+0x662>
 8005ee0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005ee2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005ee4:	9b08      	ldr	r3, [sp, #32]
 8005ee6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8005ee8:	469c      	mov	ip, r3
 8005eea:	2200      	movs	r2, #0
 8005eec:	4b42      	ldr	r3, [pc, #264]	@ (8005ff8 <_dtoa_r+0x724>)
 8005eee:	4464      	add	r4, ip
 8005ef0:	f7fa fad8 	bl	80004a4 <__aeabi_dadd>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	000b      	movs	r3, r1
 8005ef8:	0030      	movs	r0, r6
 8005efa:	0039      	movs	r1, r7
 8005efc:	f7fa fabe 	bl	800047c <__aeabi_dcmpgt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d000      	beq.n	8005f06 <_dtoa_r+0x632>
 8005f04:	e07c      	b.n	8006000 <_dtoa_r+0x72c>
 8005f06:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005f08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	493a      	ldr	r1, [pc, #232]	@ (8005ff8 <_dtoa_r+0x724>)
 8005f0e:	f7fb fdaf 	bl	8001a70 <__aeabi_dsub>
 8005f12:	0002      	movs	r2, r0
 8005f14:	000b      	movs	r3, r1
 8005f16:	0030      	movs	r0, r6
 8005f18:	0039      	movs	r1, r7
 8005f1a:	f7fa fa9b 	bl	8000454 <__aeabi_dcmplt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d100      	bne.n	8005f24 <_dtoa_r+0x650>
 8005f22:	e710      	b.n	8005d46 <_dtoa_r+0x472>
 8005f24:	0023      	movs	r3, r4
 8005f26:	3c01      	subs	r4, #1
 8005f28:	7822      	ldrb	r2, [r4, #0]
 8005f2a:	2a30      	cmp	r2, #48	@ 0x30
 8005f2c:	d0fa      	beq.n	8005f24 <_dtoa_r+0x650>
 8005f2e:	001c      	movs	r4, r3
 8005f30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	e042      	b.n	8005fbc <_dtoa_r+0x6e8>
 8005f36:	2200      	movs	r2, #0
 8005f38:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe8 <_dtoa_r+0x714>)
 8005f3a:	f7fb fab3 	bl	80014a4 <__aeabi_dmul>
 8005f3e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f40:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005f42:	e7b8      	b.n	8005eb6 <_dtoa_r+0x5e2>
 8005f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f46:	9d08      	ldr	r5, [sp, #32]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	195b      	adds	r3, r3, r5
 8005f4c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005f4e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f52:	9a06      	ldr	r2, [sp, #24]
 8005f54:	9b07      	ldr	r3, [sp, #28]
 8005f56:	0030      	movs	r0, r6
 8005f58:	0039      	movs	r1, r7
 8005f5a:	f7fa fe69 	bl	8000c30 <__aeabi_ddiv>
 8005f5e:	f7fc f9b3 	bl	80022c8 <__aeabi_d2iz>
 8005f62:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f64:	f7fc f9ec 	bl	8002340 <__aeabi_i2d>
 8005f68:	9a06      	ldr	r2, [sp, #24]
 8005f6a:	9b07      	ldr	r3, [sp, #28]
 8005f6c:	f7fb fa9a 	bl	80014a4 <__aeabi_dmul>
 8005f70:	0002      	movs	r2, r0
 8005f72:	000b      	movs	r3, r1
 8005f74:	0030      	movs	r0, r6
 8005f76:	0039      	movs	r1, r7
 8005f78:	f7fb fd7a 	bl	8001a70 <__aeabi_dsub>
 8005f7c:	002b      	movs	r3, r5
 8005f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f80:	3501      	adds	r5, #1
 8005f82:	3230      	adds	r2, #48	@ 0x30
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f88:	002c      	movs	r4, r5
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d14b      	bne.n	8006026 <_dtoa_r+0x752>
 8005f8e:	0002      	movs	r2, r0
 8005f90:	000b      	movs	r3, r1
 8005f92:	f7fa fa87 	bl	80004a4 <__aeabi_dadd>
 8005f96:	9a06      	ldr	r2, [sp, #24]
 8005f98:	9b07      	ldr	r3, [sp, #28]
 8005f9a:	0006      	movs	r6, r0
 8005f9c:	000f      	movs	r7, r1
 8005f9e:	f7fa fa6d 	bl	800047c <__aeabi_dcmpgt>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d12a      	bne.n	8005ffc <_dtoa_r+0x728>
 8005fa6:	9a06      	ldr	r2, [sp, #24]
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	0030      	movs	r0, r6
 8005fac:	0039      	movs	r1, r7
 8005fae:	f7fa fa4b 	bl	8000448 <__aeabi_dcmpeq>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d002      	beq.n	8005fbc <_dtoa_r+0x6e8>
 8005fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb8:	07dd      	lsls	r5, r3, #31
 8005fba:	d41f      	bmi.n	8005ffc <_dtoa_r+0x728>
 8005fbc:	9905      	ldr	r1, [sp, #20]
 8005fbe:	9803      	ldr	r0, [sp, #12]
 8005fc0:	f000 fbc2 	bl	8006748 <_Bfree>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	7023      	strb	r3, [r4, #0]
 8005fc8:	9b04      	ldr	r3, [sp, #16]
 8005fca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d100      	bne.n	8005fd8 <_dtoa_r+0x704>
 8005fd6:	e4c7      	b.n	8005968 <_dtoa_r+0x94>
 8005fd8:	601c      	str	r4, [r3, #0]
 8005fda:	e4c5      	b.n	8005968 <_dtoa_r+0x94>
 8005fdc:	08007780 	.word	0x08007780
 8005fe0:	08007758 	.word	0x08007758
 8005fe4:	3ff00000 	.word	0x3ff00000
 8005fe8:	40240000 	.word	0x40240000
 8005fec:	401c0000 	.word	0x401c0000
 8005ff0:	fcc00000 	.word	0xfcc00000
 8005ff4:	40140000 	.word	0x40140000
 8005ff8:	3fe00000 	.word	0x3fe00000
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	930c      	str	r3, [sp, #48]	@ 0x30
 8006000:	0023      	movs	r3, r4
 8006002:	001c      	movs	r4, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	2a39      	cmp	r2, #57	@ 0x39
 800600a:	d108      	bne.n	800601e <_dtoa_r+0x74a>
 800600c:	9a08      	ldr	r2, [sp, #32]
 800600e:	429a      	cmp	r2, r3
 8006010:	d1f7      	bne.n	8006002 <_dtoa_r+0x72e>
 8006012:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006014:	9908      	ldr	r1, [sp, #32]
 8006016:	3201      	adds	r2, #1
 8006018:	920c      	str	r2, [sp, #48]	@ 0x30
 800601a:	2230      	movs	r2, #48	@ 0x30
 800601c:	700a      	strb	r2, [r1, #0]
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	3201      	adds	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e784      	b.n	8005f30 <_dtoa_r+0x65c>
 8006026:	2200      	movs	r2, #0
 8006028:	4bc6      	ldr	r3, [pc, #792]	@ (8006344 <_dtoa_r+0xa70>)
 800602a:	f7fb fa3b 	bl	80014a4 <__aeabi_dmul>
 800602e:	2200      	movs	r2, #0
 8006030:	2300      	movs	r3, #0
 8006032:	0006      	movs	r6, r0
 8006034:	000f      	movs	r7, r1
 8006036:	f7fa fa07 	bl	8000448 <__aeabi_dcmpeq>
 800603a:	2800      	cmp	r0, #0
 800603c:	d089      	beq.n	8005f52 <_dtoa_r+0x67e>
 800603e:	e7bd      	b.n	8005fbc <_dtoa_r+0x6e8>
 8006040:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006042:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006044:	9c06      	ldr	r4, [sp, #24]
 8006046:	2f00      	cmp	r7, #0
 8006048:	d014      	beq.n	8006074 <_dtoa_r+0x7a0>
 800604a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800604c:	2a01      	cmp	r2, #1
 800604e:	dd00      	ble.n	8006052 <_dtoa_r+0x77e>
 8006050:	e0e4      	b.n	800621c <_dtoa_r+0x948>
 8006052:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006054:	2a00      	cmp	r2, #0
 8006056:	d100      	bne.n	800605a <_dtoa_r+0x786>
 8006058:	e0da      	b.n	8006210 <_dtoa_r+0x93c>
 800605a:	4abb      	ldr	r2, [pc, #748]	@ (8006348 <_dtoa_r+0xa74>)
 800605c:	189b      	adds	r3, r3, r2
 800605e:	9a06      	ldr	r2, [sp, #24]
 8006060:	2101      	movs	r1, #1
 8006062:	18d2      	adds	r2, r2, r3
 8006064:	9206      	str	r2, [sp, #24]
 8006066:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006068:	9803      	ldr	r0, [sp, #12]
 800606a:	18d3      	adds	r3, r2, r3
 800606c:	930d      	str	r3, [sp, #52]	@ 0x34
 800606e:	f000 fc23 	bl	80068b8 <__i2b>
 8006072:	0007      	movs	r7, r0
 8006074:	2c00      	cmp	r4, #0
 8006076:	d00e      	beq.n	8006096 <_dtoa_r+0x7c2>
 8006078:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800607a:	2b00      	cmp	r3, #0
 800607c:	dd0b      	ble.n	8006096 <_dtoa_r+0x7c2>
 800607e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006080:	0023      	movs	r3, r4
 8006082:	4294      	cmp	r4, r2
 8006084:	dd00      	ble.n	8006088 <_dtoa_r+0x7b4>
 8006086:	0013      	movs	r3, r2
 8006088:	9a06      	ldr	r2, [sp, #24]
 800608a:	1ae4      	subs	r4, r4, r3
 800608c:	1ad2      	subs	r2, r2, r3
 800608e:	9206      	str	r2, [sp, #24]
 8006090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	930d      	str	r3, [sp, #52]	@ 0x34
 8006096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d021      	beq.n	80060e0 <_dtoa_r+0x80c>
 800609c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d100      	bne.n	80060a4 <_dtoa_r+0x7d0>
 80060a2:	e0d3      	b.n	800624c <_dtoa_r+0x978>
 80060a4:	9e05      	ldr	r6, [sp, #20]
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	d014      	beq.n	80060d4 <_dtoa_r+0x800>
 80060aa:	0039      	movs	r1, r7
 80060ac:	002a      	movs	r2, r5
 80060ae:	9803      	ldr	r0, [sp, #12]
 80060b0:	f000 fcc4 	bl	8006a3c <__pow5mult>
 80060b4:	9a05      	ldr	r2, [sp, #20]
 80060b6:	0001      	movs	r1, r0
 80060b8:	0007      	movs	r7, r0
 80060ba:	9803      	ldr	r0, [sp, #12]
 80060bc:	f000 fc14 	bl	80068e8 <__multiply>
 80060c0:	0006      	movs	r6, r0
 80060c2:	9905      	ldr	r1, [sp, #20]
 80060c4:	9803      	ldr	r0, [sp, #12]
 80060c6:	f000 fb3f 	bl	8006748 <_Bfree>
 80060ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060cc:	9605      	str	r6, [sp, #20]
 80060ce:	1b5b      	subs	r3, r3, r5
 80060d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060d2:	d005      	beq.n	80060e0 <_dtoa_r+0x80c>
 80060d4:	0031      	movs	r1, r6
 80060d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80060d8:	9803      	ldr	r0, [sp, #12]
 80060da:	f000 fcaf 	bl	8006a3c <__pow5mult>
 80060de:	9005      	str	r0, [sp, #20]
 80060e0:	2101      	movs	r1, #1
 80060e2:	9803      	ldr	r0, [sp, #12]
 80060e4:	f000 fbe8 	bl	80068b8 <__i2b>
 80060e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060ea:	0006      	movs	r6, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d100      	bne.n	80060f2 <_dtoa_r+0x81e>
 80060f0:	e1bc      	b.n	800646c <_dtoa_r+0xb98>
 80060f2:	001a      	movs	r2, r3
 80060f4:	0001      	movs	r1, r0
 80060f6:	9803      	ldr	r0, [sp, #12]
 80060f8:	f000 fca0 	bl	8006a3c <__pow5mult>
 80060fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060fe:	0006      	movs	r6, r0
 8006100:	2500      	movs	r5, #0
 8006102:	2b01      	cmp	r3, #1
 8006104:	dc16      	bgt.n	8006134 <_dtoa_r+0x860>
 8006106:	2500      	movs	r5, #0
 8006108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800610a:	42ab      	cmp	r3, r5
 800610c:	d10e      	bne.n	800612c <_dtoa_r+0x858>
 800610e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	42ab      	cmp	r3, r5
 8006114:	d10a      	bne.n	800612c <_dtoa_r+0x858>
 8006116:	4b8d      	ldr	r3, [pc, #564]	@ (800634c <_dtoa_r+0xa78>)
 8006118:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800611a:	4213      	tst	r3, r2
 800611c:	d006      	beq.n	800612c <_dtoa_r+0x858>
 800611e:	9b06      	ldr	r3, [sp, #24]
 8006120:	3501      	adds	r5, #1
 8006122:	3301      	adds	r3, #1
 8006124:	9306      	str	r3, [sp, #24]
 8006126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006128:	3301      	adds	r3, #1
 800612a:	930d      	str	r3, [sp, #52]	@ 0x34
 800612c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800612e:	2001      	movs	r0, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <_dtoa_r+0x872>
 8006134:	6933      	ldr	r3, [r6, #16]
 8006136:	3303      	adds	r3, #3
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	18f3      	adds	r3, r6, r3
 800613c:	6858      	ldr	r0, [r3, #4]
 800613e:	f000 fb6b 	bl	8006818 <__hi0bits>
 8006142:	2320      	movs	r3, #32
 8006144:	1a18      	subs	r0, r3, r0
 8006146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006148:	1818      	adds	r0, r3, r0
 800614a:	0002      	movs	r2, r0
 800614c:	231f      	movs	r3, #31
 800614e:	401a      	ands	r2, r3
 8006150:	4218      	tst	r0, r3
 8006152:	d100      	bne.n	8006156 <_dtoa_r+0x882>
 8006154:	e081      	b.n	800625a <_dtoa_r+0x986>
 8006156:	3301      	adds	r3, #1
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	2b04      	cmp	r3, #4
 800615c:	dd79      	ble.n	8006252 <_dtoa_r+0x97e>
 800615e:	231c      	movs	r3, #28
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	9a06      	ldr	r2, [sp, #24]
 8006164:	18e4      	adds	r4, r4, r3
 8006166:	18d2      	adds	r2, r2, r3
 8006168:	9206      	str	r2, [sp, #24]
 800616a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800616c:	18d3      	adds	r3, r2, r3
 800616e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006170:	9b06      	ldr	r3, [sp, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	dd05      	ble.n	8006182 <_dtoa_r+0x8ae>
 8006176:	001a      	movs	r2, r3
 8006178:	9905      	ldr	r1, [sp, #20]
 800617a:	9803      	ldr	r0, [sp, #12]
 800617c:	f000 fcba 	bl	8006af4 <__lshift>
 8006180:	9005      	str	r0, [sp, #20]
 8006182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006184:	2b00      	cmp	r3, #0
 8006186:	dd05      	ble.n	8006194 <_dtoa_r+0x8c0>
 8006188:	0031      	movs	r1, r6
 800618a:	001a      	movs	r2, r3
 800618c:	9803      	ldr	r0, [sp, #12]
 800618e:	f000 fcb1 	bl	8006af4 <__lshift>
 8006192:	0006      	movs	r6, r0
 8006194:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006196:	2b00      	cmp	r3, #0
 8006198:	d061      	beq.n	800625e <_dtoa_r+0x98a>
 800619a:	0031      	movs	r1, r6
 800619c:	9805      	ldr	r0, [sp, #20]
 800619e:	f000 fd15 	bl	8006bcc <__mcmp>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	da5b      	bge.n	800625e <_dtoa_r+0x98a>
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	220a      	movs	r2, #10
 80061aa:	3b01      	subs	r3, #1
 80061ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80061ae:	9905      	ldr	r1, [sp, #20]
 80061b0:	2300      	movs	r3, #0
 80061b2:	9803      	ldr	r0, [sp, #12]
 80061b4:	f000 faec 	bl	8006790 <__multadd>
 80061b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061ba:	9005      	str	r0, [sp, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d100      	bne.n	80061c2 <_dtoa_r+0x8ee>
 80061c0:	e15b      	b.n	800647a <_dtoa_r+0xba6>
 80061c2:	2300      	movs	r3, #0
 80061c4:	0039      	movs	r1, r7
 80061c6:	220a      	movs	r2, #10
 80061c8:	9803      	ldr	r0, [sp, #12]
 80061ca:	f000 fae1 	bl	8006790 <__multadd>
 80061ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061d0:	0007      	movs	r7, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dc4d      	bgt.n	8006272 <_dtoa_r+0x99e>
 80061d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80061d8:	2b02      	cmp	r3, #2
 80061da:	dd46      	ble.n	800626a <_dtoa_r+0x996>
 80061dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d000      	beq.n	80061e4 <_dtoa_r+0x910>
 80061e2:	e5db      	b.n	8005d9c <_dtoa_r+0x4c8>
 80061e4:	0031      	movs	r1, r6
 80061e6:	2205      	movs	r2, #5
 80061e8:	9803      	ldr	r0, [sp, #12]
 80061ea:	f000 fad1 	bl	8006790 <__multadd>
 80061ee:	0006      	movs	r6, r0
 80061f0:	0001      	movs	r1, r0
 80061f2:	9805      	ldr	r0, [sp, #20]
 80061f4:	f000 fcea 	bl	8006bcc <__mcmp>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	dc00      	bgt.n	80061fe <_dtoa_r+0x92a>
 80061fc:	e5ce      	b.n	8005d9c <_dtoa_r+0x4c8>
 80061fe:	9b08      	ldr	r3, [sp, #32]
 8006200:	9a08      	ldr	r2, [sp, #32]
 8006202:	1c5c      	adds	r4, r3, #1
 8006204:	2331      	movs	r3, #49	@ 0x31
 8006206:	7013      	strb	r3, [r2, #0]
 8006208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800620a:	3301      	adds	r3, #1
 800620c:	930c      	str	r3, [sp, #48]	@ 0x30
 800620e:	e5c9      	b.n	8005da4 <_dtoa_r+0x4d0>
 8006210:	2336      	movs	r3, #54	@ 0x36
 8006212:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006214:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	9c06      	ldr	r4, [sp, #24]
 800621a:	e720      	b.n	800605e <_dtoa_r+0x78a>
 800621c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800621e:	1e5d      	subs	r5, r3, #1
 8006220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006222:	42ab      	cmp	r3, r5
 8006224:	db08      	blt.n	8006238 <_dtoa_r+0x964>
 8006226:	1b5d      	subs	r5, r3, r5
 8006228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	daf4      	bge.n	8006218 <_dtoa_r+0x944>
 800622e:	9b06      	ldr	r3, [sp, #24]
 8006230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006232:	1a9c      	subs	r4, r3, r2
 8006234:	2300      	movs	r3, #0
 8006236:	e712      	b.n	800605e <_dtoa_r+0x78a>
 8006238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800623a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800623c:	1aeb      	subs	r3, r5, r3
 800623e:	18d3      	adds	r3, r2, r3
 8006240:	9314      	str	r3, [sp, #80]	@ 0x50
 8006242:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006244:	9c06      	ldr	r4, [sp, #24]
 8006246:	2500      	movs	r5, #0
 8006248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800624a:	e708      	b.n	800605e <_dtoa_r+0x78a>
 800624c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800624e:	9905      	ldr	r1, [sp, #20]
 8006250:	e742      	b.n	80060d8 <_dtoa_r+0x804>
 8006252:	2b04      	cmp	r3, #4
 8006254:	d08c      	beq.n	8006170 <_dtoa_r+0x89c>
 8006256:	331c      	adds	r3, #28
 8006258:	e783      	b.n	8006162 <_dtoa_r+0x88e>
 800625a:	0013      	movs	r3, r2
 800625c:	e7fb      	b.n	8006256 <_dtoa_r+0x982>
 800625e:	9b04      	ldr	r3, [sp, #16]
 8006260:	930c      	str	r3, [sp, #48]	@ 0x30
 8006262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006264:	930e      	str	r3, [sp, #56]	@ 0x38
 8006266:	2b00      	cmp	r3, #0
 8006268:	ddb5      	ble.n	80061d6 <_dtoa_r+0x902>
 800626a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d100      	bne.n	8006272 <_dtoa_r+0x99e>
 8006270:	e107      	b.n	8006482 <_dtoa_r+0xbae>
 8006272:	2c00      	cmp	r4, #0
 8006274:	dd05      	ble.n	8006282 <_dtoa_r+0x9ae>
 8006276:	0039      	movs	r1, r7
 8006278:	0022      	movs	r2, r4
 800627a:	9803      	ldr	r0, [sp, #12]
 800627c:	f000 fc3a 	bl	8006af4 <__lshift>
 8006280:	0007      	movs	r7, r0
 8006282:	9704      	str	r7, [sp, #16]
 8006284:	2d00      	cmp	r5, #0
 8006286:	d020      	beq.n	80062ca <_dtoa_r+0x9f6>
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	9803      	ldr	r0, [sp, #12]
 800628c:	f000 fa18 	bl	80066c0 <_Balloc>
 8006290:	1e04      	subs	r4, r0, #0
 8006292:	d10c      	bne.n	80062ae <_dtoa_r+0x9da>
 8006294:	0022      	movs	r2, r4
 8006296:	4b2e      	ldr	r3, [pc, #184]	@ (8006350 <_dtoa_r+0xa7c>)
 8006298:	482e      	ldr	r0, [pc, #184]	@ (8006354 <_dtoa_r+0xa80>)
 800629a:	492f      	ldr	r1, [pc, #188]	@ (8006358 <_dtoa_r+0xa84>)
 800629c:	f7ff fb2f 	bl	80058fe <_dtoa_r+0x2a>
 80062a0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80062a2:	0037      	movs	r7, r6
 80062a4:	e7ab      	b.n	80061fe <_dtoa_r+0x92a>
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80062aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80062ac:	e7f9      	b.n	80062a2 <_dtoa_r+0x9ce>
 80062ae:	0039      	movs	r1, r7
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	310c      	adds	r1, #12
 80062b4:	3202      	adds	r2, #2
 80062b6:	0092      	lsls	r2, r2, #2
 80062b8:	300c      	adds	r0, #12
 80062ba:	f001 f835 	bl	8007328 <memcpy>
 80062be:	2201      	movs	r2, #1
 80062c0:	0021      	movs	r1, r4
 80062c2:	9803      	ldr	r0, [sp, #12]
 80062c4:	f000 fc16 	bl	8006af4 <__lshift>
 80062c8:	9004      	str	r0, [sp, #16]
 80062ca:	9b08      	ldr	r3, [sp, #32]
 80062cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062ce:	9306      	str	r3, [sp, #24]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	2201      	movs	r2, #1
 80062d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062da:	4013      	ands	r3, r2
 80062dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80062de:	0031      	movs	r1, r6
 80062e0:	9805      	ldr	r0, [sp, #20]
 80062e2:	f7ff fa71 	bl	80057c8 <quorem>
 80062e6:	0039      	movs	r1, r7
 80062e8:	0005      	movs	r5, r0
 80062ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80062ec:	9805      	ldr	r0, [sp, #20]
 80062ee:	f000 fc6d 	bl	8006bcc <__mcmp>
 80062f2:	9a04      	ldr	r2, [sp, #16]
 80062f4:	900d      	str	r0, [sp, #52]	@ 0x34
 80062f6:	0031      	movs	r1, r6
 80062f8:	9803      	ldr	r0, [sp, #12]
 80062fa:	f000 fc83 	bl	8006c04 <__mdiff>
 80062fe:	2201      	movs	r2, #1
 8006300:	68c3      	ldr	r3, [r0, #12]
 8006302:	0004      	movs	r4, r0
 8006304:	3530      	adds	r5, #48	@ 0x30
 8006306:	9209      	str	r2, [sp, #36]	@ 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <_dtoa_r+0xa42>
 800630c:	0001      	movs	r1, r0
 800630e:	9805      	ldr	r0, [sp, #20]
 8006310:	f000 fc5c 	bl	8006bcc <__mcmp>
 8006314:	9009      	str	r0, [sp, #36]	@ 0x24
 8006316:	0021      	movs	r1, r4
 8006318:	9803      	ldr	r0, [sp, #12]
 800631a:	f000 fa15 	bl	8006748 <_Bfree>
 800631e:	9b06      	ldr	r3, [sp, #24]
 8006320:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006322:	1c5c      	adds	r4, r3, #1
 8006324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006326:	4313      	orrs	r3, r2
 8006328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800632a:	4313      	orrs	r3, r2
 800632c:	d116      	bne.n	800635c <_dtoa_r+0xa88>
 800632e:	2d39      	cmp	r5, #57	@ 0x39
 8006330:	d02f      	beq.n	8006392 <_dtoa_r+0xabe>
 8006332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006334:	2b00      	cmp	r3, #0
 8006336:	dd01      	ble.n	800633c <_dtoa_r+0xa68>
 8006338:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800633a:	3531      	adds	r5, #49	@ 0x31
 800633c:	9b06      	ldr	r3, [sp, #24]
 800633e:	701d      	strb	r5, [r3, #0]
 8006340:	e532      	b.n	8005da8 <_dtoa_r+0x4d4>
 8006342:	46c0      	nop			@ (mov r8, r8)
 8006344:	40240000 	.word	0x40240000
 8006348:	00000433 	.word	0x00000433
 800634c:	7ff00000 	.word	0x7ff00000
 8006350:	08007688 	.word	0x08007688
 8006354:	08007630 	.word	0x08007630
 8006358:	000002ef 	.word	0x000002ef
 800635c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800635e:	2b00      	cmp	r3, #0
 8006360:	db04      	blt.n	800636c <_dtoa_r+0xa98>
 8006362:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006364:	4313      	orrs	r3, r2
 8006366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006368:	4313      	orrs	r3, r2
 800636a:	d11e      	bne.n	80063aa <_dtoa_r+0xad6>
 800636c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	dde4      	ble.n	800633c <_dtoa_r+0xa68>
 8006372:	9905      	ldr	r1, [sp, #20]
 8006374:	2201      	movs	r2, #1
 8006376:	9803      	ldr	r0, [sp, #12]
 8006378:	f000 fbbc 	bl	8006af4 <__lshift>
 800637c:	0031      	movs	r1, r6
 800637e:	9005      	str	r0, [sp, #20]
 8006380:	f000 fc24 	bl	8006bcc <__mcmp>
 8006384:	2800      	cmp	r0, #0
 8006386:	dc02      	bgt.n	800638e <_dtoa_r+0xaba>
 8006388:	d1d8      	bne.n	800633c <_dtoa_r+0xa68>
 800638a:	07eb      	lsls	r3, r5, #31
 800638c:	d5d6      	bpl.n	800633c <_dtoa_r+0xa68>
 800638e:	2d39      	cmp	r5, #57	@ 0x39
 8006390:	d1d2      	bne.n	8006338 <_dtoa_r+0xa64>
 8006392:	2339      	movs	r3, #57	@ 0x39
 8006394:	9a06      	ldr	r2, [sp, #24]
 8006396:	7013      	strb	r3, [r2, #0]
 8006398:	0023      	movs	r3, r4
 800639a:	001c      	movs	r4, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	2a39      	cmp	r2, #57	@ 0x39
 80063a2:	d050      	beq.n	8006446 <_dtoa_r+0xb72>
 80063a4:	3201      	adds	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e4fe      	b.n	8005da8 <_dtoa_r+0x4d4>
 80063aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd03      	ble.n	80063b8 <_dtoa_r+0xae4>
 80063b0:	2d39      	cmp	r5, #57	@ 0x39
 80063b2:	d0ee      	beq.n	8006392 <_dtoa_r+0xabe>
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7c1      	b.n	800633c <_dtoa_r+0xa68>
 80063b8:	9b06      	ldr	r3, [sp, #24]
 80063ba:	9a06      	ldr	r2, [sp, #24]
 80063bc:	701d      	strb	r5, [r3, #0]
 80063be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d02b      	beq.n	800641c <_dtoa_r+0xb48>
 80063c4:	2300      	movs	r3, #0
 80063c6:	220a      	movs	r2, #10
 80063c8:	9905      	ldr	r1, [sp, #20]
 80063ca:	9803      	ldr	r0, [sp, #12]
 80063cc:	f000 f9e0 	bl	8006790 <__multadd>
 80063d0:	9b04      	ldr	r3, [sp, #16]
 80063d2:	9005      	str	r0, [sp, #20]
 80063d4:	429f      	cmp	r7, r3
 80063d6:	d109      	bne.n	80063ec <_dtoa_r+0xb18>
 80063d8:	0039      	movs	r1, r7
 80063da:	2300      	movs	r3, #0
 80063dc:	220a      	movs	r2, #10
 80063de:	9803      	ldr	r0, [sp, #12]
 80063e0:	f000 f9d6 	bl	8006790 <__multadd>
 80063e4:	0007      	movs	r7, r0
 80063e6:	9004      	str	r0, [sp, #16]
 80063e8:	9406      	str	r4, [sp, #24]
 80063ea:	e778      	b.n	80062de <_dtoa_r+0xa0a>
 80063ec:	0039      	movs	r1, r7
 80063ee:	2300      	movs	r3, #0
 80063f0:	220a      	movs	r2, #10
 80063f2:	9803      	ldr	r0, [sp, #12]
 80063f4:	f000 f9cc 	bl	8006790 <__multadd>
 80063f8:	2300      	movs	r3, #0
 80063fa:	0007      	movs	r7, r0
 80063fc:	220a      	movs	r2, #10
 80063fe:	9904      	ldr	r1, [sp, #16]
 8006400:	9803      	ldr	r0, [sp, #12]
 8006402:	f000 f9c5 	bl	8006790 <__multadd>
 8006406:	9004      	str	r0, [sp, #16]
 8006408:	e7ee      	b.n	80063e8 <_dtoa_r+0xb14>
 800640a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800640c:	2401      	movs	r4, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	dd00      	ble.n	8006414 <_dtoa_r+0xb40>
 8006412:	001c      	movs	r4, r3
 8006414:	9704      	str	r7, [sp, #16]
 8006416:	2700      	movs	r7, #0
 8006418:	9b08      	ldr	r3, [sp, #32]
 800641a:	191c      	adds	r4, r3, r4
 800641c:	9905      	ldr	r1, [sp, #20]
 800641e:	2201      	movs	r2, #1
 8006420:	9803      	ldr	r0, [sp, #12]
 8006422:	f000 fb67 	bl	8006af4 <__lshift>
 8006426:	0031      	movs	r1, r6
 8006428:	9005      	str	r0, [sp, #20]
 800642a:	f000 fbcf 	bl	8006bcc <__mcmp>
 800642e:	2800      	cmp	r0, #0
 8006430:	dcb2      	bgt.n	8006398 <_dtoa_r+0xac4>
 8006432:	d101      	bne.n	8006438 <_dtoa_r+0xb64>
 8006434:	07ed      	lsls	r5, r5, #31
 8006436:	d4af      	bmi.n	8006398 <_dtoa_r+0xac4>
 8006438:	0023      	movs	r3, r4
 800643a:	001c      	movs	r4, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	2a30      	cmp	r2, #48	@ 0x30
 8006442:	d0fa      	beq.n	800643a <_dtoa_r+0xb66>
 8006444:	e4b0      	b.n	8005da8 <_dtoa_r+0x4d4>
 8006446:	9a08      	ldr	r2, [sp, #32]
 8006448:	429a      	cmp	r2, r3
 800644a:	d1a6      	bne.n	800639a <_dtoa_r+0xac6>
 800644c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800644e:	3301      	adds	r3, #1
 8006450:	930c      	str	r3, [sp, #48]	@ 0x30
 8006452:	2331      	movs	r3, #49	@ 0x31
 8006454:	7013      	strb	r3, [r2, #0]
 8006456:	e4a7      	b.n	8005da8 <_dtoa_r+0x4d4>
 8006458:	4b14      	ldr	r3, [pc, #80]	@ (80064ac <_dtoa_r+0xbd8>)
 800645a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800645c:	9308      	str	r3, [sp, #32]
 800645e:	4b14      	ldr	r3, [pc, #80]	@ (80064b0 <_dtoa_r+0xbdc>)
 8006460:	2a00      	cmp	r2, #0
 8006462:	d001      	beq.n	8006468 <_dtoa_r+0xb94>
 8006464:	f7ff fa7e 	bl	8005964 <_dtoa_r+0x90>
 8006468:	f7ff fa7e 	bl	8005968 <_dtoa_r+0x94>
 800646c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800646e:	2b01      	cmp	r3, #1
 8006470:	dc00      	bgt.n	8006474 <_dtoa_r+0xba0>
 8006472:	e648      	b.n	8006106 <_dtoa_r+0x832>
 8006474:	2001      	movs	r0, #1
 8006476:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006478:	e665      	b.n	8006146 <_dtoa_r+0x872>
 800647a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800647c:	2b00      	cmp	r3, #0
 800647e:	dc00      	bgt.n	8006482 <_dtoa_r+0xbae>
 8006480:	e6a9      	b.n	80061d6 <_dtoa_r+0x902>
 8006482:	2400      	movs	r4, #0
 8006484:	0031      	movs	r1, r6
 8006486:	9805      	ldr	r0, [sp, #20]
 8006488:	f7ff f99e 	bl	80057c8 <quorem>
 800648c:	9b08      	ldr	r3, [sp, #32]
 800648e:	3030      	adds	r0, #48	@ 0x30
 8006490:	5518      	strb	r0, [r3, r4]
 8006492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006494:	3401      	adds	r4, #1
 8006496:	0005      	movs	r5, r0
 8006498:	42a3      	cmp	r3, r4
 800649a:	ddb6      	ble.n	800640a <_dtoa_r+0xb36>
 800649c:	2300      	movs	r3, #0
 800649e:	220a      	movs	r2, #10
 80064a0:	9905      	ldr	r1, [sp, #20]
 80064a2:	9803      	ldr	r0, [sp, #12]
 80064a4:	f000 f974 	bl	8006790 <__multadd>
 80064a8:	9005      	str	r0, [sp, #20]
 80064aa:	e7eb      	b.n	8006484 <_dtoa_r+0xbb0>
 80064ac:	0800760c 	.word	0x0800760c
 80064b0:	08007614 	.word	0x08007614

080064b4 <_free_r>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	0005      	movs	r5, r0
 80064b8:	1e0c      	subs	r4, r1, #0
 80064ba:	d010      	beq.n	80064de <_free_r+0x2a>
 80064bc:	3c04      	subs	r4, #4
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da00      	bge.n	80064c6 <_free_r+0x12>
 80064c4:	18e4      	adds	r4, r4, r3
 80064c6:	0028      	movs	r0, r5
 80064c8:	f000 f8ea 	bl	80066a0 <__malloc_lock>
 80064cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006544 <_free_r+0x90>)
 80064ce:	6813      	ldr	r3, [r2, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <_free_r+0x2c>
 80064d4:	6063      	str	r3, [r4, #4]
 80064d6:	6014      	str	r4, [r2, #0]
 80064d8:	0028      	movs	r0, r5
 80064da:	f000 f8e9 	bl	80066b0 <__malloc_unlock>
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d908      	bls.n	80064f6 <_free_r+0x42>
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	1821      	adds	r1, r4, r0
 80064e8:	428b      	cmp	r3, r1
 80064ea:	d1f3      	bne.n	80064d4 <_free_r+0x20>
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	1809      	adds	r1, r1, r0
 80064f2:	6021      	str	r1, [r4, #0]
 80064f4:	e7ee      	b.n	80064d4 <_free_r+0x20>
 80064f6:	001a      	movs	r2, r3
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <_free_r+0x4e>
 80064fe:	42a3      	cmp	r3, r4
 8006500:	d9f9      	bls.n	80064f6 <_free_r+0x42>
 8006502:	6811      	ldr	r1, [r2, #0]
 8006504:	1850      	adds	r0, r2, r1
 8006506:	42a0      	cmp	r0, r4
 8006508:	d10b      	bne.n	8006522 <_free_r+0x6e>
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	1809      	adds	r1, r1, r0
 800650e:	1850      	adds	r0, r2, r1
 8006510:	6011      	str	r1, [r2, #0]
 8006512:	4283      	cmp	r3, r0
 8006514:	d1e0      	bne.n	80064d8 <_free_r+0x24>
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	1841      	adds	r1, r0, r1
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	6053      	str	r3, [r2, #4]
 8006520:	e7da      	b.n	80064d8 <_free_r+0x24>
 8006522:	42a0      	cmp	r0, r4
 8006524:	d902      	bls.n	800652c <_free_r+0x78>
 8006526:	230c      	movs	r3, #12
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	e7d5      	b.n	80064d8 <_free_r+0x24>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	1821      	adds	r1, r4, r0
 8006530:	428b      	cmp	r3, r1
 8006532:	d103      	bne.n	800653c <_free_r+0x88>
 8006534:	6819      	ldr	r1, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	1809      	adds	r1, r1, r0
 800653a:	6021      	str	r1, [r4, #0]
 800653c:	6063      	str	r3, [r4, #4]
 800653e:	6054      	str	r4, [r2, #4]
 8006540:	e7ca      	b.n	80064d8 <_free_r+0x24>
 8006542:	46c0      	nop			@ (mov r8, r8)
 8006544:	20000464 	.word	0x20000464

08006548 <malloc>:
 8006548:	b510      	push	{r4, lr}
 800654a:	4b03      	ldr	r3, [pc, #12]	@ (8006558 <malloc+0x10>)
 800654c:	0001      	movs	r1, r0
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	f000 f826 	bl	80065a0 <_malloc_r>
 8006554:	bd10      	pop	{r4, pc}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	20000018 	.word	0x20000018

0800655c <sbrk_aligned>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4e0f      	ldr	r6, [pc, #60]	@ (800659c <sbrk_aligned+0x40>)
 8006560:	000d      	movs	r5, r1
 8006562:	6831      	ldr	r1, [r6, #0]
 8006564:	0004      	movs	r4, r0
 8006566:	2900      	cmp	r1, #0
 8006568:	d102      	bne.n	8006570 <sbrk_aligned+0x14>
 800656a:	f000 fecb 	bl	8007304 <_sbrk_r>
 800656e:	6030      	str	r0, [r6, #0]
 8006570:	0029      	movs	r1, r5
 8006572:	0020      	movs	r0, r4
 8006574:	f000 fec6 	bl	8007304 <_sbrk_r>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d103      	bne.n	8006584 <sbrk_aligned+0x28>
 800657c:	2501      	movs	r5, #1
 800657e:	426d      	negs	r5, r5
 8006580:	0028      	movs	r0, r5
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	2303      	movs	r3, #3
 8006586:	1cc5      	adds	r5, r0, #3
 8006588:	439d      	bics	r5, r3
 800658a:	42a8      	cmp	r0, r5
 800658c:	d0f8      	beq.n	8006580 <sbrk_aligned+0x24>
 800658e:	1a29      	subs	r1, r5, r0
 8006590:	0020      	movs	r0, r4
 8006592:	f000 feb7 	bl	8007304 <_sbrk_r>
 8006596:	3001      	adds	r0, #1
 8006598:	d1f2      	bne.n	8006580 <sbrk_aligned+0x24>
 800659a:	e7ef      	b.n	800657c <sbrk_aligned+0x20>
 800659c:	20000460 	.word	0x20000460

080065a0 <_malloc_r>:
 80065a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065a2:	2203      	movs	r2, #3
 80065a4:	1ccb      	adds	r3, r1, #3
 80065a6:	4393      	bics	r3, r2
 80065a8:	3308      	adds	r3, #8
 80065aa:	0005      	movs	r5, r0
 80065ac:	001f      	movs	r7, r3
 80065ae:	2b0c      	cmp	r3, #12
 80065b0:	d234      	bcs.n	800661c <_malloc_r+0x7c>
 80065b2:	270c      	movs	r7, #12
 80065b4:	42b9      	cmp	r1, r7
 80065b6:	d833      	bhi.n	8006620 <_malloc_r+0x80>
 80065b8:	0028      	movs	r0, r5
 80065ba:	f000 f871 	bl	80066a0 <__malloc_lock>
 80065be:	4e37      	ldr	r6, [pc, #220]	@ (800669c <_malloc_r+0xfc>)
 80065c0:	6833      	ldr	r3, [r6, #0]
 80065c2:	001c      	movs	r4, r3
 80065c4:	2c00      	cmp	r4, #0
 80065c6:	d12f      	bne.n	8006628 <_malloc_r+0x88>
 80065c8:	0039      	movs	r1, r7
 80065ca:	0028      	movs	r0, r5
 80065cc:	f7ff ffc6 	bl	800655c <sbrk_aligned>
 80065d0:	0004      	movs	r4, r0
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d15f      	bne.n	8006696 <_malloc_r+0xf6>
 80065d6:	6834      	ldr	r4, [r6, #0]
 80065d8:	9400      	str	r4, [sp, #0]
 80065da:	9b00      	ldr	r3, [sp, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d14a      	bne.n	8006676 <_malloc_r+0xd6>
 80065e0:	2c00      	cmp	r4, #0
 80065e2:	d052      	beq.n	800668a <_malloc_r+0xea>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	0028      	movs	r0, r5
 80065e8:	18e3      	adds	r3, r4, r3
 80065ea:	9900      	ldr	r1, [sp, #0]
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	f000 fe89 	bl	8007304 <_sbrk_r>
 80065f2:	9b01      	ldr	r3, [sp, #4]
 80065f4:	4283      	cmp	r3, r0
 80065f6:	d148      	bne.n	800668a <_malloc_r+0xea>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	0028      	movs	r0, r5
 80065fc:	1aff      	subs	r7, r7, r3
 80065fe:	0039      	movs	r1, r7
 8006600:	f7ff ffac 	bl	800655c <sbrk_aligned>
 8006604:	3001      	adds	r0, #1
 8006606:	d040      	beq.n	800668a <_malloc_r+0xea>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	19db      	adds	r3, r3, r7
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	6833      	ldr	r3, [r6, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	2a00      	cmp	r2, #0
 8006614:	d133      	bne.n	800667e <_malloc_r+0xde>
 8006616:	9b00      	ldr	r3, [sp, #0]
 8006618:	6033      	str	r3, [r6, #0]
 800661a:	e019      	b.n	8006650 <_malloc_r+0xb0>
 800661c:	2b00      	cmp	r3, #0
 800661e:	dac9      	bge.n	80065b4 <_malloc_r+0x14>
 8006620:	230c      	movs	r3, #12
 8006622:	602b      	str	r3, [r5, #0]
 8006624:	2000      	movs	r0, #0
 8006626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006628:	6821      	ldr	r1, [r4, #0]
 800662a:	1bc9      	subs	r1, r1, r7
 800662c:	d420      	bmi.n	8006670 <_malloc_r+0xd0>
 800662e:	290b      	cmp	r1, #11
 8006630:	d90a      	bls.n	8006648 <_malloc_r+0xa8>
 8006632:	19e2      	adds	r2, r4, r7
 8006634:	6027      	str	r7, [r4, #0]
 8006636:	42a3      	cmp	r3, r4
 8006638:	d104      	bne.n	8006644 <_malloc_r+0xa4>
 800663a:	6032      	str	r2, [r6, #0]
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	6011      	str	r1, [r2, #0]
 8006640:	6053      	str	r3, [r2, #4]
 8006642:	e005      	b.n	8006650 <_malloc_r+0xb0>
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	e7f9      	b.n	800663c <_malloc_r+0x9c>
 8006648:	6862      	ldr	r2, [r4, #4]
 800664a:	42a3      	cmp	r3, r4
 800664c:	d10e      	bne.n	800666c <_malloc_r+0xcc>
 800664e:	6032      	str	r2, [r6, #0]
 8006650:	0028      	movs	r0, r5
 8006652:	f000 f82d 	bl	80066b0 <__malloc_unlock>
 8006656:	0020      	movs	r0, r4
 8006658:	2207      	movs	r2, #7
 800665a:	300b      	adds	r0, #11
 800665c:	1d23      	adds	r3, r4, #4
 800665e:	4390      	bics	r0, r2
 8006660:	1ac2      	subs	r2, r0, r3
 8006662:	4298      	cmp	r0, r3
 8006664:	d0df      	beq.n	8006626 <_malloc_r+0x86>
 8006666:	1a1b      	subs	r3, r3, r0
 8006668:	50a3      	str	r3, [r4, r2]
 800666a:	e7dc      	b.n	8006626 <_malloc_r+0x86>
 800666c:	605a      	str	r2, [r3, #4]
 800666e:	e7ef      	b.n	8006650 <_malloc_r+0xb0>
 8006670:	0023      	movs	r3, r4
 8006672:	6864      	ldr	r4, [r4, #4]
 8006674:	e7a6      	b.n	80065c4 <_malloc_r+0x24>
 8006676:	9c00      	ldr	r4, [sp, #0]
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	e7ad      	b.n	80065da <_malloc_r+0x3a>
 800667e:	001a      	movs	r2, r3
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	42a3      	cmp	r3, r4
 8006684:	d1fb      	bne.n	800667e <_malloc_r+0xde>
 8006686:	2300      	movs	r3, #0
 8006688:	e7da      	b.n	8006640 <_malloc_r+0xa0>
 800668a:	230c      	movs	r3, #12
 800668c:	0028      	movs	r0, r5
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	f000 f80e 	bl	80066b0 <__malloc_unlock>
 8006694:	e7c6      	b.n	8006624 <_malloc_r+0x84>
 8006696:	6007      	str	r7, [r0, #0]
 8006698:	e7da      	b.n	8006650 <_malloc_r+0xb0>
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	20000464 	.word	0x20000464

080066a0 <__malloc_lock>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	4802      	ldr	r0, [pc, #8]	@ (80066ac <__malloc_lock+0xc>)
 80066a4:	f7ff f883 	bl	80057ae <__retarget_lock_acquire_recursive>
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	2000045c 	.word	0x2000045c

080066b0 <__malloc_unlock>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4802      	ldr	r0, [pc, #8]	@ (80066bc <__malloc_unlock+0xc>)
 80066b4:	f7ff f87c 	bl	80057b0 <__retarget_lock_release_recursive>
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	46c0      	nop			@ (mov r8, r8)
 80066bc:	2000045c 	.word	0x2000045c

080066c0 <_Balloc>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	69c5      	ldr	r5, [r0, #28]
 80066c4:	0006      	movs	r6, r0
 80066c6:	000c      	movs	r4, r1
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	d10e      	bne.n	80066ea <_Balloc+0x2a>
 80066cc:	2010      	movs	r0, #16
 80066ce:	f7ff ff3b 	bl	8006548 <malloc>
 80066d2:	1e02      	subs	r2, r0, #0
 80066d4:	61f0      	str	r0, [r6, #28]
 80066d6:	d104      	bne.n	80066e2 <_Balloc+0x22>
 80066d8:	216b      	movs	r1, #107	@ 0x6b
 80066da:	4b19      	ldr	r3, [pc, #100]	@ (8006740 <_Balloc+0x80>)
 80066dc:	4819      	ldr	r0, [pc, #100]	@ (8006744 <_Balloc+0x84>)
 80066de:	f000 fe2d 	bl	800733c <__assert_func>
 80066e2:	6045      	str	r5, [r0, #4]
 80066e4:	6085      	str	r5, [r0, #8]
 80066e6:	6005      	str	r5, [r0, #0]
 80066e8:	60c5      	str	r5, [r0, #12]
 80066ea:	69f5      	ldr	r5, [r6, #28]
 80066ec:	68eb      	ldr	r3, [r5, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d013      	beq.n	800671a <_Balloc+0x5a>
 80066f2:	69f3      	ldr	r3, [r6, #28]
 80066f4:	00a2      	lsls	r2, r4, #2
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	189b      	adds	r3, r3, r2
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d118      	bne.n	8006732 <_Balloc+0x72>
 8006700:	2101      	movs	r1, #1
 8006702:	000d      	movs	r5, r1
 8006704:	40a5      	lsls	r5, r4
 8006706:	1d6a      	adds	r2, r5, #5
 8006708:	0030      	movs	r0, r6
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	f000 fe34 	bl	8007378 <_calloc_r>
 8006710:	2800      	cmp	r0, #0
 8006712:	d00c      	beq.n	800672e <_Balloc+0x6e>
 8006714:	6044      	str	r4, [r0, #4]
 8006716:	6085      	str	r5, [r0, #8]
 8006718:	e00d      	b.n	8006736 <_Balloc+0x76>
 800671a:	2221      	movs	r2, #33	@ 0x21
 800671c:	2104      	movs	r1, #4
 800671e:	0030      	movs	r0, r6
 8006720:	f000 fe2a 	bl	8007378 <_calloc_r>
 8006724:	69f3      	ldr	r3, [r6, #28]
 8006726:	60e8      	str	r0, [r5, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e1      	bne.n	80066f2 <_Balloc+0x32>
 800672e:	2000      	movs	r0, #0
 8006730:	bd70      	pop	{r4, r5, r6, pc}
 8006732:	6802      	ldr	r2, [r0, #0]
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	6103      	str	r3, [r0, #16]
 800673a:	60c3      	str	r3, [r0, #12]
 800673c:	e7f8      	b.n	8006730 <_Balloc+0x70>
 800673e:	46c0      	nop			@ (mov r8, r8)
 8006740:	08007619 	.word	0x08007619
 8006744:	08007699 	.word	0x08007699

08006748 <_Bfree>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	69c6      	ldr	r6, [r0, #28]
 800674c:	0005      	movs	r5, r0
 800674e:	000c      	movs	r4, r1
 8006750:	2e00      	cmp	r6, #0
 8006752:	d10e      	bne.n	8006772 <_Bfree+0x2a>
 8006754:	2010      	movs	r0, #16
 8006756:	f7ff fef7 	bl	8006548 <malloc>
 800675a:	1e02      	subs	r2, r0, #0
 800675c:	61e8      	str	r0, [r5, #28]
 800675e:	d104      	bne.n	800676a <_Bfree+0x22>
 8006760:	218f      	movs	r1, #143	@ 0x8f
 8006762:	4b09      	ldr	r3, [pc, #36]	@ (8006788 <_Bfree+0x40>)
 8006764:	4809      	ldr	r0, [pc, #36]	@ (800678c <_Bfree+0x44>)
 8006766:	f000 fde9 	bl	800733c <__assert_func>
 800676a:	6046      	str	r6, [r0, #4]
 800676c:	6086      	str	r6, [r0, #8]
 800676e:	6006      	str	r6, [r0, #0]
 8006770:	60c6      	str	r6, [r0, #12]
 8006772:	2c00      	cmp	r4, #0
 8006774:	d007      	beq.n	8006786 <_Bfree+0x3e>
 8006776:	69eb      	ldr	r3, [r5, #28]
 8006778:	6862      	ldr	r2, [r4, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	0092      	lsls	r2, r2, #2
 800677e:	189b      	adds	r3, r3, r2
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	601c      	str	r4, [r3, #0]
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	08007619 	.word	0x08007619
 800678c:	08007699 	.word	0x08007699

08006790 <__multadd>:
 8006790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006792:	000f      	movs	r7, r1
 8006794:	9001      	str	r0, [sp, #4]
 8006796:	000c      	movs	r4, r1
 8006798:	001e      	movs	r6, r3
 800679a:	2000      	movs	r0, #0
 800679c:	690d      	ldr	r5, [r1, #16]
 800679e:	3714      	adds	r7, #20
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	3001      	adds	r0, #1
 80067a4:	b299      	uxth	r1, r3
 80067a6:	4351      	muls	r1, r2
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	4353      	muls	r3, r2
 80067ac:	1989      	adds	r1, r1, r6
 80067ae:	0c0e      	lsrs	r6, r1, #16
 80067b0:	199b      	adds	r3, r3, r6
 80067b2:	0c1e      	lsrs	r6, r3, #16
 80067b4:	b289      	uxth	r1, r1
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	185b      	adds	r3, r3, r1
 80067ba:	c708      	stmia	r7!, {r3}
 80067bc:	4285      	cmp	r5, r0
 80067be:	dcef      	bgt.n	80067a0 <__multadd+0x10>
 80067c0:	2e00      	cmp	r6, #0
 80067c2:	d022      	beq.n	800680a <__multadd+0x7a>
 80067c4:	68a3      	ldr	r3, [r4, #8]
 80067c6:	42ab      	cmp	r3, r5
 80067c8:	dc19      	bgt.n	80067fe <__multadd+0x6e>
 80067ca:	6861      	ldr	r1, [r4, #4]
 80067cc:	9801      	ldr	r0, [sp, #4]
 80067ce:	3101      	adds	r1, #1
 80067d0:	f7ff ff76 	bl	80066c0 <_Balloc>
 80067d4:	1e07      	subs	r7, r0, #0
 80067d6:	d105      	bne.n	80067e4 <__multadd+0x54>
 80067d8:	003a      	movs	r2, r7
 80067da:	21ba      	movs	r1, #186	@ 0xba
 80067dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006810 <__multadd+0x80>)
 80067de:	480d      	ldr	r0, [pc, #52]	@ (8006814 <__multadd+0x84>)
 80067e0:	f000 fdac 	bl	800733c <__assert_func>
 80067e4:	0021      	movs	r1, r4
 80067e6:	6922      	ldr	r2, [r4, #16]
 80067e8:	310c      	adds	r1, #12
 80067ea:	3202      	adds	r2, #2
 80067ec:	0092      	lsls	r2, r2, #2
 80067ee:	300c      	adds	r0, #12
 80067f0:	f000 fd9a 	bl	8007328 <memcpy>
 80067f4:	0021      	movs	r1, r4
 80067f6:	9801      	ldr	r0, [sp, #4]
 80067f8:	f7ff ffa6 	bl	8006748 <_Bfree>
 80067fc:	003c      	movs	r4, r7
 80067fe:	1d2b      	adds	r3, r5, #4
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	18e3      	adds	r3, r4, r3
 8006804:	3501      	adds	r5, #1
 8006806:	605e      	str	r6, [r3, #4]
 8006808:	6125      	str	r5, [r4, #16]
 800680a:	0020      	movs	r0, r4
 800680c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	08007688 	.word	0x08007688
 8006814:	08007699 	.word	0x08007699

08006818 <__hi0bits>:
 8006818:	2280      	movs	r2, #128	@ 0x80
 800681a:	0003      	movs	r3, r0
 800681c:	0252      	lsls	r2, r2, #9
 800681e:	2000      	movs	r0, #0
 8006820:	4293      	cmp	r3, r2
 8006822:	d201      	bcs.n	8006828 <__hi0bits+0x10>
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	3010      	adds	r0, #16
 8006828:	2280      	movs	r2, #128	@ 0x80
 800682a:	0452      	lsls	r2, r2, #17
 800682c:	4293      	cmp	r3, r2
 800682e:	d201      	bcs.n	8006834 <__hi0bits+0x1c>
 8006830:	3008      	adds	r0, #8
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	2280      	movs	r2, #128	@ 0x80
 8006836:	0552      	lsls	r2, r2, #21
 8006838:	4293      	cmp	r3, r2
 800683a:	d201      	bcs.n	8006840 <__hi0bits+0x28>
 800683c:	3004      	adds	r0, #4
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	2280      	movs	r2, #128	@ 0x80
 8006842:	05d2      	lsls	r2, r2, #23
 8006844:	4293      	cmp	r3, r2
 8006846:	d201      	bcs.n	800684c <__hi0bits+0x34>
 8006848:	3002      	adds	r0, #2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	db03      	blt.n	8006858 <__hi0bits+0x40>
 8006850:	3001      	adds	r0, #1
 8006852:	4213      	tst	r3, r2
 8006854:	d100      	bne.n	8006858 <__hi0bits+0x40>
 8006856:	2020      	movs	r0, #32
 8006858:	4770      	bx	lr

0800685a <__lo0bits>:
 800685a:	6803      	ldr	r3, [r0, #0]
 800685c:	0001      	movs	r1, r0
 800685e:	2207      	movs	r2, #7
 8006860:	0018      	movs	r0, r3
 8006862:	4010      	ands	r0, r2
 8006864:	4213      	tst	r3, r2
 8006866:	d00d      	beq.n	8006884 <__lo0bits+0x2a>
 8006868:	3a06      	subs	r2, #6
 800686a:	2000      	movs	r0, #0
 800686c:	4213      	tst	r3, r2
 800686e:	d105      	bne.n	800687c <__lo0bits+0x22>
 8006870:	3002      	adds	r0, #2
 8006872:	4203      	tst	r3, r0
 8006874:	d003      	beq.n	800687e <__lo0bits+0x24>
 8006876:	40d3      	lsrs	r3, r2
 8006878:	0010      	movs	r0, r2
 800687a:	600b      	str	r3, [r1, #0]
 800687c:	4770      	bx	lr
 800687e:	089b      	lsrs	r3, r3, #2
 8006880:	600b      	str	r3, [r1, #0]
 8006882:	e7fb      	b.n	800687c <__lo0bits+0x22>
 8006884:	b29a      	uxth	r2, r3
 8006886:	2a00      	cmp	r2, #0
 8006888:	d101      	bne.n	800688e <__lo0bits+0x34>
 800688a:	2010      	movs	r0, #16
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	b2da      	uxtb	r2, r3
 8006890:	2a00      	cmp	r2, #0
 8006892:	d101      	bne.n	8006898 <__lo0bits+0x3e>
 8006894:	3008      	adds	r0, #8
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	071a      	lsls	r2, r3, #28
 800689a:	d101      	bne.n	80068a0 <__lo0bits+0x46>
 800689c:	3004      	adds	r0, #4
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	079a      	lsls	r2, r3, #30
 80068a2:	d101      	bne.n	80068a8 <__lo0bits+0x4e>
 80068a4:	3002      	adds	r0, #2
 80068a6:	089b      	lsrs	r3, r3, #2
 80068a8:	07da      	lsls	r2, r3, #31
 80068aa:	d4e9      	bmi.n	8006880 <__lo0bits+0x26>
 80068ac:	3001      	adds	r0, #1
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	d1e6      	bne.n	8006880 <__lo0bits+0x26>
 80068b2:	2020      	movs	r0, #32
 80068b4:	e7e2      	b.n	800687c <__lo0bits+0x22>
	...

080068b8 <__i2b>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	000c      	movs	r4, r1
 80068bc:	2101      	movs	r1, #1
 80068be:	f7ff feff 	bl	80066c0 <_Balloc>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d107      	bne.n	80068d6 <__i2b+0x1e>
 80068c6:	2146      	movs	r1, #70	@ 0x46
 80068c8:	4c05      	ldr	r4, [pc, #20]	@ (80068e0 <__i2b+0x28>)
 80068ca:	0002      	movs	r2, r0
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <__i2b+0x2c>)
 80068ce:	0020      	movs	r0, r4
 80068d0:	31ff      	adds	r1, #255	@ 0xff
 80068d2:	f000 fd33 	bl	800733c <__assert_func>
 80068d6:	2301      	movs	r3, #1
 80068d8:	6144      	str	r4, [r0, #20]
 80068da:	6103      	str	r3, [r0, #16]
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	08007699 	.word	0x08007699
 80068e4:	08007688 	.word	0x08007688

080068e8 <__multiply>:
 80068e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ea:	0014      	movs	r4, r2
 80068ec:	690a      	ldr	r2, [r1, #16]
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	000d      	movs	r5, r1
 80068f2:	b089      	sub	sp, #36	@ 0x24
 80068f4:	429a      	cmp	r2, r3
 80068f6:	db02      	blt.n	80068fe <__multiply+0x16>
 80068f8:	0023      	movs	r3, r4
 80068fa:	000c      	movs	r4, r1
 80068fc:	001d      	movs	r5, r3
 80068fe:	6927      	ldr	r7, [r4, #16]
 8006900:	692e      	ldr	r6, [r5, #16]
 8006902:	6861      	ldr	r1, [r4, #4]
 8006904:	19bb      	adds	r3, r7, r6
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	68a3      	ldr	r3, [r4, #8]
 800690a:	19ba      	adds	r2, r7, r6
 800690c:	4293      	cmp	r3, r2
 800690e:	da00      	bge.n	8006912 <__multiply+0x2a>
 8006910:	3101      	adds	r1, #1
 8006912:	f7ff fed5 	bl	80066c0 <_Balloc>
 8006916:	4684      	mov	ip, r0
 8006918:	2800      	cmp	r0, #0
 800691a:	d106      	bne.n	800692a <__multiply+0x42>
 800691c:	21b1      	movs	r1, #177	@ 0xb1
 800691e:	4662      	mov	r2, ip
 8006920:	4b44      	ldr	r3, [pc, #272]	@ (8006a34 <__multiply+0x14c>)
 8006922:	4845      	ldr	r0, [pc, #276]	@ (8006a38 <__multiply+0x150>)
 8006924:	0049      	lsls	r1, r1, #1
 8006926:	f000 fd09 	bl	800733c <__assert_func>
 800692a:	0002      	movs	r2, r0
 800692c:	19bb      	adds	r3, r7, r6
 800692e:	3214      	adds	r2, #20
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	18d3      	adds	r3, r2, r3
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	2100      	movs	r1, #0
 8006938:	0013      	movs	r3, r2
 800693a:	9801      	ldr	r0, [sp, #4]
 800693c:	4283      	cmp	r3, r0
 800693e:	d328      	bcc.n	8006992 <__multiply+0xaa>
 8006940:	0023      	movs	r3, r4
 8006942:	00bf      	lsls	r7, r7, #2
 8006944:	3314      	adds	r3, #20
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	3514      	adds	r5, #20
 800694a:	19db      	adds	r3, r3, r7
 800694c:	00b6      	lsls	r6, r6, #2
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	19ab      	adds	r3, r5, r6
 8006952:	9307      	str	r3, [sp, #28]
 8006954:	2304      	movs	r3, #4
 8006956:	9305      	str	r3, [sp, #20]
 8006958:	0023      	movs	r3, r4
 800695a:	9902      	ldr	r1, [sp, #8]
 800695c:	3315      	adds	r3, #21
 800695e:	4299      	cmp	r1, r3
 8006960:	d305      	bcc.n	800696e <__multiply+0x86>
 8006962:	1b0c      	subs	r4, r1, r4
 8006964:	3c15      	subs	r4, #21
 8006966:	08a4      	lsrs	r4, r4, #2
 8006968:	3401      	adds	r4, #1
 800696a:	00a3      	lsls	r3, r4, #2
 800696c:	9305      	str	r3, [sp, #20]
 800696e:	9b07      	ldr	r3, [sp, #28]
 8006970:	429d      	cmp	r5, r3
 8006972:	d310      	bcc.n	8006996 <__multiply+0xae>
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dd05      	ble.n	8006986 <__multiply+0x9e>
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	3b04      	subs	r3, #4
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d052      	beq.n	8006a2c <__multiply+0x144>
 8006986:	4663      	mov	r3, ip
 8006988:	4660      	mov	r0, ip
 800698a:	9a00      	ldr	r2, [sp, #0]
 800698c:	611a      	str	r2, [r3, #16]
 800698e:	b009      	add	sp, #36	@ 0x24
 8006990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006992:	c302      	stmia	r3!, {r1}
 8006994:	e7d1      	b.n	800693a <__multiply+0x52>
 8006996:	682c      	ldr	r4, [r5, #0]
 8006998:	b2a4      	uxth	r4, r4
 800699a:	2c00      	cmp	r4, #0
 800699c:	d01f      	beq.n	80069de <__multiply+0xf6>
 800699e:	2300      	movs	r3, #0
 80069a0:	0017      	movs	r7, r2
 80069a2:	9e04      	ldr	r6, [sp, #16]
 80069a4:	9303      	str	r3, [sp, #12]
 80069a6:	ce08      	ldmia	r6!, {r3}
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	9306      	str	r3, [sp, #24]
 80069ac:	466b      	mov	r3, sp
 80069ae:	8b1b      	ldrh	r3, [r3, #24]
 80069b0:	b288      	uxth	r0, r1
 80069b2:	4363      	muls	r3, r4
 80069b4:	181b      	adds	r3, r3, r0
 80069b6:	9803      	ldr	r0, [sp, #12]
 80069b8:	0c09      	lsrs	r1, r1, #16
 80069ba:	181b      	adds	r3, r3, r0
 80069bc:	9806      	ldr	r0, [sp, #24]
 80069be:	0c00      	lsrs	r0, r0, #16
 80069c0:	4360      	muls	r0, r4
 80069c2:	1840      	adds	r0, r0, r1
 80069c4:	0c19      	lsrs	r1, r3, #16
 80069c6:	1841      	adds	r1, r0, r1
 80069c8:	0c08      	lsrs	r0, r1, #16
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	0409      	lsls	r1, r1, #16
 80069ce:	4319      	orrs	r1, r3
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	9003      	str	r0, [sp, #12]
 80069d4:	c702      	stmia	r7!, {r1}
 80069d6:	42b3      	cmp	r3, r6
 80069d8:	d8e5      	bhi.n	80069a6 <__multiply+0xbe>
 80069da:	9b05      	ldr	r3, [sp, #20]
 80069dc:	50d0      	str	r0, [r2, r3]
 80069de:	682c      	ldr	r4, [r5, #0]
 80069e0:	0c24      	lsrs	r4, r4, #16
 80069e2:	d020      	beq.n	8006a26 <__multiply+0x13e>
 80069e4:	2100      	movs	r1, #0
 80069e6:	0010      	movs	r0, r2
 80069e8:	6813      	ldr	r3, [r2, #0]
 80069ea:	9e04      	ldr	r6, [sp, #16]
 80069ec:	9103      	str	r1, [sp, #12]
 80069ee:	6831      	ldr	r1, [r6, #0]
 80069f0:	6807      	ldr	r7, [r0, #0]
 80069f2:	b289      	uxth	r1, r1
 80069f4:	4361      	muls	r1, r4
 80069f6:	0c3f      	lsrs	r7, r7, #16
 80069f8:	19c9      	adds	r1, r1, r7
 80069fa:	9f03      	ldr	r7, [sp, #12]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	19c9      	adds	r1, r1, r7
 8006a00:	040f      	lsls	r7, r1, #16
 8006a02:	431f      	orrs	r7, r3
 8006a04:	6007      	str	r7, [r0, #0]
 8006a06:	ce80      	ldmia	r6!, {r7}
 8006a08:	6843      	ldr	r3, [r0, #4]
 8006a0a:	0c3f      	lsrs	r7, r7, #16
 8006a0c:	4367      	muls	r7, r4
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	0c09      	lsrs	r1, r1, #16
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	185b      	adds	r3, r3, r1
 8006a16:	0c19      	lsrs	r1, r3, #16
 8006a18:	9103      	str	r1, [sp, #12]
 8006a1a:	9902      	ldr	r1, [sp, #8]
 8006a1c:	3004      	adds	r0, #4
 8006a1e:	42b1      	cmp	r1, r6
 8006a20:	d8e5      	bhi.n	80069ee <__multiply+0x106>
 8006a22:	9905      	ldr	r1, [sp, #20]
 8006a24:	5053      	str	r3, [r2, r1]
 8006a26:	3504      	adds	r5, #4
 8006a28:	3204      	adds	r2, #4
 8006a2a:	e7a0      	b.n	800696e <__multiply+0x86>
 8006a2c:	9b00      	ldr	r3, [sp, #0]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	e79f      	b.n	8006974 <__multiply+0x8c>
 8006a34:	08007688 	.word	0x08007688
 8006a38:	08007699 	.word	0x08007699

08006a3c <__pow5mult>:
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3e:	2303      	movs	r3, #3
 8006a40:	0015      	movs	r5, r2
 8006a42:	0007      	movs	r7, r0
 8006a44:	000e      	movs	r6, r1
 8006a46:	401a      	ands	r2, r3
 8006a48:	421d      	tst	r5, r3
 8006a4a:	d008      	beq.n	8006a5e <__pow5mult+0x22>
 8006a4c:	4925      	ldr	r1, [pc, #148]	@ (8006ae4 <__pow5mult+0xa8>)
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	0092      	lsls	r2, r2, #2
 8006a52:	5852      	ldr	r2, [r2, r1]
 8006a54:	2300      	movs	r3, #0
 8006a56:	0031      	movs	r1, r6
 8006a58:	f7ff fe9a 	bl	8006790 <__multadd>
 8006a5c:	0006      	movs	r6, r0
 8006a5e:	10ad      	asrs	r5, r5, #2
 8006a60:	d03d      	beq.n	8006ade <__pow5mult+0xa2>
 8006a62:	69fc      	ldr	r4, [r7, #28]
 8006a64:	2c00      	cmp	r4, #0
 8006a66:	d10f      	bne.n	8006a88 <__pow5mult+0x4c>
 8006a68:	2010      	movs	r0, #16
 8006a6a:	f7ff fd6d 	bl	8006548 <malloc>
 8006a6e:	1e02      	subs	r2, r0, #0
 8006a70:	61f8      	str	r0, [r7, #28]
 8006a72:	d105      	bne.n	8006a80 <__pow5mult+0x44>
 8006a74:	21b4      	movs	r1, #180	@ 0xb4
 8006a76:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae8 <__pow5mult+0xac>)
 8006a78:	481c      	ldr	r0, [pc, #112]	@ (8006aec <__pow5mult+0xb0>)
 8006a7a:	31ff      	adds	r1, #255	@ 0xff
 8006a7c:	f000 fc5e 	bl	800733c <__assert_func>
 8006a80:	6044      	str	r4, [r0, #4]
 8006a82:	6084      	str	r4, [r0, #8]
 8006a84:	6004      	str	r4, [r0, #0]
 8006a86:	60c4      	str	r4, [r0, #12]
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	689c      	ldr	r4, [r3, #8]
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	2c00      	cmp	r4, #0
 8006a90:	d108      	bne.n	8006aa4 <__pow5mult+0x68>
 8006a92:	0038      	movs	r0, r7
 8006a94:	4916      	ldr	r1, [pc, #88]	@ (8006af0 <__pow5mult+0xb4>)
 8006a96:	f7ff ff0f 	bl	80068b8 <__i2b>
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	0004      	movs	r4, r0
 8006a9e:	6098      	str	r0, [r3, #8]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6003      	str	r3, [r0, #0]
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	421d      	tst	r5, r3
 8006aa8:	d00a      	beq.n	8006ac0 <__pow5mult+0x84>
 8006aaa:	0031      	movs	r1, r6
 8006aac:	0022      	movs	r2, r4
 8006aae:	0038      	movs	r0, r7
 8006ab0:	f7ff ff1a 	bl	80068e8 <__multiply>
 8006ab4:	0031      	movs	r1, r6
 8006ab6:	9001      	str	r0, [sp, #4]
 8006ab8:	0038      	movs	r0, r7
 8006aba:	f7ff fe45 	bl	8006748 <_Bfree>
 8006abe:	9e01      	ldr	r6, [sp, #4]
 8006ac0:	106d      	asrs	r5, r5, #1
 8006ac2:	d00c      	beq.n	8006ade <__pow5mult+0xa2>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d107      	bne.n	8006ada <__pow5mult+0x9e>
 8006aca:	0022      	movs	r2, r4
 8006acc:	0021      	movs	r1, r4
 8006ace:	0038      	movs	r0, r7
 8006ad0:	f7ff ff0a 	bl	80068e8 <__multiply>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6020      	str	r0, [r4, #0]
 8006ad8:	6003      	str	r3, [r0, #0]
 8006ada:	0004      	movs	r4, r0
 8006adc:	e7e2      	b.n	8006aa4 <__pow5mult+0x68>
 8006ade:	0030      	movs	r0, r6
 8006ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	0800774c 	.word	0x0800774c
 8006ae8:	08007619 	.word	0x08007619
 8006aec:	08007699 	.word	0x08007699
 8006af0:	00000271 	.word	0x00000271

08006af4 <__lshift>:
 8006af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af6:	000c      	movs	r4, r1
 8006af8:	0016      	movs	r6, r2
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	1157      	asrs	r7, r2, #5
 8006afe:	b085      	sub	sp, #20
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	3301      	adds	r3, #1
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	6849      	ldr	r1, [r1, #4]
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	9a00      	ldr	r2, [sp, #0]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	db10      	blt.n	8006b36 <__lshift+0x42>
 8006b14:	9802      	ldr	r0, [sp, #8]
 8006b16:	f7ff fdd3 	bl	80066c0 <_Balloc>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	0001      	movs	r1, r0
 8006b1e:	0005      	movs	r5, r0
 8006b20:	001a      	movs	r2, r3
 8006b22:	3114      	adds	r1, #20
 8006b24:	4298      	cmp	r0, r3
 8006b26:	d10c      	bne.n	8006b42 <__lshift+0x4e>
 8006b28:	21ef      	movs	r1, #239	@ 0xef
 8006b2a:	002a      	movs	r2, r5
 8006b2c:	4b25      	ldr	r3, [pc, #148]	@ (8006bc4 <__lshift+0xd0>)
 8006b2e:	4826      	ldr	r0, [pc, #152]	@ (8006bc8 <__lshift+0xd4>)
 8006b30:	0049      	lsls	r1, r1, #1
 8006b32:	f000 fc03 	bl	800733c <__assert_func>
 8006b36:	3101      	adds	r1, #1
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	e7e8      	b.n	8006b0e <__lshift+0x1a>
 8006b3c:	0098      	lsls	r0, r3, #2
 8006b3e:	500a      	str	r2, [r1, r0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	42bb      	cmp	r3, r7
 8006b44:	dbfa      	blt.n	8006b3c <__lshift+0x48>
 8006b46:	43fb      	mvns	r3, r7
 8006b48:	17db      	asrs	r3, r3, #31
 8006b4a:	401f      	ands	r7, r3
 8006b4c:	00bf      	lsls	r7, r7, #2
 8006b4e:	0023      	movs	r3, r4
 8006b50:	201f      	movs	r0, #31
 8006b52:	19c9      	adds	r1, r1, r7
 8006b54:	0037      	movs	r7, r6
 8006b56:	6922      	ldr	r2, [r4, #16]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	0092      	lsls	r2, r2, #2
 8006b5c:	189a      	adds	r2, r3, r2
 8006b5e:	4007      	ands	r7, r0
 8006b60:	4206      	tst	r6, r0
 8006b62:	d029      	beq.n	8006bb8 <__lshift+0xc4>
 8006b64:	3001      	adds	r0, #1
 8006b66:	1bc0      	subs	r0, r0, r7
 8006b68:	9003      	str	r0, [sp, #12]
 8006b6a:	468c      	mov	ip, r1
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	40be      	lsls	r6, r7
 8006b72:	4306      	orrs	r6, r0
 8006b74:	4660      	mov	r0, ip
 8006b76:	c040      	stmia	r0!, {r6}
 8006b78:	4684      	mov	ip, r0
 8006b7a:	9e03      	ldr	r6, [sp, #12]
 8006b7c:	cb01      	ldmia	r3!, {r0}
 8006b7e:	40f0      	lsrs	r0, r6
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d8f4      	bhi.n	8006b6e <__lshift+0x7a>
 8006b84:	0026      	movs	r6, r4
 8006b86:	3615      	adds	r6, #21
 8006b88:	2304      	movs	r3, #4
 8006b8a:	42b2      	cmp	r2, r6
 8006b8c:	d304      	bcc.n	8006b98 <__lshift+0xa4>
 8006b8e:	1b13      	subs	r3, r2, r4
 8006b90:	3b15      	subs	r3, #21
 8006b92:	089b      	lsrs	r3, r3, #2
 8006b94:	3301      	adds	r3, #1
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	50c8      	str	r0, [r1, r3]
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d002      	beq.n	8006ba4 <__lshift+0xb0>
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	9b00      	ldr	r3, [sp, #0]
 8006ba6:	9802      	ldr	r0, [sp, #8]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	0021      	movs	r1, r4
 8006bac:	612b      	str	r3, [r5, #16]
 8006bae:	f7ff fdcb 	bl	8006748 <_Bfree>
 8006bb2:	0028      	movs	r0, r5
 8006bb4:	b005      	add	sp, #20
 8006bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb8:	cb01      	ldmia	r3!, {r0}
 8006bba:	c101      	stmia	r1!, {r0}
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d8fb      	bhi.n	8006bb8 <__lshift+0xc4>
 8006bc0:	e7f0      	b.n	8006ba4 <__lshift+0xb0>
 8006bc2:	46c0      	nop			@ (mov r8, r8)
 8006bc4:	08007688 	.word	0x08007688
 8006bc8:	08007699 	.word	0x08007699

08006bcc <__mcmp>:
 8006bcc:	b530      	push	{r4, r5, lr}
 8006bce:	690b      	ldr	r3, [r1, #16]
 8006bd0:	6904      	ldr	r4, [r0, #16]
 8006bd2:	0002      	movs	r2, r0
 8006bd4:	1ae0      	subs	r0, r4, r3
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d10f      	bne.n	8006bfa <__mcmp+0x2e>
 8006bda:	3214      	adds	r2, #20
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	3114      	adds	r1, #20
 8006be0:	0014      	movs	r4, r2
 8006be2:	18c9      	adds	r1, r1, r3
 8006be4:	18d2      	adds	r2, r2, r3
 8006be6:	3a04      	subs	r2, #4
 8006be8:	3904      	subs	r1, #4
 8006bea:	6815      	ldr	r5, [r2, #0]
 8006bec:	680b      	ldr	r3, [r1, #0]
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	d004      	beq.n	8006bfc <__mcmp+0x30>
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	429d      	cmp	r5, r3
 8006bf6:	d200      	bcs.n	8006bfa <__mcmp+0x2e>
 8006bf8:	3802      	subs	r0, #2
 8006bfa:	bd30      	pop	{r4, r5, pc}
 8006bfc:	4294      	cmp	r4, r2
 8006bfe:	d3f2      	bcc.n	8006be6 <__mcmp+0x1a>
 8006c00:	e7fb      	b.n	8006bfa <__mcmp+0x2e>
	...

08006c04 <__mdiff>:
 8006c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c06:	000c      	movs	r4, r1
 8006c08:	b087      	sub	sp, #28
 8006c0a:	9000      	str	r0, [sp, #0]
 8006c0c:	0011      	movs	r1, r2
 8006c0e:	0020      	movs	r0, r4
 8006c10:	0017      	movs	r7, r2
 8006c12:	f7ff ffdb 	bl	8006bcc <__mcmp>
 8006c16:	1e05      	subs	r5, r0, #0
 8006c18:	d110      	bne.n	8006c3c <__mdiff+0x38>
 8006c1a:	0001      	movs	r1, r0
 8006c1c:	9800      	ldr	r0, [sp, #0]
 8006c1e:	f7ff fd4f 	bl	80066c0 <_Balloc>
 8006c22:	1e02      	subs	r2, r0, #0
 8006c24:	d104      	bne.n	8006c30 <__mdiff+0x2c>
 8006c26:	4b40      	ldr	r3, [pc, #256]	@ (8006d28 <__mdiff+0x124>)
 8006c28:	4840      	ldr	r0, [pc, #256]	@ (8006d2c <__mdiff+0x128>)
 8006c2a:	4941      	ldr	r1, [pc, #260]	@ (8006d30 <__mdiff+0x12c>)
 8006c2c:	f000 fb86 	bl	800733c <__assert_func>
 8006c30:	2301      	movs	r3, #1
 8006c32:	6145      	str	r5, [r0, #20]
 8006c34:	6103      	str	r3, [r0, #16]
 8006c36:	0010      	movs	r0, r2
 8006c38:	b007      	add	sp, #28
 8006c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	42b0      	cmp	r0, r6
 8006c40:	da03      	bge.n	8006c4a <__mdiff+0x46>
 8006c42:	0023      	movs	r3, r4
 8006c44:	003c      	movs	r4, r7
 8006c46:	001f      	movs	r7, r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	6861      	ldr	r1, [r4, #4]
 8006c4c:	9800      	ldr	r0, [sp, #0]
 8006c4e:	f7ff fd37 	bl	80066c0 <_Balloc>
 8006c52:	1e02      	subs	r2, r0, #0
 8006c54:	d103      	bne.n	8006c5e <__mdiff+0x5a>
 8006c56:	4b34      	ldr	r3, [pc, #208]	@ (8006d28 <__mdiff+0x124>)
 8006c58:	4834      	ldr	r0, [pc, #208]	@ (8006d2c <__mdiff+0x128>)
 8006c5a:	4936      	ldr	r1, [pc, #216]	@ (8006d34 <__mdiff+0x130>)
 8006c5c:	e7e6      	b.n	8006c2c <__mdiff+0x28>
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	3414      	adds	r4, #20
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	18e3      	adds	r3, r4, r3
 8006c68:	0021      	movs	r1, r4
 8006c6a:	9401      	str	r4, [sp, #4]
 8006c6c:	003c      	movs	r4, r7
 8006c6e:	9302      	str	r3, [sp, #8]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	3414      	adds	r4, #20
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	18e3      	adds	r3, r4, r3
 8006c78:	9303      	str	r3, [sp, #12]
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	60c6      	str	r6, [r0, #12]
 8006c7e:	468c      	mov	ip, r1
 8006c80:	2000      	movs	r0, #0
 8006c82:	3314      	adds	r3, #20
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9305      	str	r3, [sp, #20]
 8006c88:	4663      	mov	r3, ip
 8006c8a:	cb20      	ldmia	r3!, {r5}
 8006c8c:	b2a9      	uxth	r1, r5
 8006c8e:	000e      	movs	r6, r1
 8006c90:	469c      	mov	ip, r3
 8006c92:	cc08      	ldmia	r4!, {r3}
 8006c94:	0c2d      	lsrs	r5, r5, #16
 8006c96:	b299      	uxth	r1, r3
 8006c98:	1a71      	subs	r1, r6, r1
 8006c9a:	1809      	adds	r1, r1, r0
 8006c9c:	0c1b      	lsrs	r3, r3, #16
 8006c9e:	1408      	asrs	r0, r1, #16
 8006ca0:	1aeb      	subs	r3, r5, r3
 8006ca2:	181b      	adds	r3, r3, r0
 8006ca4:	1418      	asrs	r0, r3, #16
 8006ca6:	b289      	uxth	r1, r1
 8006ca8:	041b      	lsls	r3, r3, #16
 8006caa:	4319      	orrs	r1, r3
 8006cac:	9b05      	ldr	r3, [sp, #20]
 8006cae:	c302      	stmia	r3!, {r1}
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d8e7      	bhi.n	8006c88 <__mdiff+0x84>
 8006cb8:	0039      	movs	r1, r7
 8006cba:	9c03      	ldr	r4, [sp, #12]
 8006cbc:	3115      	adds	r1, #21
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	428c      	cmp	r4, r1
 8006cc2:	d304      	bcc.n	8006cce <__mdiff+0xca>
 8006cc4:	1be3      	subs	r3, r4, r7
 8006cc6:	3b15      	subs	r3, #21
 8006cc8:	089b      	lsrs	r3, r3, #2
 8006cca:	3301      	adds	r3, #1
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	9901      	ldr	r1, [sp, #4]
 8006cd0:	18cd      	adds	r5, r1, r3
 8006cd2:	9904      	ldr	r1, [sp, #16]
 8006cd4:	002e      	movs	r6, r5
 8006cd6:	18cb      	adds	r3, r1, r3
 8006cd8:	001f      	movs	r7, r3
 8006cda:	9902      	ldr	r1, [sp, #8]
 8006cdc:	428e      	cmp	r6, r1
 8006cde:	d311      	bcc.n	8006d04 <__mdiff+0x100>
 8006ce0:	9c02      	ldr	r4, [sp, #8]
 8006ce2:	1ee9      	subs	r1, r5, #3
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	428c      	cmp	r4, r1
 8006ce8:	d304      	bcc.n	8006cf4 <__mdiff+0xf0>
 8006cea:	0021      	movs	r1, r4
 8006cec:	3103      	adds	r1, #3
 8006cee:	1b49      	subs	r1, r1, r5
 8006cf0:	0889      	lsrs	r1, r1, #2
 8006cf2:	0088      	lsls	r0, r1, #2
 8006cf4:	181b      	adds	r3, r3, r0
 8006cf6:	3b04      	subs	r3, #4
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	2900      	cmp	r1, #0
 8006cfc:	d010      	beq.n	8006d20 <__mdiff+0x11c>
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	6113      	str	r3, [r2, #16]
 8006d02:	e798      	b.n	8006c36 <__mdiff+0x32>
 8006d04:	4684      	mov	ip, r0
 8006d06:	ce02      	ldmia	r6!, {r1}
 8006d08:	b288      	uxth	r0, r1
 8006d0a:	4460      	add	r0, ip
 8006d0c:	1400      	asrs	r0, r0, #16
 8006d0e:	0c0c      	lsrs	r4, r1, #16
 8006d10:	1904      	adds	r4, r0, r4
 8006d12:	4461      	add	r1, ip
 8006d14:	1420      	asrs	r0, r4, #16
 8006d16:	b289      	uxth	r1, r1
 8006d18:	0424      	lsls	r4, r4, #16
 8006d1a:	4321      	orrs	r1, r4
 8006d1c:	c702      	stmia	r7!, {r1}
 8006d1e:	e7dc      	b.n	8006cda <__mdiff+0xd6>
 8006d20:	9900      	ldr	r1, [sp, #0]
 8006d22:	3901      	subs	r1, #1
 8006d24:	9100      	str	r1, [sp, #0]
 8006d26:	e7e6      	b.n	8006cf6 <__mdiff+0xf2>
 8006d28:	08007688 	.word	0x08007688
 8006d2c:	08007699 	.word	0x08007699
 8006d30:	00000237 	.word	0x00000237
 8006d34:	00000245 	.word	0x00000245

08006d38 <__d2b>:
 8006d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	0016      	movs	r6, r2
 8006d3e:	001f      	movs	r7, r3
 8006d40:	f7ff fcbe 	bl	80066c0 <_Balloc>
 8006d44:	1e04      	subs	r4, r0, #0
 8006d46:	d105      	bne.n	8006d54 <__d2b+0x1c>
 8006d48:	0022      	movs	r2, r4
 8006d4a:	4b25      	ldr	r3, [pc, #148]	@ (8006de0 <__d2b+0xa8>)
 8006d4c:	4825      	ldr	r0, [pc, #148]	@ (8006de4 <__d2b+0xac>)
 8006d4e:	4926      	ldr	r1, [pc, #152]	@ (8006de8 <__d2b+0xb0>)
 8006d50:	f000 faf4 	bl	800733c <__assert_func>
 8006d54:	033b      	lsls	r3, r7, #12
 8006d56:	007d      	lsls	r5, r7, #1
 8006d58:	0b1b      	lsrs	r3, r3, #12
 8006d5a:	0d6d      	lsrs	r5, r5, #21
 8006d5c:	d002      	beq.n	8006d64 <__d2b+0x2c>
 8006d5e:	2280      	movs	r2, #128	@ 0x80
 8006d60:	0352      	lsls	r2, r2, #13
 8006d62:	4313      	orrs	r3, r2
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	d025      	beq.n	8006db6 <__d2b+0x7e>
 8006d6a:	4668      	mov	r0, sp
 8006d6c:	9600      	str	r6, [sp, #0]
 8006d6e:	f7ff fd74 	bl	800685a <__lo0bits>
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	9900      	ldr	r1, [sp, #0]
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d01b      	beq.n	8006db2 <__d2b+0x7a>
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	001e      	movs	r6, r3
 8006d7e:	1a12      	subs	r2, r2, r0
 8006d80:	4096      	lsls	r6, r2
 8006d82:	0032      	movs	r2, r6
 8006d84:	40c3      	lsrs	r3, r0
 8006d86:	430a      	orrs	r2, r1
 8006d88:	6162      	str	r2, [r4, #20]
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	9e01      	ldr	r6, [sp, #4]
 8006d8e:	61a6      	str	r6, [r4, #24]
 8006d90:	1e73      	subs	r3, r6, #1
 8006d92:	419e      	sbcs	r6, r3
 8006d94:	3601      	adds	r6, #1
 8006d96:	6126      	str	r6, [r4, #16]
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	d014      	beq.n	8006dc6 <__d2b+0x8e>
 8006d9c:	2635      	movs	r6, #53	@ 0x35
 8006d9e:	4b13      	ldr	r3, [pc, #76]	@ (8006dec <__d2b+0xb4>)
 8006da0:	18ed      	adds	r5, r5, r3
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	182d      	adds	r5, r5, r0
 8006da6:	601d      	str	r5, [r3, #0]
 8006da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006daa:	1a36      	subs	r6, r6, r0
 8006dac:	601e      	str	r6, [r3, #0]
 8006dae:	0020      	movs	r0, r4
 8006db0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006db2:	6161      	str	r1, [r4, #20]
 8006db4:	e7ea      	b.n	8006d8c <__d2b+0x54>
 8006db6:	a801      	add	r0, sp, #4
 8006db8:	f7ff fd4f 	bl	800685a <__lo0bits>
 8006dbc:	9b01      	ldr	r3, [sp, #4]
 8006dbe:	2601      	movs	r6, #1
 8006dc0:	6163      	str	r3, [r4, #20]
 8006dc2:	3020      	adds	r0, #32
 8006dc4:	e7e7      	b.n	8006d96 <__d2b+0x5e>
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <__d2b+0xb8>)
 8006dc8:	18c0      	adds	r0, r0, r3
 8006dca:	9b08      	ldr	r3, [sp, #32]
 8006dcc:	6018      	str	r0, [r3, #0]
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <__d2b+0xbc>)
 8006dd0:	18f3      	adds	r3, r6, r3
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	18e3      	adds	r3, r4, r3
 8006dd6:	6958      	ldr	r0, [r3, #20]
 8006dd8:	f7ff fd1e 	bl	8006818 <__hi0bits>
 8006ddc:	0176      	lsls	r6, r6, #5
 8006dde:	e7e3      	b.n	8006da8 <__d2b+0x70>
 8006de0:	08007688 	.word	0x08007688
 8006de4:	08007699 	.word	0x08007699
 8006de8:	0000030f 	.word	0x0000030f
 8006dec:	fffffbcd 	.word	0xfffffbcd
 8006df0:	fffffbce 	.word	0xfffffbce
 8006df4:	3fffffff 	.word	0x3fffffff

08006df8 <__sfputc_r>:
 8006df8:	6893      	ldr	r3, [r2, #8]
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	6093      	str	r3, [r2, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	da04      	bge.n	8006e0e <__sfputc_r+0x16>
 8006e04:	6994      	ldr	r4, [r2, #24]
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	db07      	blt.n	8006e1a <__sfputc_r+0x22>
 8006e0a:	290a      	cmp	r1, #10
 8006e0c:	d005      	beq.n	8006e1a <__sfputc_r+0x22>
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	1c58      	adds	r0, r3, #1
 8006e12:	6010      	str	r0, [r2, #0]
 8006e14:	7019      	strb	r1, [r3, #0]
 8006e16:	0008      	movs	r0, r1
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	f7fe fba3 	bl	8005564 <__swbuf_r>
 8006e1e:	0001      	movs	r1, r0
 8006e20:	e7f9      	b.n	8006e16 <__sfputc_r+0x1e>

08006e22 <__sfputs_r>:
 8006e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e24:	0006      	movs	r6, r0
 8006e26:	000f      	movs	r7, r1
 8006e28:	0014      	movs	r4, r2
 8006e2a:	18d5      	adds	r5, r2, r3
 8006e2c:	42ac      	cmp	r4, r5
 8006e2e:	d101      	bne.n	8006e34 <__sfputs_r+0x12>
 8006e30:	2000      	movs	r0, #0
 8006e32:	e007      	b.n	8006e44 <__sfputs_r+0x22>
 8006e34:	7821      	ldrb	r1, [r4, #0]
 8006e36:	003a      	movs	r2, r7
 8006e38:	0030      	movs	r0, r6
 8006e3a:	f7ff ffdd 	bl	8006df8 <__sfputc_r>
 8006e3e:	3401      	adds	r4, #1
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d1f3      	bne.n	8006e2c <__sfputs_r+0xa>
 8006e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e48 <_vfiprintf_r>:
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	b0a1      	sub	sp, #132	@ 0x84
 8006e4c:	000f      	movs	r7, r1
 8006e4e:	0015      	movs	r5, r2
 8006e50:	001e      	movs	r6, r3
 8006e52:	9003      	str	r0, [sp, #12]
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d004      	beq.n	8006e62 <_vfiprintf_r+0x1a>
 8006e58:	6a03      	ldr	r3, [r0, #32]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <_vfiprintf_r+0x1a>
 8006e5e:	f7fe fa91 	bl	8005384 <__sinit>
 8006e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e64:	07db      	lsls	r3, r3, #31
 8006e66:	d405      	bmi.n	8006e74 <_vfiprintf_r+0x2c>
 8006e68:	89bb      	ldrh	r3, [r7, #12]
 8006e6a:	059b      	lsls	r3, r3, #22
 8006e6c:	d402      	bmi.n	8006e74 <_vfiprintf_r+0x2c>
 8006e6e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006e70:	f7fe fc9d 	bl	80057ae <__retarget_lock_acquire_recursive>
 8006e74:	89bb      	ldrh	r3, [r7, #12]
 8006e76:	071b      	lsls	r3, r3, #28
 8006e78:	d502      	bpl.n	8006e80 <_vfiprintf_r+0x38>
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d113      	bne.n	8006ea8 <_vfiprintf_r+0x60>
 8006e80:	0039      	movs	r1, r7
 8006e82:	9803      	ldr	r0, [sp, #12]
 8006e84:	f7fe fbb0 	bl	80055e8 <__swsetup_r>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d00d      	beq.n	8006ea8 <_vfiprintf_r+0x60>
 8006e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e8e:	07db      	lsls	r3, r3, #31
 8006e90:	d503      	bpl.n	8006e9a <_vfiprintf_r+0x52>
 8006e92:	2001      	movs	r0, #1
 8006e94:	4240      	negs	r0, r0
 8006e96:	b021      	add	sp, #132	@ 0x84
 8006e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e9a:	89bb      	ldrh	r3, [r7, #12]
 8006e9c:	059b      	lsls	r3, r3, #22
 8006e9e:	d4f8      	bmi.n	8006e92 <_vfiprintf_r+0x4a>
 8006ea0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006ea2:	f7fe fc85 	bl	80057b0 <__retarget_lock_release_recursive>
 8006ea6:	e7f4      	b.n	8006e92 <_vfiprintf_r+0x4a>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	ac08      	add	r4, sp, #32
 8006eac:	6163      	str	r3, [r4, #20]
 8006eae:	3320      	adds	r3, #32
 8006eb0:	7663      	strb	r3, [r4, #25]
 8006eb2:	3310      	adds	r3, #16
 8006eb4:	76a3      	strb	r3, [r4, #26]
 8006eb6:	9607      	str	r6, [sp, #28]
 8006eb8:	002e      	movs	r6, r5
 8006eba:	7833      	ldrb	r3, [r6, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <_vfiprintf_r+0x7c>
 8006ec0:	2b25      	cmp	r3, #37	@ 0x25
 8006ec2:	d148      	bne.n	8006f56 <_vfiprintf_r+0x10e>
 8006ec4:	1b73      	subs	r3, r6, r5
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	42ae      	cmp	r6, r5
 8006eca:	d00b      	beq.n	8006ee4 <_vfiprintf_r+0x9c>
 8006ecc:	002a      	movs	r2, r5
 8006ece:	0039      	movs	r1, r7
 8006ed0:	9803      	ldr	r0, [sp, #12]
 8006ed2:	f7ff ffa6 	bl	8006e22 <__sfputs_r>
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d100      	bne.n	8006edc <_vfiprintf_r+0x94>
 8006eda:	e0ae      	b.n	800703a <_vfiprintf_r+0x1f2>
 8006edc:	6963      	ldr	r3, [r4, #20]
 8006ede:	9a05      	ldr	r2, [sp, #20]
 8006ee0:	189b      	adds	r3, r3, r2
 8006ee2:	6163      	str	r3, [r4, #20]
 8006ee4:	7833      	ldrb	r3, [r6, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d100      	bne.n	8006eec <_vfiprintf_r+0xa4>
 8006eea:	e0a6      	b.n	800703a <_vfiprintf_r+0x1f2>
 8006eec:	2201      	movs	r2, #1
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4252      	negs	r2, r2
 8006ef2:	6062      	str	r2, [r4, #4]
 8006ef4:	a904      	add	r1, sp, #16
 8006ef6:	3254      	adds	r2, #84	@ 0x54
 8006ef8:	1852      	adds	r2, r2, r1
 8006efa:	1c75      	adds	r5, r6, #1
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	60e3      	str	r3, [r4, #12]
 8006f00:	60a3      	str	r3, [r4, #8]
 8006f02:	7013      	strb	r3, [r2, #0]
 8006f04:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006f06:	4b59      	ldr	r3, [pc, #356]	@ (800706c <_vfiprintf_r+0x224>)
 8006f08:	2205      	movs	r2, #5
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	7829      	ldrb	r1, [r5, #0]
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	f7fe fc4f 	bl	80057b2 <memchr>
 8006f14:	1c6e      	adds	r6, r5, #1
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d11f      	bne.n	8006f5a <_vfiprintf_r+0x112>
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	06d3      	lsls	r3, r2, #27
 8006f1e:	d504      	bpl.n	8006f2a <_vfiprintf_r+0xe2>
 8006f20:	2353      	movs	r3, #83	@ 0x53
 8006f22:	a904      	add	r1, sp, #16
 8006f24:	185b      	adds	r3, r3, r1
 8006f26:	2120      	movs	r1, #32
 8006f28:	7019      	strb	r1, [r3, #0]
 8006f2a:	0713      	lsls	r3, r2, #28
 8006f2c:	d504      	bpl.n	8006f38 <_vfiprintf_r+0xf0>
 8006f2e:	2353      	movs	r3, #83	@ 0x53
 8006f30:	a904      	add	r1, sp, #16
 8006f32:	185b      	adds	r3, r3, r1
 8006f34:	212b      	movs	r1, #43	@ 0x2b
 8006f36:	7019      	strb	r1, [r3, #0]
 8006f38:	782b      	ldrb	r3, [r5, #0]
 8006f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f3c:	d016      	beq.n	8006f6c <_vfiprintf_r+0x124>
 8006f3e:	002e      	movs	r6, r5
 8006f40:	2100      	movs	r1, #0
 8006f42:	200a      	movs	r0, #10
 8006f44:	68e3      	ldr	r3, [r4, #12]
 8006f46:	7832      	ldrb	r2, [r6, #0]
 8006f48:	1c75      	adds	r5, r6, #1
 8006f4a:	3a30      	subs	r2, #48	@ 0x30
 8006f4c:	2a09      	cmp	r2, #9
 8006f4e:	d950      	bls.n	8006ff2 <_vfiprintf_r+0x1aa>
 8006f50:	2900      	cmp	r1, #0
 8006f52:	d111      	bne.n	8006f78 <_vfiprintf_r+0x130>
 8006f54:	e017      	b.n	8006f86 <_vfiprintf_r+0x13e>
 8006f56:	3601      	adds	r6, #1
 8006f58:	e7af      	b.n	8006eba <_vfiprintf_r+0x72>
 8006f5a:	9b05      	ldr	r3, [sp, #20]
 8006f5c:	6822      	ldr	r2, [r4, #0]
 8006f5e:	1ac0      	subs	r0, r0, r3
 8006f60:	2301      	movs	r3, #1
 8006f62:	4083      	lsls	r3, r0
 8006f64:	4313      	orrs	r3, r2
 8006f66:	0035      	movs	r5, r6
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	e7cc      	b.n	8006f06 <_vfiprintf_r+0xbe>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	1d19      	adds	r1, r3, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	9107      	str	r1, [sp, #28]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db01      	blt.n	8006f7c <_vfiprintf_r+0x134>
 8006f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f7a:	e004      	b.n	8006f86 <_vfiprintf_r+0x13e>
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	60e3      	str	r3, [r4, #12]
 8006f80:	2302      	movs	r3, #2
 8006f82:	4313      	orrs	r3, r2
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	7833      	ldrb	r3, [r6, #0]
 8006f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f8a:	d10c      	bne.n	8006fa6 <_vfiprintf_r+0x15e>
 8006f8c:	7873      	ldrb	r3, [r6, #1]
 8006f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f90:	d134      	bne.n	8006ffc <_vfiprintf_r+0x1b4>
 8006f92:	9b07      	ldr	r3, [sp, #28]
 8006f94:	3602      	adds	r6, #2
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9207      	str	r2, [sp, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da01      	bge.n	8006fa4 <_vfiprintf_r+0x15c>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	425b      	negs	r3, r3
 8006fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa6:	4d32      	ldr	r5, [pc, #200]	@ (8007070 <_vfiprintf_r+0x228>)
 8006fa8:	2203      	movs	r2, #3
 8006faa:	0028      	movs	r0, r5
 8006fac:	7831      	ldrb	r1, [r6, #0]
 8006fae:	f7fe fc00 	bl	80057b2 <memchr>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d006      	beq.n	8006fc4 <_vfiprintf_r+0x17c>
 8006fb6:	2340      	movs	r3, #64	@ 0x40
 8006fb8:	1b40      	subs	r0, r0, r5
 8006fba:	4083      	lsls	r3, r0
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	3601      	adds	r6, #1
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	7831      	ldrb	r1, [r6, #0]
 8006fc6:	2206      	movs	r2, #6
 8006fc8:	482a      	ldr	r0, [pc, #168]	@ (8007074 <_vfiprintf_r+0x22c>)
 8006fca:	1c75      	adds	r5, r6, #1
 8006fcc:	7621      	strb	r1, [r4, #24]
 8006fce:	f7fe fbf0 	bl	80057b2 <memchr>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d040      	beq.n	8007058 <_vfiprintf_r+0x210>
 8006fd6:	4b28      	ldr	r3, [pc, #160]	@ (8007078 <_vfiprintf_r+0x230>)
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d122      	bne.n	8007022 <_vfiprintf_r+0x1da>
 8006fdc:	2207      	movs	r2, #7
 8006fde:	9b07      	ldr	r3, [sp, #28]
 8006fe0:	3307      	adds	r3, #7
 8006fe2:	4393      	bics	r3, r2
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	9307      	str	r3, [sp, #28]
 8006fe8:	6963      	ldr	r3, [r4, #20]
 8006fea:	9a04      	ldr	r2, [sp, #16]
 8006fec:	189b      	adds	r3, r3, r2
 8006fee:	6163      	str	r3, [r4, #20]
 8006ff0:	e762      	b.n	8006eb8 <_vfiprintf_r+0x70>
 8006ff2:	4343      	muls	r3, r0
 8006ff4:	002e      	movs	r6, r5
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	189b      	adds	r3, r3, r2
 8006ffa:	e7a4      	b.n	8006f46 <_vfiprintf_r+0xfe>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	200a      	movs	r0, #10
 8007000:	0019      	movs	r1, r3
 8007002:	3601      	adds	r6, #1
 8007004:	6063      	str	r3, [r4, #4]
 8007006:	7832      	ldrb	r2, [r6, #0]
 8007008:	1c75      	adds	r5, r6, #1
 800700a:	3a30      	subs	r2, #48	@ 0x30
 800700c:	2a09      	cmp	r2, #9
 800700e:	d903      	bls.n	8007018 <_vfiprintf_r+0x1d0>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0c8      	beq.n	8006fa6 <_vfiprintf_r+0x15e>
 8007014:	9109      	str	r1, [sp, #36]	@ 0x24
 8007016:	e7c6      	b.n	8006fa6 <_vfiprintf_r+0x15e>
 8007018:	4341      	muls	r1, r0
 800701a:	002e      	movs	r6, r5
 800701c:	2301      	movs	r3, #1
 800701e:	1889      	adds	r1, r1, r2
 8007020:	e7f1      	b.n	8007006 <_vfiprintf_r+0x1be>
 8007022:	aa07      	add	r2, sp, #28
 8007024:	9200      	str	r2, [sp, #0]
 8007026:	0021      	movs	r1, r4
 8007028:	003a      	movs	r2, r7
 800702a:	4b14      	ldr	r3, [pc, #80]	@ (800707c <_vfiprintf_r+0x234>)
 800702c:	9803      	ldr	r0, [sp, #12]
 800702e:	f7fd fd5f 	bl	8004af0 <_printf_float>
 8007032:	9004      	str	r0, [sp, #16]
 8007034:	9b04      	ldr	r3, [sp, #16]
 8007036:	3301      	adds	r3, #1
 8007038:	d1d6      	bne.n	8006fe8 <_vfiprintf_r+0x1a0>
 800703a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800703c:	07db      	lsls	r3, r3, #31
 800703e:	d405      	bmi.n	800704c <_vfiprintf_r+0x204>
 8007040:	89bb      	ldrh	r3, [r7, #12]
 8007042:	059b      	lsls	r3, r3, #22
 8007044:	d402      	bmi.n	800704c <_vfiprintf_r+0x204>
 8007046:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007048:	f7fe fbb2 	bl	80057b0 <__retarget_lock_release_recursive>
 800704c:	89bb      	ldrh	r3, [r7, #12]
 800704e:	065b      	lsls	r3, r3, #25
 8007050:	d500      	bpl.n	8007054 <_vfiprintf_r+0x20c>
 8007052:	e71e      	b.n	8006e92 <_vfiprintf_r+0x4a>
 8007054:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007056:	e71e      	b.n	8006e96 <_vfiprintf_r+0x4e>
 8007058:	aa07      	add	r2, sp, #28
 800705a:	9200      	str	r2, [sp, #0]
 800705c:	0021      	movs	r1, r4
 800705e:	003a      	movs	r2, r7
 8007060:	4b06      	ldr	r3, [pc, #24]	@ (800707c <_vfiprintf_r+0x234>)
 8007062:	9803      	ldr	r0, [sp, #12]
 8007064:	f7fd fff2 	bl	800504c <_printf_i>
 8007068:	e7e3      	b.n	8007032 <_vfiprintf_r+0x1ea>
 800706a:	46c0      	nop			@ (mov r8, r8)
 800706c:	080076f2 	.word	0x080076f2
 8007070:	080076f8 	.word	0x080076f8
 8007074:	080076fc 	.word	0x080076fc
 8007078:	08004af1 	.word	0x08004af1
 800707c:	08006e23 	.word	0x08006e23

08007080 <__sflush_r>:
 8007080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007082:	220c      	movs	r2, #12
 8007084:	5e8b      	ldrsh	r3, [r1, r2]
 8007086:	0005      	movs	r5, r0
 8007088:	000c      	movs	r4, r1
 800708a:	071a      	lsls	r2, r3, #28
 800708c:	d456      	bmi.n	800713c <__sflush_r+0xbc>
 800708e:	684a      	ldr	r2, [r1, #4]
 8007090:	2a00      	cmp	r2, #0
 8007092:	dc02      	bgt.n	800709a <__sflush_r+0x1a>
 8007094:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007096:	2a00      	cmp	r2, #0
 8007098:	dd4e      	ble.n	8007138 <__sflush_r+0xb8>
 800709a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800709c:	2f00      	cmp	r7, #0
 800709e:	d04b      	beq.n	8007138 <__sflush_r+0xb8>
 80070a0:	2200      	movs	r2, #0
 80070a2:	2080      	movs	r0, #128	@ 0x80
 80070a4:	682e      	ldr	r6, [r5, #0]
 80070a6:	602a      	str	r2, [r5, #0]
 80070a8:	001a      	movs	r2, r3
 80070aa:	0140      	lsls	r0, r0, #5
 80070ac:	6a21      	ldr	r1, [r4, #32]
 80070ae:	4002      	ands	r2, r0
 80070b0:	4203      	tst	r3, r0
 80070b2:	d033      	beq.n	800711c <__sflush_r+0x9c>
 80070b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	075b      	lsls	r3, r3, #29
 80070ba:	d506      	bpl.n	80070ca <__sflush_r+0x4a>
 80070bc:	6863      	ldr	r3, [r4, #4]
 80070be:	1ad2      	subs	r2, r2, r3
 80070c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <__sflush_r+0x4a>
 80070c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070c8:	1ad2      	subs	r2, r2, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	0028      	movs	r0, r5
 80070ce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80070d0:	6a21      	ldr	r1, [r4, #32]
 80070d2:	47b8      	blx	r7
 80070d4:	89a2      	ldrh	r2, [r4, #12]
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d106      	bne.n	80070e8 <__sflush_r+0x68>
 80070da:	6829      	ldr	r1, [r5, #0]
 80070dc:	291d      	cmp	r1, #29
 80070de:	d846      	bhi.n	800716e <__sflush_r+0xee>
 80070e0:	4b29      	ldr	r3, [pc, #164]	@ (8007188 <__sflush_r+0x108>)
 80070e2:	40cb      	lsrs	r3, r1
 80070e4:	07db      	lsls	r3, r3, #31
 80070e6:	d542      	bpl.n	800716e <__sflush_r+0xee>
 80070e8:	2300      	movs	r3, #0
 80070ea:	6063      	str	r3, [r4, #4]
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	04d2      	lsls	r2, r2, #19
 80070f2:	d505      	bpl.n	8007100 <__sflush_r+0x80>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <__sflush_r+0x7e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d100      	bne.n	8007100 <__sflush_r+0x80>
 80070fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007102:	602e      	str	r6, [r5, #0]
 8007104:	2900      	cmp	r1, #0
 8007106:	d017      	beq.n	8007138 <__sflush_r+0xb8>
 8007108:	0023      	movs	r3, r4
 800710a:	3344      	adds	r3, #68	@ 0x44
 800710c:	4299      	cmp	r1, r3
 800710e:	d002      	beq.n	8007116 <__sflush_r+0x96>
 8007110:	0028      	movs	r0, r5
 8007112:	f7ff f9cf 	bl	80064b4 <_free_r>
 8007116:	2300      	movs	r3, #0
 8007118:	6363      	str	r3, [r4, #52]	@ 0x34
 800711a:	e00d      	b.n	8007138 <__sflush_r+0xb8>
 800711c:	2301      	movs	r3, #1
 800711e:	0028      	movs	r0, r5
 8007120:	47b8      	blx	r7
 8007122:	0002      	movs	r2, r0
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d1c6      	bne.n	80070b6 <__sflush_r+0x36>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0c3      	beq.n	80070b6 <__sflush_r+0x36>
 800712e:	2b1d      	cmp	r3, #29
 8007130:	d001      	beq.n	8007136 <__sflush_r+0xb6>
 8007132:	2b16      	cmp	r3, #22
 8007134:	d11a      	bne.n	800716c <__sflush_r+0xec>
 8007136:	602e      	str	r6, [r5, #0]
 8007138:	2000      	movs	r0, #0
 800713a:	e01e      	b.n	800717a <__sflush_r+0xfa>
 800713c:	690e      	ldr	r6, [r1, #16]
 800713e:	2e00      	cmp	r6, #0
 8007140:	d0fa      	beq.n	8007138 <__sflush_r+0xb8>
 8007142:	680f      	ldr	r7, [r1, #0]
 8007144:	600e      	str	r6, [r1, #0]
 8007146:	1bba      	subs	r2, r7, r6
 8007148:	9201      	str	r2, [sp, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	079b      	lsls	r3, r3, #30
 800714e:	d100      	bne.n	8007152 <__sflush_r+0xd2>
 8007150:	694a      	ldr	r2, [r1, #20]
 8007152:	60a2      	str	r2, [r4, #8]
 8007154:	9b01      	ldr	r3, [sp, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	ddee      	ble.n	8007138 <__sflush_r+0xb8>
 800715a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800715c:	0032      	movs	r2, r6
 800715e:	001f      	movs	r7, r3
 8007160:	0028      	movs	r0, r5
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	6a21      	ldr	r1, [r4, #32]
 8007166:	47b8      	blx	r7
 8007168:	2800      	cmp	r0, #0
 800716a:	dc07      	bgt.n	800717c <__sflush_r+0xfc>
 800716c:	89a2      	ldrh	r2, [r4, #12]
 800716e:	2340      	movs	r3, #64	@ 0x40
 8007170:	2001      	movs	r0, #1
 8007172:	4313      	orrs	r3, r2
 8007174:	b21b      	sxth	r3, r3
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	4240      	negs	r0, r0
 800717a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800717c:	9b01      	ldr	r3, [sp, #4]
 800717e:	1836      	adds	r6, r6, r0
 8007180:	1a1b      	subs	r3, r3, r0
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	e7e6      	b.n	8007154 <__sflush_r+0xd4>
 8007186:	46c0      	nop			@ (mov r8, r8)
 8007188:	20400001 	.word	0x20400001

0800718c <_fflush_r>:
 800718c:	690b      	ldr	r3, [r1, #16]
 800718e:	b570      	push	{r4, r5, r6, lr}
 8007190:	0005      	movs	r5, r0
 8007192:	000c      	movs	r4, r1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d102      	bne.n	800719e <_fflush_r+0x12>
 8007198:	2500      	movs	r5, #0
 800719a:	0028      	movs	r0, r5
 800719c:	bd70      	pop	{r4, r5, r6, pc}
 800719e:	2800      	cmp	r0, #0
 80071a0:	d004      	beq.n	80071ac <_fflush_r+0x20>
 80071a2:	6a03      	ldr	r3, [r0, #32]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <_fflush_r+0x20>
 80071a8:	f7fe f8ec 	bl	8005384 <__sinit>
 80071ac:	220c      	movs	r2, #12
 80071ae:	5ea3      	ldrsh	r3, [r4, r2]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f1      	beq.n	8007198 <_fflush_r+0xc>
 80071b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071b6:	07d2      	lsls	r2, r2, #31
 80071b8:	d404      	bmi.n	80071c4 <_fflush_r+0x38>
 80071ba:	059b      	lsls	r3, r3, #22
 80071bc:	d402      	bmi.n	80071c4 <_fflush_r+0x38>
 80071be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071c0:	f7fe faf5 	bl	80057ae <__retarget_lock_acquire_recursive>
 80071c4:	0028      	movs	r0, r5
 80071c6:	0021      	movs	r1, r4
 80071c8:	f7ff ff5a 	bl	8007080 <__sflush_r>
 80071cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071ce:	0005      	movs	r5, r0
 80071d0:	07db      	lsls	r3, r3, #31
 80071d2:	d4e2      	bmi.n	800719a <_fflush_r+0xe>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	059b      	lsls	r3, r3, #22
 80071d8:	d4df      	bmi.n	800719a <_fflush_r+0xe>
 80071da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071dc:	f7fe fae8 	bl	80057b0 <__retarget_lock_release_recursive>
 80071e0:	e7db      	b.n	800719a <_fflush_r+0xe>
	...

080071e4 <__swhatbuf_r>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	000e      	movs	r6, r1
 80071e8:	001d      	movs	r5, r3
 80071ea:	230e      	movs	r3, #14
 80071ec:	5ec9      	ldrsh	r1, [r1, r3]
 80071ee:	0014      	movs	r4, r2
 80071f0:	b096      	sub	sp, #88	@ 0x58
 80071f2:	2900      	cmp	r1, #0
 80071f4:	da0c      	bge.n	8007210 <__swhatbuf_r+0x2c>
 80071f6:	89b2      	ldrh	r2, [r6, #12]
 80071f8:	2380      	movs	r3, #128	@ 0x80
 80071fa:	0011      	movs	r1, r2
 80071fc:	4019      	ands	r1, r3
 80071fe:	421a      	tst	r2, r3
 8007200:	d114      	bne.n	800722c <__swhatbuf_r+0x48>
 8007202:	2380      	movs	r3, #128	@ 0x80
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	2000      	movs	r0, #0
 8007208:	6029      	str	r1, [r5, #0]
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	b016      	add	sp, #88	@ 0x58
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	466a      	mov	r2, sp
 8007212:	f000 f853 	bl	80072bc <_fstat_r>
 8007216:	2800      	cmp	r0, #0
 8007218:	dbed      	blt.n	80071f6 <__swhatbuf_r+0x12>
 800721a:	23f0      	movs	r3, #240	@ 0xf0
 800721c:	9901      	ldr	r1, [sp, #4]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	4019      	ands	r1, r3
 8007222:	4b04      	ldr	r3, [pc, #16]	@ (8007234 <__swhatbuf_r+0x50>)
 8007224:	18c9      	adds	r1, r1, r3
 8007226:	424b      	negs	r3, r1
 8007228:	4159      	adcs	r1, r3
 800722a:	e7ea      	b.n	8007202 <__swhatbuf_r+0x1e>
 800722c:	2100      	movs	r1, #0
 800722e:	2340      	movs	r3, #64	@ 0x40
 8007230:	e7e9      	b.n	8007206 <__swhatbuf_r+0x22>
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	ffffe000 	.word	0xffffe000

08007238 <__smakebuf_r>:
 8007238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723a:	2602      	movs	r6, #2
 800723c:	898b      	ldrh	r3, [r1, #12]
 800723e:	0005      	movs	r5, r0
 8007240:	000c      	movs	r4, r1
 8007242:	b085      	sub	sp, #20
 8007244:	4233      	tst	r3, r6
 8007246:	d007      	beq.n	8007258 <__smakebuf_r+0x20>
 8007248:	0023      	movs	r3, r4
 800724a:	3347      	adds	r3, #71	@ 0x47
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	2301      	movs	r3, #1
 8007252:	6163      	str	r3, [r4, #20]
 8007254:	b005      	add	sp, #20
 8007256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007258:	ab03      	add	r3, sp, #12
 800725a:	aa02      	add	r2, sp, #8
 800725c:	f7ff ffc2 	bl	80071e4 <__swhatbuf_r>
 8007260:	9f02      	ldr	r7, [sp, #8]
 8007262:	9001      	str	r0, [sp, #4]
 8007264:	0039      	movs	r1, r7
 8007266:	0028      	movs	r0, r5
 8007268:	f7ff f99a 	bl	80065a0 <_malloc_r>
 800726c:	2800      	cmp	r0, #0
 800726e:	d108      	bne.n	8007282 <__smakebuf_r+0x4a>
 8007270:	220c      	movs	r2, #12
 8007272:	5ea3      	ldrsh	r3, [r4, r2]
 8007274:	059a      	lsls	r2, r3, #22
 8007276:	d4ed      	bmi.n	8007254 <__smakebuf_r+0x1c>
 8007278:	2203      	movs	r2, #3
 800727a:	4393      	bics	r3, r2
 800727c:	431e      	orrs	r6, r3
 800727e:	81a6      	strh	r6, [r4, #12]
 8007280:	e7e2      	b.n	8007248 <__smakebuf_r+0x10>
 8007282:	2380      	movs	r3, #128	@ 0x80
 8007284:	89a2      	ldrh	r2, [r4, #12]
 8007286:	6020      	str	r0, [r4, #0]
 8007288:	4313      	orrs	r3, r2
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	6120      	str	r0, [r4, #16]
 8007290:	6167      	str	r7, [r4, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00c      	beq.n	80072b0 <__smakebuf_r+0x78>
 8007296:	0028      	movs	r0, r5
 8007298:	230e      	movs	r3, #14
 800729a:	5ee1      	ldrsh	r1, [r4, r3]
 800729c:	f000 f820 	bl	80072e0 <_isatty_r>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d005      	beq.n	80072b0 <__smakebuf_r+0x78>
 80072a4:	2303      	movs	r3, #3
 80072a6:	89a2      	ldrh	r2, [r4, #12]
 80072a8:	439a      	bics	r2, r3
 80072aa:	3b02      	subs	r3, #2
 80072ac:	4313      	orrs	r3, r2
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	9a01      	ldr	r2, [sp, #4]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	e7cc      	b.n	8007254 <__smakebuf_r+0x1c>
	...

080072bc <_fstat_r>:
 80072bc:	2300      	movs	r3, #0
 80072be:	b570      	push	{r4, r5, r6, lr}
 80072c0:	4d06      	ldr	r5, [pc, #24]	@ (80072dc <_fstat_r+0x20>)
 80072c2:	0004      	movs	r4, r0
 80072c4:	0008      	movs	r0, r1
 80072c6:	0011      	movs	r1, r2
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	f7fb fc68 	bl	8002b9e <_fstat>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d103      	bne.n	80072da <_fstat_r+0x1e>
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d000      	beq.n	80072da <_fstat_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	20000458 	.word	0x20000458

080072e0 <_isatty_r>:
 80072e0:	2300      	movs	r3, #0
 80072e2:	b570      	push	{r4, r5, r6, lr}
 80072e4:	4d06      	ldr	r5, [pc, #24]	@ (8007300 <_isatty_r+0x20>)
 80072e6:	0004      	movs	r4, r0
 80072e8:	0008      	movs	r0, r1
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	f7fb fc65 	bl	8002bba <_isatty>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d103      	bne.n	80072fc <_isatty_r+0x1c>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d000      	beq.n	80072fc <_isatty_r+0x1c>
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	46c0      	nop			@ (mov r8, r8)
 8007300:	20000458 	.word	0x20000458

08007304 <_sbrk_r>:
 8007304:	2300      	movs	r3, #0
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	4d06      	ldr	r5, [pc, #24]	@ (8007324 <_sbrk_r+0x20>)
 800730a:	0004      	movs	r4, r0
 800730c:	0008      	movs	r0, r1
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	f7fb fc68 	bl	8002be4 <_sbrk>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d103      	bne.n	8007320 <_sbrk_r+0x1c>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d000      	beq.n	8007320 <_sbrk_r+0x1c>
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	bd70      	pop	{r4, r5, r6, pc}
 8007322:	46c0      	nop			@ (mov r8, r8)
 8007324:	20000458 	.word	0x20000458

08007328 <memcpy>:
 8007328:	2300      	movs	r3, #0
 800732a:	b510      	push	{r4, lr}
 800732c:	429a      	cmp	r2, r3
 800732e:	d100      	bne.n	8007332 <memcpy+0xa>
 8007330:	bd10      	pop	{r4, pc}
 8007332:	5ccc      	ldrb	r4, [r1, r3]
 8007334:	54c4      	strb	r4, [r0, r3]
 8007336:	3301      	adds	r3, #1
 8007338:	e7f8      	b.n	800732c <memcpy+0x4>
	...

0800733c <__assert_func>:
 800733c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800733e:	0014      	movs	r4, r2
 8007340:	001a      	movs	r2, r3
 8007342:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <__assert_func+0x2c>)
 8007344:	0005      	movs	r5, r0
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	000e      	movs	r6, r1
 800734a:	68d8      	ldr	r0, [r3, #12]
 800734c:	4b07      	ldr	r3, [pc, #28]	@ (800736c <__assert_func+0x30>)
 800734e:	2c00      	cmp	r4, #0
 8007350:	d101      	bne.n	8007356 <__assert_func+0x1a>
 8007352:	4b07      	ldr	r3, [pc, #28]	@ (8007370 <__assert_func+0x34>)
 8007354:	001c      	movs	r4, r3
 8007356:	4907      	ldr	r1, [pc, #28]	@ (8007374 <__assert_func+0x38>)
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	9402      	str	r4, [sp, #8]
 800735c:	002b      	movs	r3, r5
 800735e:	9600      	str	r6, [sp, #0]
 8007360:	f000 f856 	bl	8007410 <fiprintf>
 8007364:	f000 f864 	bl	8007430 <abort>
 8007368:	20000018 	.word	0x20000018
 800736c:	0800770d 	.word	0x0800770d
 8007370:	08007748 	.word	0x08007748
 8007374:	0800771a 	.word	0x0800771a

08007378 <_calloc_r>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	0c0b      	lsrs	r3, r1, #16
 800737c:	0c15      	lsrs	r5, r2, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	d11e      	bne.n	80073c0 <_calloc_r+0x48>
 8007382:	2d00      	cmp	r5, #0
 8007384:	d10c      	bne.n	80073a0 <_calloc_r+0x28>
 8007386:	b289      	uxth	r1, r1
 8007388:	b294      	uxth	r4, r2
 800738a:	434c      	muls	r4, r1
 800738c:	0021      	movs	r1, r4
 800738e:	f7ff f907 	bl	80065a0 <_malloc_r>
 8007392:	1e05      	subs	r5, r0, #0
 8007394:	d01b      	beq.n	80073ce <_calloc_r+0x56>
 8007396:	0022      	movs	r2, r4
 8007398:	2100      	movs	r1, #0
 800739a:	f7fe f983 	bl	80056a4 <memset>
 800739e:	e016      	b.n	80073ce <_calloc_r+0x56>
 80073a0:	1c2b      	adds	r3, r5, #0
 80073a2:	1c0c      	adds	r4, r1, #0
 80073a4:	b289      	uxth	r1, r1
 80073a6:	b292      	uxth	r2, r2
 80073a8:	434a      	muls	r2, r1
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	b2a1      	uxth	r1, r4
 80073ae:	4359      	muls	r1, r3
 80073b0:	0c14      	lsrs	r4, r2, #16
 80073b2:	190c      	adds	r4, r1, r4
 80073b4:	0c23      	lsrs	r3, r4, #16
 80073b6:	d107      	bne.n	80073c8 <_calloc_r+0x50>
 80073b8:	0424      	lsls	r4, r4, #16
 80073ba:	b292      	uxth	r2, r2
 80073bc:	4314      	orrs	r4, r2
 80073be:	e7e5      	b.n	800738c <_calloc_r+0x14>
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	d101      	bne.n	80073c8 <_calloc_r+0x50>
 80073c4:	1c14      	adds	r4, r2, #0
 80073c6:	e7ed      	b.n	80073a4 <_calloc_r+0x2c>
 80073c8:	230c      	movs	r3, #12
 80073ca:	2500      	movs	r5, #0
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	0028      	movs	r0, r5
 80073d0:	bd70      	pop	{r4, r5, r6, pc}

080073d2 <__ascii_mbtowc>:
 80073d2:	b082      	sub	sp, #8
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d100      	bne.n	80073da <__ascii_mbtowc+0x8>
 80073d8:	a901      	add	r1, sp, #4
 80073da:	1e10      	subs	r0, r2, #0
 80073dc:	d006      	beq.n	80073ec <__ascii_mbtowc+0x1a>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d006      	beq.n	80073f0 <__ascii_mbtowc+0x1e>
 80073e2:	7813      	ldrb	r3, [r2, #0]
 80073e4:	600b      	str	r3, [r1, #0]
 80073e6:	7810      	ldrb	r0, [r2, #0]
 80073e8:	1e43      	subs	r3, r0, #1
 80073ea:	4198      	sbcs	r0, r3
 80073ec:	b002      	add	sp, #8
 80073ee:	4770      	bx	lr
 80073f0:	2002      	movs	r0, #2
 80073f2:	4240      	negs	r0, r0
 80073f4:	e7fa      	b.n	80073ec <__ascii_mbtowc+0x1a>

080073f6 <__ascii_wctomb>:
 80073f6:	0003      	movs	r3, r0
 80073f8:	1e08      	subs	r0, r1, #0
 80073fa:	d005      	beq.n	8007408 <__ascii_wctomb+0x12>
 80073fc:	2aff      	cmp	r2, #255	@ 0xff
 80073fe:	d904      	bls.n	800740a <__ascii_wctomb+0x14>
 8007400:	228a      	movs	r2, #138	@ 0x8a
 8007402:	2001      	movs	r0, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	4240      	negs	r0, r0
 8007408:	4770      	bx	lr
 800740a:	2001      	movs	r0, #1
 800740c:	700a      	strb	r2, [r1, #0]
 800740e:	e7fb      	b.n	8007408 <__ascii_wctomb+0x12>

08007410 <fiprintf>:
 8007410:	b40e      	push	{r1, r2, r3}
 8007412:	b517      	push	{r0, r1, r2, r4, lr}
 8007414:	4c05      	ldr	r4, [pc, #20]	@ (800742c <fiprintf+0x1c>)
 8007416:	ab05      	add	r3, sp, #20
 8007418:	cb04      	ldmia	r3!, {r2}
 800741a:	0001      	movs	r1, r0
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	f7ff fd12 	bl	8006e48 <_vfiprintf_r>
 8007424:	bc1e      	pop	{r1, r2, r3, r4}
 8007426:	bc08      	pop	{r3}
 8007428:	b003      	add	sp, #12
 800742a:	4718      	bx	r3
 800742c:	20000018 	.word	0x20000018

08007430 <abort>:
 8007430:	2006      	movs	r0, #6
 8007432:	b510      	push	{r4, lr}
 8007434:	f000 f82c 	bl	8007490 <raise>
 8007438:	2001      	movs	r0, #1
 800743a:	f7fb fb60 	bl	8002afe <_exit>

0800743e <_raise_r>:
 800743e:	b570      	push	{r4, r5, r6, lr}
 8007440:	0004      	movs	r4, r0
 8007442:	000d      	movs	r5, r1
 8007444:	291f      	cmp	r1, #31
 8007446:	d904      	bls.n	8007452 <_raise_r+0x14>
 8007448:	2316      	movs	r3, #22
 800744a:	6003      	str	r3, [r0, #0]
 800744c:	2001      	movs	r0, #1
 800744e:	4240      	negs	r0, r0
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <_raise_r+0x24>
 8007458:	008a      	lsls	r2, r1, #2
 800745a:	189b      	adds	r3, r3, r2
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	2a00      	cmp	r2, #0
 8007460:	d108      	bne.n	8007474 <_raise_r+0x36>
 8007462:	0020      	movs	r0, r4
 8007464:	f000 f830 	bl	80074c8 <_getpid_r>
 8007468:	002a      	movs	r2, r5
 800746a:	0001      	movs	r1, r0
 800746c:	0020      	movs	r0, r4
 800746e:	f000 f819 	bl	80074a4 <_kill_r>
 8007472:	e7ed      	b.n	8007450 <_raise_r+0x12>
 8007474:	2a01      	cmp	r2, #1
 8007476:	d009      	beq.n	800748c <_raise_r+0x4e>
 8007478:	1c51      	adds	r1, r2, #1
 800747a:	d103      	bne.n	8007484 <_raise_r+0x46>
 800747c:	2316      	movs	r3, #22
 800747e:	6003      	str	r3, [r0, #0]
 8007480:	2001      	movs	r0, #1
 8007482:	e7e5      	b.n	8007450 <_raise_r+0x12>
 8007484:	2100      	movs	r1, #0
 8007486:	0028      	movs	r0, r5
 8007488:	6019      	str	r1, [r3, #0]
 800748a:	4790      	blx	r2
 800748c:	2000      	movs	r0, #0
 800748e:	e7df      	b.n	8007450 <_raise_r+0x12>

08007490 <raise>:
 8007490:	b510      	push	{r4, lr}
 8007492:	4b03      	ldr	r3, [pc, #12]	@ (80074a0 <raise+0x10>)
 8007494:	0001      	movs	r1, r0
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	f7ff ffd1 	bl	800743e <_raise_r>
 800749c:	bd10      	pop	{r4, pc}
 800749e:	46c0      	nop			@ (mov r8, r8)
 80074a0:	20000018 	.word	0x20000018

080074a4 <_kill_r>:
 80074a4:	2300      	movs	r3, #0
 80074a6:	b570      	push	{r4, r5, r6, lr}
 80074a8:	4d06      	ldr	r5, [pc, #24]	@ (80074c4 <_kill_r+0x20>)
 80074aa:	0004      	movs	r4, r0
 80074ac:	0008      	movs	r0, r1
 80074ae:	0011      	movs	r1, r2
 80074b0:	602b      	str	r3, [r5, #0]
 80074b2:	f7fb fb14 	bl	8002ade <_kill>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d103      	bne.n	80074c2 <_kill_r+0x1e>
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d000      	beq.n	80074c2 <_kill_r+0x1e>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	20000458 	.word	0x20000458

080074c8 <_getpid_r>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	f7fb fb02 	bl	8002ad2 <_getpid>
 80074ce:	bd10      	pop	{r4, pc}

080074d0 <_init>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	46c0      	nop			@ (mov r8, r8)
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr

080074dc <_fini>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	46c0      	nop			@ (mov r8, r8)
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr
